<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>论文阅读笔记-Swin Transformer</title>
    <link href="/2021/11/04/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-swin%20Transformer/"/>
    <url>/2021/11/04/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-swin%20Transformer/</url>
    
    <content type="html"><![CDATA[<h2 id="论文要点"><a class="markdownIt-Anchor" href="#论文要点"></a> 论文要点</h2><p>ViT：在图像分类方面的结果令人鼓舞，但由于其低分辨率特征映射和复杂度随图像大小的二次增加，其结构不适合用作密集视觉任务或输入图像分辨率较高时的通用主干网络。</p><ul><li>结合了Transformer的建模能力以及图像领域的先验知识积累（分层，局部性，平移不变性）。</li><li>提出一种分层Transformer，其表示是使用shift window计算的，通过限制非重叠局部窗口的自关注计算，同时允许跨窗口连接，从而提高了效率。</li><li>在非重叠窗口局部计算self-attention（用红色标出），每个窗口中的面片数是固定的，因此复杂性与图像大小成线性关系。</li></ul><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202111031413276.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202111031415089.png" alt="" /></p><p>Swin Transformer的一个关键设计元素是在连续的自我关注层之间移动窗口分区，如图2所示。移动的窗口桥接了前一层的窗口，提供了它们之间的连接，显著增强了建模能力（见表4）。这种策略在考虑真实世界的延迟方面也很有效：一个窗口中的所有query patch都共享相同的key set，这有助于硬件中的内存访问。相比之下，早期基于滑动窗口的自我注意方法在通用硬件上的延迟较低，因为不同查询像素的key set不同。我们的实验表明，所提出的移位窗口方法比滑动窗口方法具有更低的延迟，但建模能力相似（见表5和表6）。移位窗口方法也适用于所有MLP架构。</p><h2 id="模型结构"><a class="markdownIt-Anchor" href="#模型结构"></a> 模型结构</h2><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202111031455156.png" alt="" /></p><h3 id="patch-partition"><a class="markdownIt-Anchor" href="#patch-partition"></a> Patch Partition</h3><p>与ViT中patch大小设置为16*16等不同，swin的patch设置的很小，为4*4。所以每个patch的特征为4*4*3，即48维。故得到的patch数量为H/4*W/4，最终得到的表示为H/4*W/4*48。</p><h3 id="linear-embedding"><a class="markdownIt-Anchor" href="#linear-embedding"></a> Linear Embedding</h3><p>用一个线性Linear Embedding层将patch的48维度输入投影到C维，即得到H/4*W/4*C，或可表示为 HW/16*C。</p><h3 id="patch-merging以stage-1为例"><a class="markdownIt-Anchor" href="#patch-merging以stage-1为例"></a> Patch Merging，以stage 1为例</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202111031656767.png" alt="" /></p><p>对之前的feature做2*2的降采样，如上图，行和列方向均间隔2个元素取值（可以理解为相邻的2*2方格只取一个），之后拼接在一起，得到长宽缩小两倍，通道数变为4C的feature，即H/8*W/8*4C，reshape为[(H/8*W/8),4C]后，对其添加一个全连接层使其降维到2C，即H/8*W/8*2C。之后的stage中也是相同的操作，这样就得到了不同分辨率的feature map。</p><h3 id="swin-transformer-block"><a class="markdownIt-Anchor" href="#swin-transformer-block"></a> Swin Transformer Block</h3><p>结构大体与标准结构相同，不同之处在于MSA模块修改为一个基于移位窗口的MSA模块，然后是一个具有GELU非线性层的2层MLP。在每个MSA模块和每个MLP之前应用LayerNorm（LN）层，在每个模块之后应用残差连接。</p><h3 id="shifted-window-based-self-attention-移动窗口为基础的self-attention"><a class="markdownIt-Anchor" href="#shifted-window-based-self-attention-移动窗口为基础的self-attention"></a> Shifted Window based Self-Attention 移动窗口为基础的self-attention</h3><p>Transformer的自注意力模块会计算一个token和其他所有token之间的关系，导致计算复杂性为二次方，使其不适合于高分辨率图像以及致密预测。</p><h4 id="self-attention-in-non-overlapped-windows-非重叠窗口中的自注意力"><a class="markdownIt-Anchor" href="#self-attention-in-non-overlapped-windows-非重叠窗口中的自注意力"></a> Self-attention in non-overlapped windows 非重叠窗口中的自注意力</h4><p>为了避免以上情况，文章采用在局部window中计算自注意力，这些局部window以不重叠的方式划分图像。</p><p>假设每个窗口包含M*M个patch，对于一个含有h*w个patch的图像来说，基于window的MSA和原始的MSA计算复杂度如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi><mo stretchy="false">(</mo><mi>M</mi><mi>S</mi><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><mn>4</mn><mi>h</mi><mi>w</mi><msup><mi>C</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mo stretchy="false">(</mo><mi>h</mi><mi>w</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mi>C</mi><mspace linebreak="newline"></mspace><mi mathvariant="normal">Ω</mi><mo stretchy="false">(</mo><mi>W</mi><mo>−</mo><mi>M</mi><mi>S</mi><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><mn>4</mn><mi>h</mi><mi>w</mi><msup><mi>C</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><msup><mi>M</mi><mn>2</mn></msup><mi>h</mi><mi>w</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">\Omega(MSA)=4hwC^2+2(hw)^2C \\\Omega(W-MSA)=4hwC^2+2M^2hwC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">h</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></span></p><p>其中，前者是patch数hw的二次方，而后者在M固定时是线性的（window大小，一个window包含M*M个patch，M默认设置为7）。对于较大的hw来说，全局的自我注意计算通常是负担不起的，而基于窗口的自我注意（W-MSA）是可伸缩的。</p><h4 id="shifted-window-partitioning-in-successive-blocks-连续块中的移动窗口划分"><a class="markdownIt-Anchor" href="#shifted-window-partitioning-in-successive-blocks-连续块中的移动窗口划分"></a> Shifted window partitioning in successive blocks 连续块中的移动窗口划分</h4><p>W-MSA模块缺乏窗口之间的连接，限制了其建模能力。为了保证其高效的计算能力同时引入窗口之间的连接，文章提出一种移动窗口划分方法，在连续的swin-transformer块中交替使用两种划分配置。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202111031415089.png" alt="" /></p><p>如图2，左边第一种划分是常规window partition划分方法，将8*8的feature map划分为4*4的patch大小（即2*2的window划分，一个window中有4*4个patch，即M=4）。在其下一层会使用shifted window partition方法，在h和w上分别移动 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌊</mo><mfrac><mi>M</mi><mn>2</mn></mfrac><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor \frac{M}{2}\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span> 。使用了shift window partition（SW-MSA）方法后，swin-transformer块可以表示为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mover accent="true"><mi>z</mi><mo>^</mo></mover><mi>l</mi></msup><mo>=</mo><mi>W</mi><mo>−</mo><mi>M</mi><mi>S</mi><mi>A</mi><mo stretchy="false">(</mo><mi>L</mi><mi>N</mi><mo stretchy="false">(</mo><msup><mi>z</mi><mrow><mi>l</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><msup><mi>z</mi><mrow><mi>l</mi><mo>−</mo><mn>1</mn></mrow></msup><mo separator="true">,</mo><mspace linebreak="newline"></mspace><msup><mi>z</mi><mi>l</mi></msup><mo>=</mo><mi>M</mi><mi>L</mi><mi>P</mi><mo stretchy="false">(</mo><mi>L</mi><mi>N</mi><mo stretchy="false">(</mo><msup><mover accent="true"><mi>z</mi><mo>^</mo></mover><mi>l</mi></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><msup><mover accent="true"><mi>z</mi><mo>^</mo></mover><mi>l</mi></msup><mo separator="true">,</mo><mspace linebreak="newline"></mspace><msup><mover accent="true"><mi>z</mi><mo>^</mo></mover><mrow><mi>l</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>S</mi><mi>W</mi><mo>−</mo><mi>M</mi><mi>S</mi><mi>A</mi><mo stretchy="false">(</mo><mi>L</mi><mi>N</mi><mo stretchy="false">(</mo><msup><mi>z</mi><mi>l</mi></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><msup><mi>z</mi><mi>l</mi></msup><mo separator="true">,</mo><mspace linebreak="newline"></mspace><msup><mi>z</mi><mrow><mi>l</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>M</mi><mi>L</mi><mi>P</mi><mo stretchy="false">(</mo><mi>L</mi><mi>N</mi><mo stretchy="false">(</mo><msup><mover accent="true"><mi>z</mi><mo>^</mo></mover><mrow><mi>l</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><msup><mover accent="true"><mi>z</mi><mo>^</mo></mover><mrow><mi>l</mi><mo>+</mo><mn>1</mn></mrow></msup><mo separator="true">,</mo><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">\hat z^l=W-MSA(LN(z^{l-1}))+z^{l-1},\\z^l=MLP(LN(\hat z^l))+\hat z^l,\\\hat z^{l+1}=SW-MSA(LN(z^{l}))+z^{l},\\z^{l+1}=MLP(LN(\hat z^{l+1}))+\hat z^{l+1},\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">A</span><span class="mopen">(</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.093548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.093548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">A</span><span class="mopen">(</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.093548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.093548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span></span><span class="mspace newline"></span></span></span></span></p><h4 id="efficient-batch-computation-for-shifted-configuration-移动配置的高效批次计算"><a class="markdownIt-Anchor" href="#efficient-batch-computation-for-shifted-configuration-移动配置的高效批次计算"></a> Efficient batch computation for shifted configuration 移动配置的高效批次计算</h4><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202111041128651.png" alt="" /></p><p>shifted window partition会带来的一个问题是它引入了更多的window，从正常配置的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌈</mo><mfrac><mi>h</mi><mi>M</mi></mfrac><mo stretchy="false">⌉</mo><mo>×</mo><mo stretchy="false">⌈</mo><mfrac><mi>w</mi><mi>M</mi></mfrac><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil \frac{h}{M} \rceil \times \lceil \frac{w}{M} \rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mopen">⌈</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌈</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌉</span></span></span></span> 个window变为shifted window partition的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">⌈</mo><mfrac><mi>h</mi><mi>M</mi></mfrac><mo stretchy="false">⌉</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mo stretchy="false">⌈</mo><mfrac><mi>w</mi><mi>M</mi></mfrac><mo stretchy="false">⌉</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\lceil \frac{h}{M}\rceil +1) \times (\lceil \frac{w}{M} \rceil +1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mopen">⌈</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mopen">⌈</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 。以图2为例，8*8的feature map，M=4，8/4=2，从2*2=4个window变为3*3=9个window，同时某些window中patch个数会小于M*M（这里为例保证h/M整除可以引入bottom-right padding）。</p><p>一个简单的解决方案是将较小的窗口填充到M×M大小，并在计算注意力时屏蔽填充的值。当常规分区方法中的窗口window数很小时（例如图2中2×2），使用此简单的解决方案增加的计算量相当大（2×2 → 3×3，大了2.25倍）。</p><p>文章提出了一种更有效的批量计算方法，方法是向左上方向循环移位cyclic-shifting，如图4所示，原来在左上角的ABC部分转移到右下角（注意B和C其实都是由两块window组成的）。在该移位之后，一个批处理窗口可能由多个子窗口组成，这些子窗口在特征图中原来是不相邻的，因此采用掩蔽机制将自我注意计算限制在每个子窗口内。通过循环移位，批处理窗口的数量与常规窗口分区的数量相同，因此也是有效的。转移操作的示意图如下。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202111041335665.png" alt="" /></p><p>其移位操作可以通过torch.roll()实现。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202111041336985.png" alt="" /></p><p>最后，我们只希望对同一窗口window内进行self-attention计算，所以在大的组合window内计算attention时需要进行mask，操作如下。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202111041337498.png" alt="" /></p><h4 id="relative-position-bias相对位置偏置项"><a class="markdownIt-Anchor" href="#relative-position-bias相对位置偏置项"></a> Relative position bias相对位置偏置项</h4><p>如同之前的工作一样，添加relative position bias <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><msup><mi>M</mi><mn>2</mn></msup><mo>×</mo><msup><mi>M</mi><mn>2</mn></msup></mrow></msup></mrow><annotation encoding="application/x-tex">B \in \mathbb{R}^{M^2\times M^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9869199999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869199999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> 。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">(</mo><mi>Q</mi><mo separator="true">,</mo><mi>K</mi><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">)</mo><mo>=</mo><mi>S</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>M</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>Q</mi><msup><mi>K</mi><mi>T</mi></msup><mi mathvariant="normal">/</mi><msqrt><mi>d</mi></msqrt><mo>+</mo><mi>B</mi><mo stretchy="false">)</mo><mi>V</mi><mspace linebreak="newline"></mspace><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mtext> </mtext><mi>Q</mi><mo separator="true">,</mo><mi>K</mi><mo separator="true">,</mo><mi>V</mi><mtext> </mtext><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><msup><mi>M</mi><mn>2</mn></msup><mo>×</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">Attention(Q,K,V)=SoftMax(QK^T/\sqrt d +B)V\\where\ Q,K,V \ \in\mathbb{R}^{M^2\times d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">t</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">Q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.231095em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">Q</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981095em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="padding-left:0.833em;">d</span></span><span style="top:-2.941095em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.058904999999999985em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">Q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0369199999999998em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0369199999999998em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>d是q，k的维度， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>M</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">M^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 是一个window中patch的数量。一个window里的tokens在h和w每个维度上的相对位置都在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mi>M</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>M</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[-M+1,M-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 范围内，共2M-1个取值，如果我们采用2D relative position来编码的话，相对位置共有(2M-1)*(2M-1) ，那么只需要定义 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>B</mi><mo>^</mo></mover><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mo stretchy="false">(</mo><mn>2</mn><mi>M</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mn>2</mn><mi>M</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">\hat B \in \mathbb{R}^{(2M-1)\times (2M-1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9858699999999999em;vertical-align:-0.0391em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mbin mtight">×</span><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span> 的relative position bias，实际的B从其中取值。</p><p>实验观察到与没有此偏差项或使用绝对位置嵌入的对应项相比，有显著的改进，而进一步向输入添加绝对位置嵌入会略微降低性能，因此文章的实现中不采用绝对位置嵌入。</p><p>预训练中学习到的相对位置偏差也可用于初始化模型，以便通过双三次插值以不同的窗口大小进行微调[20,63]。</p><h3 id="模型配置"><a class="markdownIt-Anchor" href="#模型配置"></a> 模型配置</h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">•</mi><mi>S</mi><mi>w</mi><mi>i</mi><mi>n</mi><mo>−</mo><mi>T</mi><mo>:</mo><mi>C</mi><mo>=</mo><mn>96</mn><mo separator="true">,</mo><mi>l</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>=</mo><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>6</mn><mo separator="true">,</mo><mn>2</mn></mrow><mtext>     </mtext><mspace linebreak="newline"></mspace><mi mathvariant="normal">•</mi><mi>S</mi><mi>w</mi><mi>i</mi><mi>n</mi><mo>−</mo><mi>S</mi><mo>:</mo><mi>C</mi><mo>=</mo><mn>96</mn><mo separator="true">,</mo><mi>l</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>=</mo><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>18</mn><mo separator="true">,</mo><mn>2</mn></mrow><mtext>   </mtext><mspace linebreak="newline"></mspace><mi mathvariant="normal">•</mi><mi>S</mi><mi>w</mi><mi>i</mi><mi>n</mi><mo>−</mo><mi>B</mi><mo>:</mo><mi>C</mi><mo>=</mo><mn>128</mn><mo separator="true">,</mo><mi>l</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>=</mo><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>18</mn><mo separator="true">,</mo><mn>2</mn></mrow><mspace linebreak="newline"></mspace><mi mathvariant="normal">•</mi><mi>S</mi><mi>w</mi><mi>i</mi><mi>n</mi><mo>−</mo><mi>L</mi><mo>:</mo><mi>C</mi><mo>=</mo><mn>192</mn><mo separator="true">,</mo><mi>l</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>=</mo><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>18</mn><mo separator="true">,</mo><mn>2</mn></mrow><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">•Swin-T: C = 96, layer numbers = {2, 2, 6, 2}\ \ \ \ \ \\•Swin-S: C = 96, layer numbers ={2, 2, 18, 2}\ \ \ \\•Swin-B: C = 128, layer numbers ={2, 2, 18, 2}\\•Swin-L: C = 192, layer numbers ={2, 2, 18, 2}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">•</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">9</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span></span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">•</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">9</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span></span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">•</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">•</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">9</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span></span></span><span class="mspace newline"></span></span></span></span></p><p>C是stage1中hidden-layer的通道数。</p><p>基础模型为Swin-B，Swin-T, Swin-S and Swin-L分别为其0.25×, 0.5× 和 2×。注意，Swin-T和Swin-S的复杂性分别与Reset-50（Deit-S）和Resnet-101的复杂性类似。默认情况下，窗口大小设置为M = 7。每个头部的查询Q的维度是D = 32，并且每个MLP的扩展层是α= 4，用于所有实验。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://zhuanlan.zhihu.com/p/367111046">图解Swin Transformer</a></p><p><a href="https://zhuanlan.zhihu.com/p/376486858">SOTA模型Swin Transformer是如何炼成的</a></p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-ViT</title>
    <link href="/2021/11/02/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-ViT/"/>
    <url>/2021/11/02/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-ViT/</url>
    
    <content type="html"><![CDATA[<h2 id="论文要点"><a class="markdownIt-Anchor" href="#论文要点"></a> 论文要点</h2><ul><li>将transformer结构引入计算机视觉，解除了对CNN的依赖。</li><li>将图片分割成一个个patch，再进行transformer计算。</li></ul><h2 id="模型结构"><a class="markdownIt-Anchor" href="#模型结构"></a> 模型结构</h2><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202111021516521.png"  /><p>由于Transformer处理的数据是一维的序列，所以需要对图像做一定处理。将一张图片 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>H</mi><mo>×</mo><mi>W</mi><mo>×</mo><mi>C</mi></mrow></msup></mrow><annotation encoding="application/x-tex">x \in \mathbb{R}^{H \times W \times C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span></span></span></span></span></span></span></span> 分割为patch序列 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>p</mi></msub><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>N</mi><mo>×</mo><mo stretchy="false">(</mo><msup><mi>P</mi><mn>2</mn></msup><mo>⋅</mo><mi>C</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">x_p \in \mathbb{R}^{N\times (P^2 \cdot C)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8252079999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9869199999999998em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869199999999998em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">×</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span> 其中H,W是原图片的宽高，C是通道数。每个patch的分辨率为P*P，而 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>=</mo><mi>H</mi><mi>W</mi><mi mathvariant="normal">/</mi><msup><mi>P</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N=HW/P^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 是最终的patch数量。</p><p>由于transformer所有层都使用潜在的固定向量长度D，需要使用一个矩阵E将patch线性投影到维度D，如下图公式1：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202111021755366.png" alt="" /></p><p>第0位作为类别预测类，做法类似于Bert，在公式4中将其表达为图像表示y。公式2，3为transformer中的操作（结合上图理解）。公式3中的MLP代表两层网络加一个GELU非线性层.</p><p>其中对每一个patch增加的position embedding在初始化的时候是不带2D位置信息的，需要后续学习得到。</p><h3 id="fine-tuning"><a class="markdownIt-Anchor" href="#fine-tuning"></a> fine-tuning</h3><p>通常，我们在大型数据集上预先训练ViT，并对（较小的）下游任务进行微调。为此，我们移除预训练的预测头，并附加一个零初始化的D*K前馈层，其中K是下游类的数量。以比训练前更高的分辨率进行微调通常是有益的（Touvron等人，2019年；Kolesnikov等人，2020年）。当馈送更高分辨率的图像时，我们保持面片大小不变，这会导致更大的有效序列长度。Vision Transformer可以处理任意序列长度（最多内存限制），但是，预训练的位置嵌入可能不再有意义。因此，我们根据预训练位置嵌入在原始图像中的位置，对其执行2D插值。请注意，此分辨率调整和面片提取是手动将图像2D结构的感应偏差注入视觉转换器的唯一点。</p><p>预训练数据集：ILSVRC-2012 ImageNet，ImageNet-21k，JFT</p><p>下游任务：ImageNet validation set， the cleaned-up ReaL labels (Beyer et al., 2020), CIFAR-10/100 (Krizhevsky, 2009), Oxford-IIIT Pets (Parkhi et al., 2012), and Oxford Flowers-102 (Nilsback &amp; Zisserman, 2008)。</p><h2 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h2><p>ViT在大型数据集上预训练的表现较好，而ResNet适合小型数据集预训练（相对）。下图中，ViT-L/16表示ViT-Large使用32*32的patch分辨率。事实上，patch分辨率越大，分割得到的patch数量越小，即transformer得到的序列长度越小。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202111031048345.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202111031049276.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202111031049085.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202111031049764.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202111031050717.png" alt="" /></p><p>此外，作者提出可以添加Axial attention轴向注意力来处理多维向量输入，即不用硬性处理为一维patch序列。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202111031311445.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python的from import机制</title>
    <link href="/2021/10/28/python%E7%9A%84from%20import%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/10/28/python%E7%9A%84from%20import%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>最近学习detectron2框架，对里面的Registry注册机制很感兴趣，用法大概是在一个定义好的模型类的上方增加一个注解，那么以后可以在yaml等标签文件中直接使用对应的类名来使用这个模型。在查阅博客时看见了这么一张图：</p><p><img src="https://gitee.com/xiongjun131/blogImage/raw/master/img/Snipaste_2021-06-30_11-29-21.png" alt="img" /></p><p>对其运行过程很好奇，手动尝试了下，感觉对于python的模块导入以及运行机制有了更深的体会。</p><h2 id="运行过程解释"><a class="markdownIt-Anchor" href="#运行过程解释"></a> 运行过程解释</h2><p>首先表明，python是一个脚本语言，不用编译可以直接执行，而java，C等为编译语言，需要编译执行。</p><p>什么意思呢，python语言的.py文件可以直接执行，而java、C等的文件需要编译成一个exe之类的文件再执行，也就是说如果一个目录下有两个互相联系的.java文件，在编译时会同时考虑到二者，将其联系起来输出为一个可执行文件，而一个目录下的两个py文件默认是独立执行的，只有在运行时需要的时候才会寻找另一个文件中的模块。如上图，<strong>在编译时会自行寻找到目录下的文件并生成缓存</strong>，同时，在编译时找到相应文件并生成缓存之后，<strong>再一次导入时会从缓存中寻找</strong>而不是再一次寻找相应文件生成缓存。</p><p>之后再执行时，当文件未修改时会继续使用之前的缓存，当文件修改后会再一次寻找文件并生成缓存。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110282009445.png" alt="" /></p><p>同时，对于相同的命名的变量，如果为from…import形式导入，相同名称变量会进行覆盖。python中也有命名空间的概念：</p><ul><li><p><strong>内置名称（built-in names</strong>）， Python 语言内置的名称，比如函数名 abs、char 和异常名称 BaseException、Exception 等等。</p></li><li><p><strong>全局名称（global names）</strong>，模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。</p></li><li><p><strong>局部名称（local names）</strong>，函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量。（<strong>类中定义的也是</strong>）</p></li></ul><p>也就是说，不同的py文件使用不同global namespace，在使用import A时，可以使用A.value来使用不同的namespace，而在from…import的时候，会把其他模块中的变量复制到当前模块，也就是把其他namespace中的变量赋值到当前namespace，而类自身也是一个namespace。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># A.py 执行A.py</span><br><span class="hljs-keyword">from</span> C <span class="hljs-keyword">import</span> num,printNum,getAppleSize  <span class="hljs-comment"># 先from C所以前去执行C.py</span><br>print(<span class="hljs-string">&quot;A.py&quot;</span>) <span class="hljs-comment"># 执行完C.py之后继续执行A.py</span><br>num = num+<span class="hljs-number">4</span><br><span class="hljs-keyword">from</span> B <span class="hljs-keyword">import</span> sub <span class="hljs-comment"># 执行B.py</span><br>print(num)    <span class="hljs-comment"># 从C中复制来引入的num为1，所以这里输出9</span><br>printNum()   <span class="hljs-comment"># 调用C中的函数，所以输出C的namespace中的num=1</span><br>print(getAppleSize())   <span class="hljs-comment"># 类自身有其namespace，所以B中的setSize(100)成功，输出100</span><br>print(<span class="hljs-string">&quot;A OK&quot;</span>)<br><br><span class="hljs-comment"># B.py</span><br><span class="hljs-keyword">from</span> C <span class="hljs-keyword">import</span> num,APPLE<br>print(<span class="hljs-string">&quot;B.fdfdfpy&quot;</span>)<br>num = num+<span class="hljs-number">100</span><br>print(num)<br>APPLE.setSize(<span class="hljs-number">100</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sub</span>(<span class="hljs-params">a,b</span>):</span><br>    <span class="hljs-keyword">return</span> a-b<br>print(<span class="hljs-string">&quot;B ok&quot;</span>)<br><br><span class="hljs-comment"># C.py</span><br><span class="hljs-keyword">from</span> apple <span class="hljs-keyword">import</span> Apple <span class="hljs-comment"># from apple 所以前去执行apple.py</span><br>print(<span class="hljs-string">&quot;C.py&quot;</span>)  <span class="hljs-comment"># 执行完apple.py之后执行C.py</span><br>APPLE = Apple(<span class="hljs-number">10</span>)<br>print(<span class="hljs-string">&quot;Hello C&quot;</span>)<br>num=<span class="hljs-number">0</span><br>num=num+<span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printNum</span>():</span><br>    print(num)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getAppleSize</span>():</span><br>    <span class="hljs-keyword">return</span> APPLE.getSize()<br>print(<span class="hljs-string">&quot;C ok&quot;</span>)<br><br><span class="hljs-comment"># apple.py </span><br>print(<span class="hljs-string">&quot;apple.py&quot;</span>) <span class="hljs-comment"># 所以这是第一步执行的语句 执行脚本生成缓存</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Apple</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,size:<span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-keyword">None</span>:</span><br>        self._size = size <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setSize</span>(<span class="hljs-params">self,size</span>):</span><br>        self._size = size<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSize</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._size<br>print(<span class="hljs-string">&quot;appfffffle ok&quot;</span>)  <span class="hljs-comment"># 所以这是第二个输出语句</span><br><br><span class="hljs-comment"># 输出</span><br>apple.py<br>appfffffle ok<br>C.py<br>Hello C<br>C ok<br>A.py<br>B.fdfdfpy<br><span class="hljs-number">101</span><br>B ok<br><span class="hljs-number">5</span><br><span class="hljs-number">1</span><br><span class="hljs-number">100</span><br>A OK<br></code></pre></td></tr></table></figure><h2 id="感想"><a class="markdownIt-Anchor" href="#感想"></a> 感想</h2><p>之前一直觉得python简单，学了c的马上就能上手，现在发现python也不简单，其中也有很多为人称道之处，同时也更加理解了脚本语言和编译语言之间的不同之处，编程真是太好玩了。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://www.cnblogs.com/MorStar/p/14950460.html">注册机制（Registry）</a></p><p><a href="https://www.cnblogs.com/lfxiao/p/9295672.html">python之from 和import执行过程分析</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-MMnasNet</title>
    <link href="/2021/10/27/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-MMnasNet/"/>
    <url>/2021/10/27/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-MMnasNet/</url>
    
    <content type="html"><![CDATA[<h2 id="论文要点"><a class="markdownIt-Anchor" href="#论文要点"></a> 论文要点</h2><ul><li>将nas引入了多模态学习中，为各种多模态学习任务设计了一个广义深度多模态神经结构搜索（MMnas）框架，可以通用于多个下游任务。</li></ul><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110271149085.png" style="zoom:50%;" /><h2 id="mmnas架构"><a class="markdownIt-Anchor" href="#mmnas架构"></a> MMnas架构</h2><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110271159042.png" style="zoom:67%;" /><p>如上图，MMnas包含了一个统一的encoder-decoder backbone和几个不同任务特定的heads网络。backbone是由encoder-decoder块堆叠形成的，每个encoder-decoder块都是在一组预定义的原始操作中搜索得到的。</p><h3 id="预定义的原始操作"><a class="markdownIt-Anchor" href="#预定义的原始操作"></a> 预定义的原始操作</h3><p>有四类预定义的原始操作：self-attention (SA)，guided-attention (GA)，feed-forward network (FFN)，relation self-attention (RSA) operations.</p><p><strong>四类操作的核心都是scaled dot-product attention</strong>，文章受 [Relation networks for object detection.(CVPR)]的启发，对其添加了apriori relationship先验关系 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">R \in \mathbb{R}^{m \times n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> ，得到最终方程为：</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110271331883.png" style="zoom:67%;" /><p>对其应用Multi-Head Attention的结果如下：</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110271332735.png" style="zoom:67%;" /><h4 id="sax"><a class="markdownIt-Anchor" href="#sax"></a> SA(X)</h4><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Z</mi><mo>=</mo><mi>S</mi><mi>A</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>M</mi><mi>H</mi><mi>A</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>X</mi><mo separator="true">,</mo><mi>X</mi><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>X</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>m</mi><mo>×</mo><msub><mi>d</mi><mi>x</mi></msub></mrow></msup><mo separator="true">,</mo><mtext> </mtext><mi>Z</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>m</mi><mo>×</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">Z = SA(X) = MHA(X,X,X,0) \\where X \in \mathbb{R}^{m\times d_x},\ Z \in \mathbb{R}^{m \times d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">A</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.093548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.899108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>Z中每一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>z</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">z_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 编码了X中的所有feature <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 之间的模态内联系。0代表了全零矩阵，表明没有添加先验联系。</p><h4 id="gaxy"><a class="markdownIt-Anchor" href="#gaxy"></a> GA(X,Y)</h4><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Z</mi><mo>=</mo><mi>G</mi><mi>A</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>M</mi><mi>H</mi><mi>A</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo separator="true">,</mo><mi>Y</mi><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>X</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>m</mi><mo>×</mo><msub><mi>d</mi><mi>x</mi></msub></mrow></msup><mo separator="true">,</mo><mtext> </mtext><mi>Y</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>n</mi><mo>×</mo><msub><mi>d</mi><mi>y</mi></msub></mrow></msup><mo separator="true">,</mo><mtext> </mtext><mi>Z</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>m</mi><mo>×</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">Z = GA(X,Y) = MHA(X,Y,Y,0) \\where X \in \mathbb{R}^{m\times d_x},\ Y \in \mathbb{R}^{n\times d_y},\  Z \in \mathbb{R}^{m \times d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault">A</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.093548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.899108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.093548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>Z中每一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>z</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">z_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 编码了Y中的所有feature和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 之间的模态间联系。</p><h4 id="ffnx"><a class="markdownIt-Anchor" href="#ffnx"></a> FFN(X)</h4><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Z</mi><mo>=</mo><mi>F</mi><mi>F</mi><mi>N</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>F</mi><msub><mi>C</mi><mi>d</mi></msub><mo>∘</mo><mi>D</mi><mi>r</mi><mi>o</mi><msub><mi>p</mi><mn>0.1</mn></msub><mo>∘</mo><mi>R</mi><mi>e</mi><mi>L</mi><mi>U</mi><mo>∘</mo><mi>F</mi><msub><mi>C</mi><mrow><mn>4</mn><mi>d</mi></mrow></msub><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>X</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>m</mi><mo>×</mo><msub><mi>d</mi><mi>x</mi></msub></mrow></msup><mo separator="true">,</mo><mtext> </mtext><mi>Z</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>m</mi><mo>×</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">Z=FFN(X)=FC_d \circ Drop_{0.1} \circ ReLU \circ FC_{4d}(X) \\where X \in \mathbb{R}^{m\times d_x},\ Z \in \mathbb{R}^{m \times d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.093548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.899108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>FFN由两层MLP和ReLU，dropout模块组成</p><h4 id="rsaxr"><a class="markdownIt-Anchor" href="#rsaxr"></a> RSA(X,R)</h4><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>L</mi><mi>P</mi><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo><mo>=</mo><mi>R</mi><mi>e</mi><mi>L</mi><mi>U</mi><mo>∘</mo><mi>F</mi><msub><mi>C</mi><mn>1</mn></msub><mo>∘</mo><mi>R</mi><mi>e</mi><mi>L</mi><mi>U</mi><mo>∘</mo><mi>F</mi><msub><mi>C</mi><msub><mi>d</mi><mi>h</mi></msub></msub><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>Z</mi><mo>=</mo><mi>R</mi><mi>S</mi><mi>A</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>R</mi><mo stretchy="false">)</mo><mo>=</mo><mi>M</mi><mi>H</mi><mi>A</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>X</mi><mo separator="true">,</mo><mi>X</mi><mo separator="true">,</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>M</mi><mi>L</mi><mi>P</mi><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo><mo>+</mo><mi>ε</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>X</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>m</mi><mo>×</mo><msub><mi>d</mi><mi>x</mi></msub></mrow></msup><mo separator="true">,</mo><mtext> </mtext><mi>Z</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>m</mi><mo>×</mo><mi>d</mi></mrow></msup><mo separator="true">,</mo><mi>R</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>m</mi><mo>×</mo><mi>m</mi><mo>×</mo><msub><mi>d</mi><mi>r</mi></msub></mrow></msup></mrow><annotation encoding="application/x-tex">MLP(R) = ReLU \circ FC_1 \circ ReLU \circ FC_{d_h}(R)\\Z = RSA(X,R) = MHA(X,X,X,log(MLP(R)+\varepsilon)) \\where X \in \mathbb{R}^{m\times d_x},\ Z \in \mathbb{R}^{m \times d}, R \in \mathbb{R}^{m \times m\times d_r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.00586em;vertical-align:-0.25586em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999985em;"><span style="top:-2.55em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25586em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">A</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ε</span><span class="mclose">)</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.093548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.899108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.093548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.899108em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.899108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>以上四个操作均运用残差连接和LN。</p><h3 id="unified-encoder-decoder-backbone"><a class="markdownIt-Anchor" href="#unified-encoder-decoder-backbone"></a> Unified Encoder-Decoder Backbone</h3><h4 id="sentence-and-image-representations"><a class="markdownIt-Anchor" href="#sentence-and-image-representations"></a> Sentence and Image Representations:</h4><p>输入的句子首先tokenized然后trimmed切分或zero padded为一个m个word的句子，每个word使用预训练的GloVe来embedding为300维的向量，接着送入有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">d_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 个hidden units的单层LSTM，结果为一个sentence feature <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>m</mi><mo>×</mo><msub><mi>d</mi><mi>x</mi></msub></mrow></msup></mrow><annotation encoding="application/x-tex">X\in \mathbb{R}^{m \times d_x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> 。</p><p>输入的图像被使用预训练的Faster RCNN表示为一系列的对象（区域），一张图片会得到n个对象（区域），并表示为图像特征，并最终经由池化层得到最终特征 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>n</mi><mo>×</mo><msub><mi>d</mi><mi>y</mi></msub></mrow></msup></mrow><annotation encoding="application/x-tex">Y \in \mathbb{R}^{n\times d_y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> 。而其关系特征 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>n</mi><mo>×</mo><mi>n</mi><mo>×</mo><mn>4</mn></mrow></msup></mrow><annotation encoding="application/x-tex">R \in \mathbb{R}^{n\times n\times 4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">×</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span> 则用对象间的空间特征表示（每个对象有对象中心坐标 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i,y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和宽高 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i,h_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，斯四维的第m个对象和第n个对象间的关系特征可表示为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><msub><mi>𝑥</mi><mi>𝑚</mi></msub><mi mathvariant="normal">−</mi><msub><mi>𝑥</mi><mi>𝑛</mi></msub><mi mathvariant="normal">∣</mi><mi mathvariant="normal">/</mi><msub><mi>𝑤</mi><mi>𝑚</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><msub><mi>𝑦</mi><mi>𝑚</mi></msub><mi mathvariant="normal">−</mi><msub><mi>𝑦</mi><mi>𝑛</mi></msub><mi mathvariant="normal">∣</mi><mi mathvariant="normal">/</mi><msub><mi>h</mi><mi>𝑚</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><msub><mi>𝑤</mi><mi>𝑛</mi></msub><mi mathvariant="normal">/</mi><msub><mi>𝑤</mi><mi>𝑚</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><msub><mi>h</mi><mi>𝑛</mi></msub><mi mathvariant="normal">/</mi><msub><mi>h</mi><mi>𝑚</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">[log( |𝑥_𝑚 − 𝑥_𝑛 |/𝑤_𝑚), log( |𝑦_𝑚 − 𝑦_𝑛 |/ℎ_𝑚), log(𝑤_𝑛/𝑤_𝑚), log(ℎ_𝑛/ℎ_𝑚) ].</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">]</span><span class="mord">.</span></span></span></span>）。</p><h4 id="sentence-encoder-and-image-decoder"><a class="markdownIt-Anchor" href="#sentence-encoder-and-image-decoder"></a> Sentence Encoder and Image Decoder:</h4><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110271444208.png" style="zoom:67%;" /><p>将得到的X输入到M个Encoder中： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>X</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><msubsup><mi>b</mi><mrow><mi>e</mi><mi>n</mi><mi>c</mi></mrow><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup><mo stretchy="false">(</mo><msup><mi>X</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mtext> </mtext><mi>i</mi><mo>∈</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mi>M</mi><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>a</mi><mi>n</mi><mi>d</mi><mtext> </mtext><msup><mi>X</mi><mrow><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">X^{(i)} = b^{(i)}_{enc}(X^{(i-1)}), where\ i \in \{1,2,…M\}, and\ X^{(0)}=X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2948em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.5834080000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">c</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11659199999999997em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">0</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span></p><p>其中每一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>b</mi><mrow><mi>e</mi><mi>n</mi><mi>c</mi></mrow><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">b^{(i)}_{enc}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.161392em;vertical-align:-0.11659199999999997em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.5834080000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">c</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11659199999999997em;"><span></span></span></span></span></span></span></span></span></span>代表一个从encoder操作池中找到的操作，这里的池中只有SA和FFN。</p><p>对于Image部分也是如此，有N个decoder block，这里的decoder操作池中包含所有四个操作：SA,RSA,GA,FFN。对其输入进行如下操作：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>Y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><msubsup><mi>b</mi><mrow><mi>e</mi><mi>n</mi><mi>c</mi></mrow><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup><mo stretchy="false">(</mo><msup><mi>Y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo separator="true">,</mo><mi>R</mi><mo separator="true">,</mo><msup><mi>X</mi><mrow><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mtext> </mtext><mi>i</mi><mo>∈</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mi>N</mi><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>a</mi><mi>n</mi><mi>d</mi><mtext> </mtext><msup><mi>Y</mi><mrow><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y^{(i)} = b^{(i)}_{enc}(Y^{(i-1)},R,X^{(M)}), where\ i \in \{1,2,…N\}, and\ Y^{(0)}=Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2948em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.5834080000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">c</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11659199999999997em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">0</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo separator="true">,</mo><msup><mi>X</mi><mrow><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">R,X^{(M)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>是可选输入，仅当block为RSA,GA时使用。</p><h3 id="task-specific-heads"><a class="markdownIt-Anchor" href="#task-specific-heads"></a> Task specific Heads</h3><p>经由encoder-decoder Backbone后，n个对象和m个word被输出为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi><mi>f</mi><mi>e</mi><mi>a</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>e</mi><mo>:</mo><msup><mi>X</mi><mrow><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><mo stretchy="false">[</mo><msubsup><mi>x</mi><mn>1</mn><mrow><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo></mrow></msubsup><mo separator="true">,</mo><msubsup><mi>x</mi><mn>2</mn><mrow><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo></mrow></msubsup><mo separator="true">,</mo><mo>…</mo><msubsup><mi>x</mi><mi>m</mi><mrow><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo></mrow></msubsup><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>i</mi><mi>m</mi><mi>a</mi><mi>g</mi><mi>e</mi><mi>f</mi><mi>e</mi><mi>a</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>e</mi><mo>:</mo><msup><mi>Y</mi><mrow><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><mo stretchy="false">[</mo><msubsup><mi>y</mi><mn>1</mn><mrow><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow></msubsup><mo separator="true">,</mo><msubsup><mi>y</mi><mn>2</mn><mrow><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow></msubsup><mo separator="true">,</mo><mo>…</mo><msubsup><mi>y</mi><mi>n</mi><mrow><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow></msubsup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">sentence feature: X^{(M)} = [x_1^{(M)},x_2^{(M)},…x_m^{(M)}] ,image feature: Y^{(N)} = [y_1^{(N)},y_2^{(N)},…y_n^{(N)}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.311108em;vertical-align:-0.26630799999999993em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.5834080000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11659199999999997em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.311108em;vertical-align:-0.26630799999999993em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.5834080000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11659199999999997em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> 已经互相包含了对方模态的信息。</p><h4 id="vqa-head"><a class="markdownIt-Anchor" href="#vqa-head"></a> VQA head</h4><p>从一个大型的答案词汇表中预测最match的答案，即多分类问题。文章对X和Y分别使用注意力减少模型：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi><mo>=</mo><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>M</mi><mi>L</mi><mi>P</mi><mo stretchy="false">(</mo><msup><mi>X</mi><mrow><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext> </mtext><mi>β</mi><mo>=</mo><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>M</mi><mi>L</mi><mi>P</mi><mo stretchy="false">(</mo><msup><mi>Y</mi><mi>N</mi></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mover accent="true"><mi>x</mi><mo>~</mo></mover><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msub><mi>α</mi><mi>i</mi></msub><msubsup><mi>x</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo></mrow></msubsup><mo separator="true">,</mo><mtext>  </mtext><mover accent="true"><mi>y</mi><mo>~</mo></mover><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>β</mi><mi>i</mi></msub><msubsup><mi>y</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow></msubsup><mspace linebreak="newline"></mspace><mi>M</mi><mi>L</mi><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>F</mi><msub><mi>C</mi><mn>1</mn></msub><mo>∘</mo><mi>R</mi><mi>e</mi><mi>L</mi><mi>U</mi><mo>∘</mo><mi>F</mi><msub><mi>C</mi><mi>d</mi></msub><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">\alpha = softmax(MLP(X^{(M)})), \ \beta =softmax(MLP(Y^{N})) \\\tilde x=\sum_{i=1}^{m}\alpha_ix_i^{(M)},\ \ \tilde y=\sum_{i=1}^{n}\beta_iy_i^{(N)} \\MLP(X)=FC_1 \circ ReLU \circ FC_{d}(X)\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.188em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6678599999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">x</span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">~</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">~</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span><span class="mspace newline"></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi><mo separator="true">,</mo><mi>β</mi></mrow><annotation encoding="application/x-tex">\alpha, \beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span> 分别是m维和n维的向量，是可学习的attention weights，在得到reduced feature <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>x</mi><mo>~</mo></mover><mo separator="true">,</mo><mover accent="true"><mi>y</mi><mo>~</mo></mover></mrow><annotation encoding="application/x-tex">\tilde x,\tilde y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8622999999999998em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">x</span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">~</span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">~</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span> 之后对其进行LN：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi><mo>=</mo><mi>L</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mi>N</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">(</mo><msubsup><mi>W</mi><mi>x</mi><mi>T</mi></msubsup><mover accent="true"><mi>x</mi><mo>~</mo></mover><mo>+</mo><msubsup><mi>W</mi><mi>y</mi><mi>T</mi></msubsup><mover accent="true"><mi>y</mi><mo>~</mo></mover><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><msub><mi>W</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>W</mi><mi>y</mi></msub><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>d</mi><mo>×</mo><msub><mi>d</mi><mi>z</mi></msub></mrow></msup></mrow><annotation encoding="application/x-tex">z = LayerNorm(W_x^T\tilde x+W_y^T\tilde y) \\where W_x,W_y \in \mathbb{R}^{d \times d_z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">x</span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">~</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.274439em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-2.4530000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">~</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.899108em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.899108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>得到的向量z接着被投影为k维的向量p，最后对其做k分类 loss，k为所用答案表的答案数量。若数据集对每个问题提供多个答案，则视为多标签分类使用binary cross-entropy loss，若数据集中一个问题对应一个答案，则视为单标签分类使用softmax cross-entropy loss。</p><h4 id="itm-head"><a class="markdownIt-Anchor" href="#itm-head"></a> ITM head</h4><p>目标是得到image-text对的分数match score，由于输出与VQA有相似性，所以会使用VQA head中的一部分模型。使用之前VQA head上得到的向量z，对其计算得到一个分数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>∈</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">s \in (0,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>=</mo><mi>σ</mi><mo stretchy="false">(</mo><msubsup><mi>W</mi><mi>z</mi><mi>T</mi></msubsup><mi>z</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext> </mtext><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mtext> </mtext><msub><mi>W</mi><mi>z</mi></msub><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><msub><mi>d</mi><mi>z</mi></msub></msup></mrow><annotation encoding="application/x-tex">s=\sigma(W_z^Tz),\ where\ W_z \in \mathbb{R}^{d_z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.899108em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.899108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>假设输入一个配对的image-text对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi mathvariant="script">I</mi><mo separator="true">,</mo><mi mathvariant="script">T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\mathcal I,\mathcal T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathcal" style="margin-right:0.25417em;">T</span><span class="mclose">)</span></span></span></span> ，使用BCE loss with hard negatives mining作为loss函数：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="script">L</mi><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mi>c</mi><mi>h</mi></mrow></msub><mo>=</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">(</mo><mi mathvariant="script">I</mi><mo separator="true">,</mo><mi mathvariant="script">T</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>s</mi><mo stretchy="false">(</mo><mi mathvariant="script">I</mi><mo separator="true">,</mo><msup><mi mathvariant="script">T</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">(</mo><mi mathvariant="script">I</mi><mo separator="true">,</mo><mi mathvariant="script">T</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>s</mi><mo stretchy="false">(</mo><msup><mi mathvariant="script">I</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><mi mathvariant="script">T</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mtext> </mtext><msup><mi mathvariant="script">I</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><msup><mi mathvariant="script">T</mi><mo mathvariant="normal">′</mo></msup><mi mathvariant="normal">是</mi><mi mathvariant="normal">从</mi><mi mathvariant="normal">训</mi><mi mathvariant="normal">练</mi><mi mathvariant="normal">集</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">每</mi><mi mathvariant="normal">个</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>n</mi><mi>g</mi><mtext> </mtext><mi>e</mi><mi>p</mi><mi>o</mi><mi>c</mi><mi>h</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">挖</mi><mi mathvariant="normal">掘</mi><mi mathvariant="normal">到</mi><mi mathvariant="normal">的</mi><mi>h</mi><mi>a</mi><mi>r</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mi>e</mi><mi>g</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi mathvariant="normal">样</mi><mi mathvariant="normal">本</mi></mrow><annotation encoding="application/x-tex">\mathcal L_{match} =log(s(\mathcal I,\mathcal T))+log(1-s(\mathcal I,\mathcal T&#x27;))+log(s(\mathcal I,\mathcal T))+log(1-s(\mathcal I&#x27;,\mathcal T))\\where\  \mathcal I&#x27;,\mathcal T&#x27;是从训练集的每个training\ epoch中挖掘到的hard\ negative样本</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathcal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathcal" style="margin-right:0.25417em;">T</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.25417em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathcal" style="margin-right:0.25417em;">T</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathcal" style="margin-right:0.25417em;">T</span><span class="mclose">)</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.996332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord"><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.25417em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">从</span><span class="mord cjk_fallback">训</span><span class="mord cjk_fallback">练</span><span class="mord cjk_fallback">集</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">每</span><span class="mord cjk_fallback">个</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace"> </span><span class="mord mathdefault">e</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault">c</span><span class="mord mathdefault">h</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">挖</span><span class="mord cjk_fallback">掘</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">h</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord cjk_fallback">样</span><span class="mord cjk_fallback">本</span></span></span></span></span></p><h4 id="vg-head"><a class="markdownIt-Anchor" href="#vg-head"></a> VG head</h4><p>为query的一张图中的每一个对象预测一个排名分数和一个精修的bounding box。首先依据VQA head中做法得到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>x</mi><mo>~</mo></mover></mrow><annotation encoding="application/x-tex">\tilde x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6678599999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">x</span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">~</span></span></span></span></span></span></span></span></span>，之后与image feature集成：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Z</mi><mo>=</mo><mi>L</mi><mi>a</mi><mi>y</mi><mi>e</mi><mi>r</mi><mi>N</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">(</mo><msubsup><mi>W</mi><mi>x</mi><mi>T</mi></msubsup><mover accent="true"><mi>x</mi><mo>~</mo></mover><mo>+</mo><msubsup><mi>W</mi><mi>y</mi><mi>T</mi></msubsup><msup><mi>Y</mi><mrow><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mtext> </mtext><mi>Z</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>n</mi><mo>×</mo><msub><mi>d</mi><mi>z</mi></msub></mrow></msup><mi mathvariant="normal">为</mi><mi>n</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">对</mi><mi mathvariant="normal">象</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">融</mi><mi mathvariant="normal">合</mi><mi>f</mi><mi>e</mi><mi>a</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>e</mi><mi mathvariant="normal">。</mi></mrow><annotation encoding="application/x-tex">Z=LayerNorm(W_x^T\tilde x+W_y^TY^{(N)}) \\where\ Z \in \mathbb{R}^{n\times d_z}为n个对象的融合feature。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">x</span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">~</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.321108em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.891331em;"><span style="top:-2.4530000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.093548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.899108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">为</span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">象</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">融</span><span class="mord cjk_fallback">合</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord cjk_fallback">。</span></span></span></span></span></p><p>之后每个对象的feature <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi><mo>∈</mo><mi>Z</mi></mrow><annotation encoding="application/x-tex">z\in Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span></span></span></span> 被线性投影为一个排名分数 s 和一个4维bounding box 偏移量b（每个对象本来就有一个box，根据偏移量对其精修）。最终这个多任务loss如下，由排名loss和回归loss组成：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">L</mi><mo>=</mo><msub><mi mathvariant="script">L</mi><mrow><mi>r</mi><mi>a</mi><mi>n</mi><mi>k</mi></mrow></msub><mo>+</mo><mi>λ</mi><msub><mi mathvariant="script">L</mi><mrow><mi>r</mi><mi>e</mi><mi>g</mi></mrow></msub><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mtext> </mtext><mi>λ</mi><mtext> </mtext><mi mathvariant="normal">是</mi><mi mathvariant="normal">平</mi><mi mathvariant="normal">衡</mi><mi mathvariant="normal">两</mi><mi mathvariant="normal">个</mi><mi>l</mi><mi>o</mi><mi>s</mi><mi>s</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">超</mi><mi mathvariant="normal">参</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">。</mi></mrow><annotation encoding="application/x-tex">\mathcal L=\mathcal L_{rank}+\lambda \mathcal L_{reg}\ ,\ where\ \lambda\ 是平衡两个loss 的超参数。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathcal">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathcal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">λ</span><span class="mord"><span class="mord mathcal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mspace"> </span><span class="mord mathdefault">λ</span><span class="mspace"> </span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">平</span><span class="mord cjk_fallback">衡</span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">个</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">超</span><span class="mord cjk_fallback">参</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">。</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="script">L</mi><mrow><mi>r</mi><mi>a</mi><mi>n</mi><mi>k</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\mathcal L_{rank}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathcal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是n个预测分数s和n个真实分数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>S</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">S^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span> 之间的KL散度，真实分数是对象与真实box之间的IOU分数。真实分数和预测分数都用到了softmax作为分数分布。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="script">L</mi><mrow><mi>r</mi><mi>e</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\mathcal L_{reg}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathcal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 是对象的IOU分数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>S</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">S^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span> 大于一个阈值的真实偏移 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>b</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">b^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span> 和预测的偏移量b之间的smoothed L1 距离</p><h2 id="搜索算法"><a class="markdownIt-Anchor" href="#搜索算法"></a> 搜索算法</h2><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110281132189.png" alt="" /></p><p>介绍了一种高效的一次性搜索算法，该算法在一个超参数化的超网中搜索最优结构，并进行权重共享。</p><p>超网络 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">N</mi><mo stretchy="false">(</mo><mi mathvariant="script">A</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>W</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal N(\mathcal A(\theta),W)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.14736em;">N</span><span class="mopen">(</span><span class="mord mathcal">A</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mclose">)</span></span></span></span> ，编码了整个search space <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">A</mi></mrow><annotation encoding="application/x-tex">\mathcal A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathcal">A</span></span></span></span> ，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi><mo separator="true">,</mo><mi>θ</mi></mrow><annotation encoding="application/x-tex">W,\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span>代表了模型的权重以及超网络中所有可能的操作结构的参数，算法的目标是最小化下式：<img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110281144762.png" alt="" /></p><p>对以上三个任务， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">L</mi><mo stretchy="false">(</mo><mi mathvariant="script">N</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>W</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal L(\mathcal N(a,W))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal">L</span><span class="mopen">(</span><span class="mord mathcal" style="margin-right:0.14736em;">N</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span> 表示使用任务特定的loss来优化网络的权重 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">N</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>W</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal N(a,W)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.14736em;">N</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mclose">)</span></span></span></span>，其中a是根据 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span> 从超网络中采样到的有效的架构。根据得到的优化后的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>θ</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">\theta^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span> ，得到的优化架构 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">a^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>  是通过选择在backbone中每个block中最大权重的架构获得的。</p><p>文中提出一个迭代算法来获得优化所需的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi><mo separator="true">,</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">\theta ,W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span></span> 。首先把训练集分割成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="script">D</mi><mi>m</mi></msub><mo separator="true">,</mo><msub><mi mathvariant="script">D</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">\mathcal D_m,\mathcal D_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，当训练模型参数W时，首先冻结架构参数$\theta $，并在softmax激活之后根据 $\theta $为每一个block随机采样一个操作，得到一个有效架构a。之后根据架构a更新模型参数W，在训练集 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="script">D</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">\mathcal D_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>上使用sgd训练。当训练架构参数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span>时，冻结模型参数W，采样一个有效结构a，之后在训练集 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="script">D</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">\mathcal D_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 上使用梯度下降更新参数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span>。</p><p>𝑊和θ的迭代优化不可避免地会向某些架构引入偏差，并使其余部分优化效果较差。为了缓解问题，我们在迭代优化之前引入了额外的预热阶段。在预热阶段，我们不会训练架构权重θ并均匀地进行样本操作以训练模型权重𝑊。这确保了模型权重𝑊良好地初始化，从而导致更公平和强大的架构搜索。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-ViLT</title>
    <link href="/2021/10/18/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-ViLT/"/>
    <url>/2021/10/18/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-ViLT/</url>
    
    <content type="html"><![CDATA[<h2 id="论文要点"><a class="markdownIt-Anchor" href="#论文要点"></a> 论文要点</h2><ul><li>基于patch projection的多模态方法，大大提升了速度，但是整体上性能还是略低于region feature的方法</li></ul><h2 id="引入"><a class="markdownIt-Anchor" href="#引入"></a> 引入</h2><p>如今大多数的多模态模型使用预训练-微调范式，同时需要CNN和Faster RCNN来提取特征或对象框，近期的Pixel-BERT是个例外，但也需要CNN作为Backbone，这些导致这些模型在现实上运行是很缓慢的。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110181945483.png" style="zoom:67%;" /><p>ViLT是迄今为止V&amp;L模型最简单的体系结构，因为它委托transformer模块提取和处理视觉特征，而不是单独的深层视觉嵌入程序。这种设计固有地带来了显著的运行时和参数效率。</p><h3 id="vl-模型的范式"><a class="markdownIt-Anchor" href="#vl-模型的范式"></a> V&amp;L 模型的范式</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110181952285.png" alt="" /></p><p>我们基于两点提出了视觉和语言模型的分类法：（1）这两种模式在专用参数和/或计算方面是否具有均匀的表达水平； (2) 两种模态是否在深度网络中相互作用。 这些点的组合导致了图 2 中的四个原型。</p><p>VSE++ (Faghri et al., 2017) 和 SCAN (Lee et al., 2018) 等视觉语义嵌入 (VSE) 模型属于图 2a。 他们对图像和文本使用单独的嵌入器，前者更重。 然后，它们用简单的点积或浅注意力层来表示来自两种模态的嵌入特征的相似性。</p><p>CLIP (Radford et al., 2021) 属于图 2b，因为它为每种模态使用单独但同样昂贵的Transformer embedders。 池化图像向量和文本向量之间的交互仍然很浅（点积）。 尽管 CLIP 在图像到文本检索方面具有非凡的zero-shot性能，但我们无法在其他视觉和语言下游任务上观察到相同水平的性能。</p><p>这一结果支持了我们的推测，即即使来自高性能单峰嵌入器的输出的简单融合也可能不足以学习复杂的视觉和语言任务，从而支持了对更严格的跨模态交互方案的需求。</p><p>与具有浅层交互的模型不同，图 2c 中较新的 VLP 模型使用深度转换器来模拟图像和文本特征的交互。 然而，除了交互模块之外，卷积网络仍然参与提取和嵌入图像特征，这占了大部分计算，如图 1 所示。基于调制的视觉和语言模型（Perez 等人，2018 年； Nguyen 等人，2020）也属于图 2c，其视觉 CNN 词干对应于视觉嵌入器，RNN 为文本嵌入器生成调制参数，并将 CNN 调制为模态交互。</p><p>我们提出的 ViLT 是图 2d 类型的第一个模型，其中原始像素的嵌入层与文本标记一样浅且计算量轻。 因此，该架构将大部分计算集中在模态交互建模上。</p><h4 id="modality-interaction-schema-模态交互范式"><a class="markdownIt-Anchor" href="#modality-interaction-schema-模态交互范式"></a> Modality Interaction Schema 模态交互范式</h4><p>交互模式分为两类：</p><p>（1）单流方法（例如VisualBERT（Li等人，2019年）、UNITER（Chen等人，2019年）），其中各层共同操作图像和文本输入的串联；</p><p>（2）双流方法（例如，ViLBERT（Lu等人，2019年）、LXMERT（Tan&amp;Bansal，2019年）），其中两种模式未在输入级串联。</p><p>我们的interaction transformer模块采用单流方法，因为双流方法引入了额外的参数。</p><h4 id="视觉嵌入模式"><a class="markdownIt-Anchor" href="#视觉嵌入模式"></a> 视觉嵌入模式</h4><p>网格功能。 除了检测器头之外，ResNets 等卷积神经网络的输出特征网格也可以用作视觉和语言预训练的视觉特征。 直接使用网格特征首先由 VQA 特定模型提出（Jiang 等人，2020 年；Nguyen 等人，2020 年），主要是为了避免使用严重缓慢的区域选择操作。后续PixelBERT等也有许多跟进工作，不过使用CNN仍然很耗费性能。</p><h4 id="patch-projection"><a class="markdownIt-Anchor" href="#patch-projection"></a> Patch Projection.</h4><p>为了最小化开销，我们采用了最简单的视觉嵌入方案：对图像块进行操作的线性投影。 补丁投影嵌入由 ViT（Dosovitskiy 等人，2020 年）引入，用于图像分类任务。 补丁投影将视觉嵌入步骤大大简化到文本嵌入的级别，该步骤还包括简单的投影（查找）操作。我们使用 32 × 32 补丁投影，它只需要 240 万个参数。 这与复杂的 ResNe(X)t 主干和检测组件形成鲜明对比。 它的运行时间也是可以忽略的，如图1所示。我们在4.6节进行了详细的运行时间分析。</p><h2 id="模型结构"><a class="markdownIt-Anchor" href="#模型结构"></a> 模型结构</h2><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110182038272.png" alt="" /></p><p>ViLT作为VLP模型具有简洁的体系结构，具有最小的Visual Embedding，并遵循单流方法。</p><p>文章使用VIT的权重来初始化内部的interaction Transformer而不是BERT，</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110182111271.png" alt="" /></p><p>输入文本 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>L</mi><mo>×</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi></mrow></msup></mrow><annotation encoding="application/x-tex">t \in \mathbb{R}^{L \times |V|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65418em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mbin mtight">×</span><span class="mord mtight">∣</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span><span class="mord mtight">∣</span></span></span></span></span></span></span></span></span></span></span></span> 经由一个嵌入矩阵 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo>×</mo><mi>H</mi></mrow></msup></mrow><annotation encoding="application/x-tex">T \in \mathbb{R}^{|V| \times H}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span><span class="mord mtight">∣</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span></span></span></span></span> embedding到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>t</mi><mo>ˉ</mo></mover><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>L</mi><mo>×</mo><mi>H</mi></mrow></msup></mrow><annotation encoding="application/x-tex">\bar t \in \mathbb{R}^{L \times H}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79096em;vertical-align:-0.0391em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.75186em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">t</span></span><span style="top:-3.18408em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span></span></span></span></span> ，同时添加一个position embedding矩阵 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>T</mi><mrow><mi>p</mi><mi>o</mi><mi>s</mi></mrow></msup><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mo stretchy="false">(</mo><mi>L</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mi>H</mi></mrow></msup></mrow><annotation encoding="application/x-tex">T^{pos} \in \mathbb{R}^{(L+1) \times H}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">s</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">L</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span></span></span></span></span>。</p><p>输入图像 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>C</mi><mo>×</mo><mi>H</mi><mo>×</mo><mi>W</mi></mrow></msup></mrow><annotation encoding="application/x-tex">I \in \mathbb{R}^{C\times H \times W}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span></span></span></span></span></span></span></span></span></span></span></span> 被切分为patches并flatten到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>N</mi><mo>×</mo><mo stretchy="false">(</mo><msup><mi>P</mi><mn>2</mn></msup><mo>⋅</mo><mi>C</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">v \in \mathbb{R}^{N\times (P^2\cdot C)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9869199999999998em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869199999999998em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">×</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span> ，其中（P,P）是切片的分辨率，且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>=</mo><mi>H</mi><mi>W</mi><mi mathvariant="normal">/</mi><msup><mi>P</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N=HW/P^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 。v经由一个线性投影 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mo stretchy="false">(</mo><msup><mi>P</mi><mn>2</mn></msup><mo>⋅</mo><mi>C</mi><mo stretchy="false">)</mo><mo>×</mo><mi>H</mi></mrow></msup></mrow><annotation encoding="application/x-tex">V\in \mathbb{R}^{(P^2\cdot C)\times H}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9869199999999998em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869199999999998em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">⋅</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mclose mtight">)</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span></span></span></span></span>，position embedding <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>V</mi><mrow><mi>p</mi><mi>o</mi><mi>s</mi></mrow></msup><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mo stretchy="false">(</mo><mi>N</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mi>H</mi></mrow></msup></mrow><annotation encoding="application/x-tex">V^{pos} \in \mathbb{R}^{(N+1)\times H}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">s</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span></span></span></span></span>后被embedding为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>N</mi><mo>×</mo><mi>H</mi></mrow></msup></mrow><annotation encoding="application/x-tex">\bar v \in \mathbb{R}^{N \times H}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.60688em;vertical-align:-0.0391em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span></span></span></span></span> 。</p><p>之后text and image embeddings分别加上其对应的模态embedding向量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>t</mi><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow></msup><mo separator="true">,</mo><msup><mi>v</mi><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow></msup><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mi>H</mi></msup></mrow><annotation encoding="application/x-tex">t^{type},v^{type} \in \mathbb{R}^H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9879959999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span></span></span></span>，并被concat为一个联合向量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>z</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">z^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span>。之后经由一个D层的transformer不断计算为最终的语境化序列 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>z</mi><mi>D</mi></msup></mrow><annotation encoding="application/x-tex">z^D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span></span></span></span></span></span></span></span>。</p><p>p是整个多模态输入的池化表示，式中的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>p</mi><mi>o</mi><mi>o</mi><mi>l</mi></mrow></msub><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>H</mi><mo>×</mo><mi>H</mi></mrow></msup></mrow><annotation encoding="application/x-tex">W_{pool} \in \mathbb{R}^{H\times H}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span></span></span></span></span></span></span></span></span> 。</p><p>对于所有的实验，我们都使用在ImageNet上预训练的ViT-B/32的权重，因此ViLT-B/32.5隐藏大小H为768，层深度D为12，面片大小P为32，MLP大小为3072，注意头数为12。</p><h3 id="预训练措施"><a class="markdownIt-Anchor" href="#预训练措施"></a> 预训练措施</h3><p><strong>Image Text Matching ITM.</strong></p><p>我们以 0.5 的概率用不同的图像随机替换对齐的图像。 单个线性层 ITM head 将汇集的输出特征 p 投影到一个二进制类，我们计算负对数似然损失作为我们的 ITM 损失。</p><p>另外，受到 Chen 等人的词区域对齐目标的启发(2019)，我们设计了词块对齐 (WPA)，它计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>z</mi><mi>D</mi></msup></mrow><annotation encoding="application/x-tex">z^D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span></span></span></span></span></span></span></span> 的两个子集之间的对齐分数：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>z</mi><mi>D</mi></msup><msub><mi mathvariant="normal">∣</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">z^D|_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span></span></span></span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（文本子集）和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>z</mi><mi>D</mi></msup><msub><mi mathvariant="normal">∣</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">z^D|_v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span></span></span></span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（视觉子集），使用不精确的近端点方法获得最佳 运输 (IPOT) (Xie et al., 2020)。 我们按照 Chen 等人的方法设置 IPOT 的超参数。 (2019) (β = 0.5, N = 50)，并将近似 wasserstein 距离乘以 0.1 添加到 ITM 损失。</p><p><strong>Masked Language ModelingMLM.</strong></p><p>根据上下文向量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>z</mi><mrow><mi>m</mi><mi>a</mi><mi>s</mi><mi>k</mi><mi>e</mi><mi>d</mi></mrow><mi>D</mi></msubsup><msub><mi mathvariant="normal">∣</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">z^D_{masked}|_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1244389999999997em;vertical-align:-0.2831079999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">d</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 预测被遮蔽的text token <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mrow><mi>m</mi><mi>a</mi><mi>s</mi><mi>k</mi><mi>e</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{masked}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的真实标签。遵循 Devlin 等人的启发式方法。 (2019)，我们以 0.15 的概率随机屏蔽 t。</p><p>使用两层MLP作为MLM head来接收输入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>z</mi><mrow><mi>m</mi><mi>a</mi><mi>s</mi><mi>k</mi><mi>e</mi><mi>d</mi></mrow><mi>D</mi></msubsup><msub><mi mathvariant="normal">∣</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">z^D_{masked}|_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1244389999999997em;vertical-align:-0.2831079999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4168920000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">d</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 并输出其vocabulary，与BERT类似。然后将 MLM 损失计算为屏蔽标记的负对数似然损失。</p><h3 id="wholeword-masking全词屏蔽"><a class="markdownIt-Anchor" href="#wholeword-masking全词屏蔽"></a> WholeWord Masking全词屏蔽</h3><p>全词屏蔽是一种屏蔽技术，它屏蔽构成整个词的所有连续子词标记。 当应用于原始和中文 BERT 时，它被证明对下游任务有效（Cui 等，2019）。</p><p>我们假设，为了充分利用来自其他模态的信息，整词掩蔽对VLP尤其重要。例如，单词“giraffe”通过预先训练的bert base uncased标记器标记为三个单词标记[“gi”、“##raf”、“##fe”]。如果不是所有的标记都被屏蔽，比如说，[“gi”、“[MASK]、“##fe”]，那么模型可能仅仅依赖附近的两个语言标记[“gi”、“##fe”]来预测被屏蔽的“#raf”，而不是使用来自图像的信息。</p><p>在预训练期间，我们以0.15的掩蔽概率掩蔽整个单词。</p><h3 id="image-augmentation"><a class="markdownIt-Anchor" href="#image-augmentation"></a> Image Augmentation</h3><p>据报道，图像增强提高了视觉模型的泛化能力（Shorten &amp; Khoshgoftaar，2019）。 DeiT (Touvron et al., 2020) 建立在 ViT 的基础上，试验了各种增强技术（Zhang et al., 2017; Yun et al., 2019; Berman et al., 2019; Hoffer et al., 2020; Cubuk et al. ., 2020)，并发现它们对 ViT 培训有益。 然而，在 VLP 模型中尚未探索图像增强的效果。 缓存视觉特征限制了基于区域特征的 VLP 模型使用图像增强。 尽管它具有适用性，但 Pixel-BERT 也没有研究其影响。</p><p>为此，我们在微调期间应用 RandAugment（Cubuk 等人，2020 年）。 我们使用所有原始策略，除了两个：颜色反转，因为文本通常也包含颜色信息，以及剪切，因为它可以清除散布在整个图像中的小而重要的对象。 我们使用 N = 2, M = 9 作为超参数。</p><h2 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h2><p>预训练使用的数据集：</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110182147370.png" style="zoom:67%;" /><p>模型性能：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110182150184.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110191041553.png" alt="" /></p><p>训练方法：</p><p>我们将输入图像的较短边缘调整为 384，并将较长边缘限制在 640 以下，同时保持纵横比。 这种大小调整方案也用于其他 VLP 模型中的对象检测，但较短边缘 (800) 的尺寸较大。 对于分辨率为 384 × 640 的图像，ViLT-B/32 的补丁投影产生 12 × 20 = 240 个补丁。由于这是一个很少达到的上限，我们在预训练期间最多采样 200 个补丁。 我们插入 ViT-B/32 的 V_pos 以适应每个图像的大小并填充补丁以进行批量训练。 请注意，生成的图像分辨率比 800 × 1,333 小四倍，这是所有其他 VLP 模型用于其视觉嵌入器输入的大小.</p><p>我们使用 bert-base-uncased 标记器来标记文本输入。 我们不是从预训练的 BERT 进行微调，而是从头开始学习与文本嵌入相关的参数 tclass、T 和 T pos。 尽管从表面上看是有益的，但采用预训练的纯文本 BERT 并不能保证视觉和语言下游任务的性能提升。 Tan &amp; Bansal (2019) 已经报道了反证，其中使用预训练的 BERT 参数进行初始化导致性能比从头开始预训练更弱。</p><p>我们在 64 个 NVIDIA V100 GPU 上对 ViLT-B/32 进行了 100K 或 200K 步的预训练，批量大小为 4,096。 对于所有下游任务，我们训练 10 个 epoch，VQAv2/检索任务的批次大小为 256，NLVR2 的批次大小为 128。</p><p>我们使用隐藏大小为 1,536 的两层 MLP 作为微调的下游头部。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110191043309.png" alt="" /></p><p>额外的掩蔽区域建模 (MRM) 目标一直是提高 VLP 模型（如 Chen 等人）性能的关键。 (2019)。 我们试验了掩蔽补丁预测 (MPP)（Dosovitskiy 等人，2020 年），它以与patch投影兼容的形式模拟了 MRM 的效果。 patch v 以 0.15 的概率被屏蔽，模型根据其上下文向量 z D masked|v 预测被屏蔽补丁的平均 RGB 值。 然而，结果证明 MPP 对下游性能没有贡献（第 4~5 行）。 该结果与来自对象检测的监督信号的 MRM 目标形成鲜明对比。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110191043429.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110191044522.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110191045036.png" alt="" /></p><h2 id="未来改进方向"><a class="markdownIt-Anchor" href="#未来改进方向"></a> 未来改进方向</h2><p><strong>Scalability.可扩展性</strong></p><p>正如有关大型Transformer的论文（Devlin 等人，2019 年；Dosovitskiy 等人，2020 年）所示，在给定适当数量的数据的情况下，预训练变压器的性能可以很好地扩展。 这一观察结果为性能更好的 ViLT 变体（例如 ViLT-L（大型）和 ViLT-H（巨大））铺平了道路。 我们将训练更大的模型留给未来的工作，因为对齐的视觉和语言数据集还很稀缺。</p><p><strong>Masked Modeling for Visual Inputs. 视觉输入的屏蔽建模</strong></p><p>考虑到MRM的成功，我们推测视觉模态的蒙面建模目标有助于将信息保存到变压器的最后一层。然而，如表5所示，图像修补程序（MPP）上MRM的一个简单变体失败了。</p><p>Cho等人（2020年）提议对其网格ROI进行蒙面对象分类（MOC）任务培训。然而，本研究中的视觉词汇群在视觉和语言预训练期间与视觉主干一起固定。对于可培训的可视化嵌入程序，一次性集群不是一个可行的选择。我们相信在视觉无监督学习研究中研究的交替聚类（Caron等人，2018；2019）或同时聚类（Asano等人，2019；Caron等人，2020）方法可以应用。</p><p>我们鼓励今后不使用区域监督的工作为视觉形态设计更复杂的掩蔽目标。</p><p><strong>Augmentation Strategies 扩充策略</strong></p><p>先前关于对比视觉表示学习的工作（Chen 等人，2020a；b）表明，与更简单的增强策略（He 等人，2020 年）相比，RandAugment 未采用的高斯模糊为下游性能带来了显着的收益。 探索文本和视觉输入的适当增强策略将是一个有价值的补充。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-VILLA</title>
    <link href="/2021/10/16/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-VILLA/"/>
    <url>/2021/10/16/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-VILLA/</url>
    
    <content type="html"><![CDATA[<h2 id="论文要点"><a class="markdownIt-Anchor" href="#论文要点"></a> 论文要点</h2><ul><li>提出VILLA（视觉和语言大规模对抗性训练），是第一个针对V+L的大规模对抗训练。</li><li>VILLA 在改进预训练 V+L 模型的性能和泛化方面的独特优势体现在三个关键设计上：(i) 对抗性预训练和微调； (ii) 在嵌入空间中添加扰动； (iii) 增强的对抗训练算法。</li></ul><h2 id="具体方法"><a class="markdownIt-Anchor" href="#具体方法"></a> 具体方法</h2><p>VILLA 在改进预训练 V+L 模型的性能和泛化方面的独特优势体现在三个关键设计上：</p><p>(i) 对抗性预训练和微调 Adversarial pre-training and fine-tuning；</p><p>(ii) 在嵌入空间中添加扰动Adding perturbations in the embedding space；</p><p>(iii) 增强的对抗训练算法Enhanced adversarial training algorithm。</p><h3 id="对抗性预训练和微调-adversarial-pre-training-and-finetuning"><a class="markdownIt-Anchor" href="#对抗性预训练和微调-adversarial-pre-training-and-finetuning"></a> 对抗性预训练和微调 Adversarial Pre-training and Finetuning</h3><p>**Two-stage Adversarial Training ** 在传统的预训练微调范式中，其实预训练的任务和下游的具体任务并不相通，我们可以认为是预训练的任务（MLM,MRM,ITM）让模型学习到了一定的通用多模态融合推理的能力（例如能够将文本dog和图片中的狗相联系），这些能力提高了微调后下游任务的性能。</p><p>所以，文章作出如下假设：</p><ol><li>可以在预训练阶段添加对抗训练，提高模型的泛化能力（相当于增强对通用多模态融合推理能力的学习）。</li><li>在微调阶段，也可以添加对抗性微调，可以与上一步采用相同的AT算法。</li></ol><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110181603196.png" style="zoom:67%;" /><h3 id="嵌入空间的扰动perturbations-in-the-embedding-space"><a class="markdownIt-Anchor" href="#嵌入空间的扰动perturbations-in-the-embedding-space"></a> 嵌入空间的扰动Perturbations in the Embedding Space</h3><p><strong>Image Embedding</strong> 对于图像模态，由于最先进的V+L模型通常使用来自预训练对象检测器的图像特征作为输入，因此我们<strong>直接在特征空间中添加对抗性扰动</strong>。请注意，尽管主要的区别只是噪声注入空间，但我们的方法不同于大多数以前的工作，在这些工作中，扰动应用于像素空间，像素空间比细粒度嵌入扰动更为严格。</p><p><strong>Text embedding</strong> 另一方面，与连续值的图像像素不同，文本模式中的离散标记更难操作。目前尚不清楚如何在不改变句子原始语义的情况下制作保留标签的对抗性示例。但由于我们只关心对抗性训练对下游任务的最终影响，而不关心对抗性示例的可解释性，因此我们选择使用<a href="https://arxiv.org/abs/1909.11764">Freelb: Enhanced<br />adversarial training for language understanding</a>中的方法对单词嵌入中添加干扰。</p><p>在预训练的V+L模型中，位置嵌入用于编码图像区域和子单词标记的位置。<strong>文章中的对抗性方法只修改图像和文字嵌入</strong>，而多模态特征的其他组成部分保持不变。此外，由于图像和文本模式的不同特征，文章建议一次向一个模态添加扰动。</p><p>我们的扰动添加为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>δ</mi><mrow><mi>i</mi><mi>m</mi><mi>g</mi></mrow></msub><mi mathvariant="normal">和</mi><msub><mi>δ</mi><mrow><mi>t</mi><mi>x</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\delta_{img} 和\delta_{txt}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">和</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 所以预测方程变为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>y</mi><mo>^</mo></mover><mo>=</mo><msub><mi>f</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>i</mi><mi>m</mi><mi>g</mi></mrow></msub><mo>+</mo><msub><mi>δ</mi><mrow><mi>i</mi><mi>m</mi><mi>g</mi></mrow></msub><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>t</mi><mi>x</mi><mi>t</mi></mrow></msub><mo stretchy="false">)</mo><mtext>       </mtext><mover accent="true"><mi>y</mi><mo>~</mo></mover><mo>=</mo><msub><mi>f</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>i</mi><mi>m</mi><mi>g</mi></mrow></msub><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>t</mi><mi>x</mi><mi>t</mi></mrow></msub><mo>+</mo><msub><mi>δ</mi><mrow><mi>t</mi><mi>x</mi><mi>t</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\hat y = f_θ(x_{img} + δ_{img}, x_{txt})  \ \ \ \ \ \ \ \tilde y = f_θ(x_{img}, x_{txt} + δ_{txt})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">~</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>为了保留原始语义，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>δ</mi><mi>i</mi></msub><mi>m</mi><mi>g</mi><mi mathvariant="normal">和</mi><msub><mi>δ</mi><mi>t</mi></msub><mi>x</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">δ_img和δ_txt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord cjk_fallback">和</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span></span> 的范数被控制为较小。还假设模型预测在扰动后不应改变。</p><h3 id="free-多模态对抗训练free-multimodal-adversarial-training"><a class="markdownIt-Anchor" href="#free-多模态对抗训练free-multimodal-adversarial-training"></a> “Free” 多模态对抗训练“Free” Multimodal Adversarial Training</h3><p>在VILLA中，我们使用对抗性训练作为有效的正则化，以提高模型泛化，即最小化以下目标：</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110181635496.png" style="zoom:67%;" /><p>其中 $ \mathcal{L}<em>{std}(\theta) = L(f</em>{\theta}(x_{img}, x_{txt}), y)$ 是clean data上的cross entropy。 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="script">R</mi><mrow><mi>a</mi><mi>t</mi></mrow></msub><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{R}_{at}(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathcal">R</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span> 是标签保留label-preserving的AT loss，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="script">R</mi><mrow><mi>k</mi><mi>l</mi></mrow></msub><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{R}_{kl}(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathcal">R</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span> 是更细粒度的对抗性正则化项。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110181640466.png" alt="" /></p><p>L是对抗嵌入上的cross-entropy loss。Frobenius范数用来约束两个对抗项。</p><p>对于优化，[42]证明了等式（2） 可通过SGD求解最小化，而等式（3）中的内部最大化可通过PGD（大规模约束优化的标准方法）可靠地求解。以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>δ</mi><mrow><mi>i</mi><mi>m</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\delta_{img}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 为例，PGD以如下方法一步步求解（步长为 $ \alpha$）：</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110181648865.png" style="zoom:67%;" /><p><img src="C:%5CUsers%5CWangTiao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211018170319830.png" alt="image-20211018170319830" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110181710099.png" alt="" /></p><p>与提倡保留标签的对抗性攻击的 Eqn3 相比，Eqn5 进一步主张预测的置信水平，其特征是单纯形 delta_n（n 是类别数）上的概率向量，也应该接近。</p><h2 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h2><p>文章在Visual Question Answering (VQA), Visual Commonsense Reasoning (VCR), Referring Expression (RE) Compression, Visual Entailment, Image-Text Retrieval,  NLVR2六个下游任务上进行了测试。同时，为了测试方法的可靠性，在sota-UNITER和LXMERT上进行了测试。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110181851537.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110181858485.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110181902474.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110181906423.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-12 in 1</title>
    <link href="/2021/10/16/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-in-1/"/>
    <url>/2021/10/16/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-12-in-1/</url>
    
    <content type="html"><![CDATA[<h2 id="论文要点"><a class="markdownIt-Anchor" href="#论文要点"></a> 论文要点</h2><p>Multi-Task Vision and Language Representation Learning</p><ul><li><p>基于ViLBERT开发了一个多任务模型——单个模型适用于四大类12个下游任务，包括视觉问答VQA、基于标题的图像检索caption-based image retrieval、接地引用表达式grounding referring expressions和多模态验证multi-modal verification.。 结果不仅表明单个模型可以执行所有这些任务，而且联合训练多个下游任务与相同体系结构的单任务训练相比可以提高性能。</p></li><li><p>大规模多任务学习具有挑战性，因为数据集的大小和难度可能不同。为了解决这些问题，文章引入了一个动态的stop-and-go训练调度器、任务相关的输入令牌task-dependent input tokens和简单的超参数启发法simple hyper-parameter heuristics。使用文章提出的方法，能够使用不同的数据集训练许多多任务模型——评估不同视觉和语言任务之间的关系，以及它们在一起训练时的表现。</p></li><li><p>系统地分析了不同视觉和语言数据集和任务之间的联合训练关系，并提出了 Clean V&amp;L 多任务设置，确保跨任务不会出现训练测试泄漏。</p></li></ul><h2 id="引入"><a class="markdownIt-Anchor" href="#引入"></a> 引入</h2><p>目前视觉基础语言理解的研究领域是许多专门任务的拼凑，如VQA或r caption generation字幕生成，每个任务都由少量数据集支持。因此，这一领域的进展通过独立改进为每个特定任务和数据集设计和训练的定制模型来衡量。</p><p>之前的模型预先训练自监督任务的通用架构，以学习通用视觉语言表示，然后对特定数据集进行微调；本文学习一个通用模型结构，适用所有任务而不是对单一任务再设计模型。</p><h2 id="多模态任务"><a class="markdownIt-Anchor" href="#多模态任务"></a> 多模态任务</h2><p>使用了12个流行的多模态数据集，可分为四类：</p><p>**Vocab-based VQA：**给定一个图像和一个自然语言问题，从固定词汇表中选择一个答案。 我们考虑了该组的三个流行数据集——VQAv2、 GQA 和 Visual Genome (VG) QA。</p><p>**Image Retrieval：**给定一个标题和一组图像，检索标题最能描述的目标图像。 我们考虑了这个任务组的 COCO和 Flickr30K字幕数据集。</p><p>**Referring Expressions：**给定自然语言表达式和图像，确定表达式所指的目标区域。 从简单的名词短语到多轮对话，表达式在数据集之间可能会有很大差异。 我们考虑 RefCOCO(+/g) 中的短语基础，Visual7W中的指向问题，以及 GuessWhat中的对话序列。 我们注意到这些语言输入在细节和结构方面差异很大。</p><p>**Multi-modal Verification：**给定一个或多个图像和一个自然语言语句，判断其正确性或预测它们的语义关系。 我们考虑 NLVR2和 SNLI-VE。 在 NLVR2 中，给出了两个图像，并且该陈述语句必须为真才能为真。 在 SNLI-VE 中，图像-语句对被分类为表示蕴涵、矛盾或中性。 即图像内容是否证实、反驳或不足以评论相应陈述的真实性。</p><h3 id="a-clean-vl-multi-task-setup"><a class="markdownIt-Anchor" href="#a-clean-vl-multi-task-setup"></a> A Clean V&amp;L Multi-Task Setup</h3><p>上述多模态任务是互相建立的，可能有重叠的图像，某一任务的测试图像或许已经在其他任务中出现了，如下表。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20211017112014.png" alt="" /></p><p>为了避免从其他任务的注释中泄露信息，我们为 V&amp;L 任务提出了一个干净的多任务拆分a cleaned multi-task split for V&amp;L tasks，其中将测试图像从所有任务的训练/验证集中删除。 我们强调测试集没有以任何方式修改，因此我们的结果与之前的工作相当。 清理导致跨数据集的训练数据平均减少约 11%。</p><h2 id="模型结构"><a class="markdownIt-Anchor" href="#模型结构"></a> 模型结构</h2><p>基本结构采用<a href="https://blog.pokestar.wang/2021/10/14/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-VILBERT/">VILBERT</a>，输入给定的一幅图像 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span> ，首先将其表示为一组图像区域特征 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>v</mi><mi>τ</mi></msub></mrow><annotation encoding="application/x-tex">v_0,…,v_{\tau}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.1132em;">τ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，一组文本输入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mn>0</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>w</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">w_0,…,w_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，模型最终将其分别转化为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mrow><mi>v</mi><mn>0</mn></mrow></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>h</mi><mrow><mi>v</mi><mi>τ</mi></mrow></msub><mi mathvariant="normal">和</mi><msub><mi>h</mi><mrow><mi>w</mi><mn>0</mn></mrow></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>h</mi><mrow><mi>w</mi><mi>T</mi></mrow></msub></mrow><annotation encoding="application/x-tex">h_{v0},…,h_{v\tau} 和 h_{w0},…,h_{wT}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.1132em;">τ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">和</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110141036515.png" alt="" /></p><p>VILBERT中有两个预训练任务，遮蔽多模态建模masked multi-modal modelling 和多模态对齐预测multi-modal alignment prediction.</p><p>文章对这个预训练过程进行了两个重要的修改。 首先，在屏蔽视觉区域时，我们还会屏蔽具有显着重叠（&gt; 0.4 IoU）的其他区域，以避免泄漏视觉信息。 这迫使模型更加依赖语言来预测图像内容。 其次，在对多模态对齐预测的负（不匹配）标题进行采样时，我们不会强制执行掩蔽多模态建模损失。 这将有效去除负样本引入的噪声。</p><h3 id="多任务学习"><a class="markdownIt-Anchor" href="#多任务学习"></a> 多任务学习</h3><p>我们考虑一个简单的多任务模型，其中每个任务都有一个特定于任务的“头部”网络，该网络从一个通用的、共享的“主干”ViLBERT 模型分支出来。学习一个共享的主干模型，其参数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">\theta_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，以及为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span></span></span></span> 个task学习特定的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span></span></span></span> 个层 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><msub><mi>θ</mi><mi>t</mi></msub><msubsup><mo stretchy="false">}</mo><mrow><mi>t</mi><mo>=</mo><mn>1</mn></mrow><mi>τ</mi></msubsup></mrow><annotation encoding="application/x-tex">\{\theta_t\}^{\tau}_{t=1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">}</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.1132em;">τ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>。模型需要学习到将所有任务的loss均降为最小的参数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span> 。</p><p>**Task Token:**不同的任务可能需要不同的处理后的输入token。 我们使用task token <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi>A</mi><mi>S</mi><msub><mi>K</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">TASK_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 来扩充查询query，新的输入格式为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><mi>I</mi><mi>M</mi><mi>G</mi><mi mathvariant="normal">，</mi><msub><mi>v</mi><mn>1</mn></msub><mi mathvariant="normal">，</mi><mo>…</mo><mi mathvariant="normal">，</mi><msub><mi>v</mi><mi>n</mi></msub><mi mathvariant="normal">，</mi><mi>C</mi><mi>L</mi><mi>S</mi><mi mathvariant="normal">，</mi><mi>T</mi><mi>A</mi><mi>S</mi><msub><mi>K</mi><mi>t</mi></msub><mi mathvariant="normal">，</mi><msub><mi>w</mi><mn>1</mn></msub><mi mathvariant="normal">，</mi><mo>…</mo><mi mathvariant="normal">，</mi><msub><mi>w</mi><mi>m</mi></msub><mi mathvariant="normal">，</mi><mi>S</mi><mi>E</mi><mi>P</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{IMG，v_1，…，v_n，CLS，TASK_t，w_1，…，w_m，SEP\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">G</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">}</span></span></span></span> 。然后，体系结构可以自下而上的方式利用此任务信息。在下文中，我们将按任务组描述特定任务的头部网络。</p><p>**Vocab-Based VQA Output:**将整体图像-问题表示作为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mrow><mi>I</mi><mi>M</mi><mi>G</mi></mrow></msub></mrow><annotation encoding="application/x-tex">h_{IMG}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mord mathdefault mtight">G</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mrow><mi>C</mi><mi>L</mi><mi>S</mi></mrow></msub></mrow><annotation encoding="application/x-tex">h_{CLS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight">L</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示之间的按元素乘积进行计算。将基于vocab的VQA视为一项多标签分类任务——根据每个答案与真实答案的相关性，为每个答案分配一个软目标分数。通过在整体表示上使用两层MLP计算一组预定义答案A的分数：</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20211017145521.png" style="zoom:67%;" /><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span></span> 是sigmoid函数。由于答案词汇的差异，VQA和VG QA共享MLP和答案词汇，而GQA学习一个单独的词汇。</p><p>**Image Retrieval Output:**图像与问题表示与之前相同，计算二者的匹配分数：<img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20211017145942.png" style="zoom:67%;" /></p><p>参数 W是d*1的矩阵，在COCO和Flickr30k图像检索任务中共享。与VILBERT一样，训练了一个 4-way multiple-choice against hard-negatives selected off-line 之后将其固定. 近期工作使用了 online hard-negative mining，但这计算量巨大</p><p>**Referring Expressions Output:**给定引用表达式Referring Expressions，对一组区域提议region proposal重新排序。 我们将每个图像区域 i 的最终表示 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><msub><mi>v</mi><mi>i</mi></msub></msub></mrow><annotation encoding="application/x-tex">h_{v_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9445399999999999em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span></span></span></span> 传递到可学习投影矩阵 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>r</mi></msub><mo>∈</mo><msup><mi>R</mi><mrow><mi>d</mi><mo>×</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">W_r ∈ R^{d\times 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mbin mtight">×</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 中以预测匹配分数。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20211017153114.png" style="zoom:67%;" /><p>请注意，Q 可以是基于不同任务（RefCOCO+/g、Visual7W、GuessWhat）的短语、问题或对话。 W_r 在所有Referring Expression任务之间共享。</p><p>**Multi-modal Verification Output:**以NLVR2为例，输入是两个图像（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">I_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">I_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）和一个语句Q的串联，模型必须根据给定图像判断的语句的有效性。 我们认为这是一个分类问题，给出了一个embadding，它编码了两个图像语句对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>I</mi><mn>0</mn></msub><mo separator="true">,</mo><mi>Q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(I_0, Q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">Q</span><span class="mclose">)</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>I</mi><mn>1</mn></msub><mo separator="true">,</mo><mi>Q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(I_1, Q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">Q</span><span class="mclose">)</span></span></span></span> 。 输出概率由带有 softmax 的 2 层 MLP 预测：</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20211017155509.png" style="zoom:67%;" /><p>对于SNLI-VE，输入是单个图像和语句。因此，我们学习同一形式的单独分类器，从输入中预测情绪（蕴涵、中立、矛盾）。</p><h3 id="大规模多任务学习"><a class="markdownIt-Anchor" href="#大规模多任务学习"></a> 大规模多任务学习</h3><p>拥有 6 个任务头、12 个数据集和超过 440 万个单独的训练实例导致训练我们的多任务 ViLBERT 模型是一项艰巨的任务。 而且不同的数据集数量级不同，训练难度也不同。当单独训练时，RefCOCOg 在 5K 次迭代中收敛，而 VQAv2 需要 84K 次迭代（超过 16 倍）。 下面，我们将详细介绍我们的多任务训练方法和技术来克服这些挑战。</p><p>**Pretraining.**所有模型都首先在Conceptual Caption 数据集上进行预训练。</p><p>**Round-Robin Batch-Level Sampling.**我们考虑了一种round-robin batch-level 的采样机制，它从多任务训练开始就循环执行每个任务。 因此，一个多任务迭代由每个任务按顺序forwarding一个batch更新参数组成。</p><p>**Dynamic Stop-and-Go.**如前所述，不同的任务具有不同的难度和数据集大小。因此，简单地在所有任务中循环可能会大大过度训练较小的任务，从而导致过度拟合。通常，在早期停止训练小任务可以解决这种现象；然而，在多任务训练中停止任务会带来灾难性遗忘问题，因为基础网络会因其他任务而随时间漂移。本文使用动态停止前进（DSG）来解决这个问题。</p><ol><li><p>监控每一个task的验证集的loss <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">s_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，在每一个epoch之后都重新计算它。</p></li><li><p>如果经过2个epoch之后，性能提升小于0.1%，那么就认为这个任务收敛了，将其设置为停止stop。</p></li><li><p>停止stop模式的task，只在每个iter-gap (∆) iterations更新。</p></li><li><p>如果验证集的loss下降幅度（相比最好时的性能）达到0.5%，将其设置为go模式继续训练。</p></li></ol><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20211017162738.png" alt="" /></p><p>**Curriculum Learning课程学习.**受先前多任务文献 [4] [31] 的启发，我们尝试了基于任务难度的课程和反课程策略。 具体来说，对于反课程，我们首先在最慢收敛的任务组 G1（基于词汇的 VQA）上进行训练，然后再开始完整的循环多任务训练。 与课程设置相反，我们首先在我们最快收敛的任务组 G3（参考表达式）上进行训练。 与之前的观察 [31, 33] 不同，我们发现，当与本节中提出的其他策略相结合时，不使用课程会带来卓越的表现。</p><p><strong>Setting Multi-Task Hyperparameters.</strong></p><p>根据为单任务训练中的每个任务调整的超参数来识别简单的启发式方法。</p><p>*batch批量大小：*对于多任务，我们会为每个任务的单任务训练调整批量大小。</p><p><em>Warm-up Duration预热持续时间:</em>  我们发现设置相对于最大数据集的warm-up duration 很重要。 具体来说，我们在 η ∗ N 次迭代中运行线性warm-up，其中N是在单个任务设置中训练任何数据集所需的最大迭代次数。。 当预热时间较短时，我们观察到较难的任务的性能显著下降。 我们在实验中将 η 设置为 0.1</p><p><em>Loss Scaling:</em> 我们的模型具有共享参数和特定于任务的参数，我们发现保持单独的学习率很重要。 对于共享的基础模型，我们将基础学习率设置为所有单任务数据集参数的最小值。 为了适应每个数据集的可变学习率，我们通过任务目标学习率与基本学习率的比率来缩放每个数据集的任务损失。</p><h2 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h2><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20211017171140.png" alt="" /></p><p>实验发现，12个任务联合训练带来了精度的提升，但是G4任务的加入会导致一定程度上精度下降。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20211017171238.png" alt="" /></p><p>我们从代表性任务分析中观察到，G4 在联合训练期间往往会对其他组产生负面影响。 为了在所有任务上验证这一观察结果，我们训练了一个没有 G4 的 All-Task 模型（第 5 行）。 该模型实现了更高的平均值。 与完整 AT 模型的 67.39 相比，G1+G2+G3 的得分为 67.96。</p><p>理由推测：NLVR2 (G4) 为每个描述呈现两个图像，通常一个匹配而另一个不匹配。 尽管与一张图像对齐，但整个实例是负面的。 我们推测这种监督可能会干扰 Flickr30k 中的标准标题图像对齐目标。</p><h2 id="预训练"><a class="markdownIt-Anchor" href="#预训练"></a> 预训练</h2><p>本文对<strong>多模态对齐预测multimodal alignment prediction任务有修改</strong>，最近的工作发现在没有此预训练目标的非图像检索任务中有更好的性能。在自然语言理解任务中也发现了类似的观察结果。原因是对于未对齐的图像标题对（负样本），相当于迫使模型根据不正确的配对数据预测丢失的图像或文本区域，文章发现，在这种设置中，模型将学习更糟糕的上下文表示。所以文章只对对齐的图像标题对执行掩码多模态建模任务，而不是删除多模态对齐预测任务。这将有效地消除负采样引入的噪声。</p><p><strong>屏蔽重叠区域</strong>。 与词嵌入不同，视觉特征嵌入（从预训练的 Faster-RCNN 中提取）由于重叠的图像区域有很多重复。 为了避免从其他元素的视觉嵌入中泄漏视觉线索，VL-BERT在应用 Faster R-CNN 之前将掩码 RoI 中的像素设置为零。 然而，具有边界信息的重叠图像块仍可能会泄露掩码 RoI 的视觉线索。 我们以更积极的方式屏蔽重叠的图像区域——任何与屏蔽区域重叠 40% IOU 或更多的视觉嵌入也被屏蔽。经此改进后，模型性能有了进步。</p><h3 id="模型细节"><a class="markdownIt-Anchor" href="#模型细节"></a> 模型细节</h3><p>图像特征是从在视觉基因组 (VG) 上训练的 ResNeXT-152 Faster-RCNN 模型中提取的，具有属性损失。 我们的模型首先从预训练的 BERT 权重 [14] 中初始化。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20211017205503.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-UNITER</title>
    <link href="/2021/10/14/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-UNITER/"/>
    <url>/2021/10/14/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-UNITER/</url>
    
    <content type="html"><![CDATA[<h2 id="论文要点"><a class="markdownIt-Anchor" href="#论文要点"></a> 论文要点</h2><ul><li>介绍了UNITER，一种通用的图像-文本表示，通过对四个图像-文本数据集（COCO、视觉基因组、概念性字幕和SBU字幕）的大规模预训练学习，它可以通过联合多模式嵌入为异构下游V+L任务提供支持。</li><li>设计了四个预训练任务：遮蔽语言建模（MLM）、遮蔽区域建模（MRM，有三个变体）、图像文本匹配（ITM）和词区域对齐（WRA）。与之前将联合随机掩蔽应用于两种模式的工作不同，我们在预训练任务中使用条件掩蔽（即，掩蔽语言/区域建模以图像/文本的完全观察为条件）。除了用于全局图像文本对齐的ITM之外，我们还建议通过使用最优传输（OT）实现WRA，以明确鼓励在预训练期间在单词和图像区域之间进行细粒度对齐。综合分析表明，条件掩蔽和基于OTA的WRA都有助于更好的预训练。</li></ul><p>UNiversal Image-TExt Representation (UNITER)</p><ul><li>介绍了 UNITER，一种通用图像文本表示，通过对四个图像文本数据集（COCO、Visual Genome、Conceptual Captions 和 SBU Captions）的大规模预训练学习，可以为异构下游 V+L 的任务提供支持联合多模态嵌入。</li><li>设计了四个预训练任务：Masked Language Modeling (MLM)、Masked Region Modeling (MRM，具有三个变体)、ImageText Matching (ITM) 和 Word-Region Alignment (WRA)。 与之前将联合随机掩蔽应用于两种模态的工作不同，我们在预训练任务中使用<strong>条件屏蔽</strong>（即屏蔽语言/区域是以对图像/文本的全面观察为条件的，即只屏蔽一种模态而保持另一种不受污染；）。</li><li>除了用于全局图像文本对齐的 ITM 之外，我们还通过使用<strong>最佳传输 (OT) 提出了 WRA</strong>，以在预训练期间明确鼓励单词和图像区域之间的细粒度对齐。</li></ul><h2 id="引入"><a class="markdownIt-Anchor" href="#引入"></a> 引入</h2><p>多模态要学习两个模态的联合表示，而先前模型过于特定于某个任务。</p><p>我们使用以下预训练特征:</p><p>(i) Masked Language Modeling (<strong>MLM</strong>) conditioned on image; 以图像为条件的屏蔽语言建模</p><p>(ii) Masked Region Modeling (<strong>MRM</strong>) conditioned on text; 以文本为条件的屏蔽区域建模</p><p>(iii) Image-Text Matching (<strong>ITM</strong>);  图文匹配</p><p>(iv) Word-Region Alignment (<strong>WRA</strong>).  单词区域对齐</p><p>为了进一步研究 MRM 的有效性，我们提出了三种 MRM 变体：</p><p>(i) Masked Region Classification (MRC); 屏蔽区域分类</p><p>(ii) Masked Region Feature Regression (MRFR); 屏蔽区域特征回归</p><p>(iii) Masked Region Classification with KL-divergence (MRC-kl). 基于KL散度的屏蔽区域分类</p><p>与之前关于多模态预训练的工作相比 [47,29,1,24,42,60,25]：</p><p>(i)我们的掩码语言/区域建模以对图像/文本的全面观察为条件，而不是应用联合随机掩码 两种方式；</p><p>(ii) 我们通过使用最佳传输 (OT) [37,7] 引入了一种新的 WRA 预训练任务，以明确鼓励单词和图像区域之间的细粒度对齐。 直观地说，基于 OT 的学习旨在通过最小化将一个分布传输到另一个分布的成本来优化分布匹配。 在我们的上下文中，我们的目标是最小化将嵌入从图像区域传输到句子中的单词（反之亦然）的成本，从而优化更好的跨模式对齐。 我们表明，条件掩码和基于 OT 的 WRA 都可以成功缓解图像和文本之间的错位，从而为下游任务提供更好的联合嵌入。</p><h2 id="模型结构"><a class="markdownIt-Anchor" href="#模型结构"></a> 模型结构</h2><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110151827468.png" alt="" /></p><p>给定一对图像和句子，UNITER将图像的视觉区域和句子的文本标记作为输入。我们设计了一个Image Embedder和Text Embedder来提取它们各自的嵌入。然后将这些嵌入输入到多层Transformer中，学习跨视觉区域和文本标记的跨模态上下文嵌入。由于Transformer中的自我注意机制是无顺序的，因此需要将token的位置编码和区域的位置编码为附加输入。</p><p>在<strong>Image Embedder</strong>中，我们首先使用Faster R-CNN来提取每个区域的视觉特征（pooled ROI features）。 我们还通过 7 维向量（[x1,y1,x2,y2,w,h,w ∗ h] (normalized top/left/bottom/right coordinates, width, height, and area.)）对每个区域的位置特征进行编码。然后，视觉和位置特征都通过全连接 (FC) 层以投影到相同的嵌入空间中。 每个区域的最终视觉嵌入是通过将两个 FC 输出相加然后通过一个层归一化 (LN) 层来获得的。</p><p>对于<strong>Text Embedder</strong>，我们遵循 BERT并将输入句子标记为 WordPieces。 每个子词标记的最终表示是通过总结其词嵌入和位置嵌入获得的，然后是另一个 LN 层。</p><h3 id="预训练任务"><a class="markdownIt-Anchor" href="#预训练任务"></a> 预训练任务：</h3><ul><li><p>Masked Language Modeling conditioned on image regions (MLM),</p></li><li><p>Masked Region Modeling conditioned on input text (with three variants) (MRM),</p></li><li><p>Image-Text Matching (ITM),</p></li><li><p>Word-Region Alignment (WRA).</p></li></ul><p>具体来说，词掩码是通过用特殊的令牌[MASK]替换令牌来实现的，区域掩码是通过将视觉特征向量替换为全零来实现的。 请注意，每次我们只屏蔽一种模态，同时保持另一种模态完整，而不是像其他预训练方法中使用的那样随机屏蔽两种模态。 这可以防止在掩码区域碰巧由掩码字描述时潜在的错位。</p><p>我们还通过 ITM 学习了整个图像和句子之间的实例级对齐。 在训练期间，我们对正负图像句子对进行采样并学习它们的匹配分数。 此外，为了在单词标记和图像区域之间提供更细粒度的对齐，我们通过使用最佳传输提出了 WRA，它有效地计算了将上下文图像嵌入传输到单词嵌入（反之亦然）的最低成本。 因此，推断的运输计划可作为更好的跨模式对齐的推进器。 根据实验，我们表明条件掩码和 WRA 都有助于提高性能（在第 4.2 节中）。 为了用这些任务预训练 UNITER，我们为每个小批量随机抽取一个任务，并且每次 SGD 更新仅训练一个目标。</p><h4 id="masked-language-modeling-mlm"><a class="markdownIt-Anchor" href="#masked-language-modeling-mlm"></a> Masked Language Modeling (MLM)</h4><p>设图像区域为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>=</mo><mo stretchy="false">{</mo><msub><mi>v</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>v</mi><mi>K</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">v=\{v_1,..., v_K\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span> ， 输入词为 $w= {w_1,…,w_T} $，掩码的索引为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>∈</mo><msup><mi mathvariant="double-struck">N</mi><mi>M</mi></msup></mrow><annotation encoding="application/x-tex">m \in \mathbb{N}^M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">N</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span></span></span></span></span></span></span> （N 是自然数，M 是屏蔽标记的数量，m 是屏蔽索引的集合。）在 MLM 中，以 15% 的概率随机屏蔽输入词，并用特殊标记 [MASK].7 替换被屏蔽的词 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">w_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。目标是利用除了被屏蔽词之外的所有词以及所有图像区域来最小化负对数似然函数，每一对w，v都是从训练集D中取的</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110152043261.png" style="zoom:67%;" /><h4 id="image-text-matching-itm"><a class="markdownIt-Anchor" href="#image-text-matching-itm"></a> Image-Text Matching (ITM)</h4><p>在 ITM 中，一个额外的特殊标记 [CLS] 被添加到我们的模型中，它表示两种模态的融合表示。 ITM 的输入是一个句子和一组图像区域，输出是一个二元标签 y ∈ {0,1}，表示采样对是否匹配。 我们提取 [CLS] 标记的表示作为输入图像文本对的联合表示，然后将其输入到 FC 层和 sigmoid 函数中以预测 0 到 1 之间的分数。我们将输出分数表示为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>w</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">s_θ(w,v )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span> 。 ITM 监督是在 [CLS] 令牌上进行的。 在训练期间，我们在每一步从数据集 D 中采样一个正负对 (w,v)。 负对是通过用从其他样本中随机选择的图像或文本替换成对样本中的图像或文本来创建的。 我们应用二元交叉熵损失进行优化：</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110152111481.png" style="zoom: 67%;" /><h4 id="word-region-alignment-wra"><a class="markdownIt-Anchor" href="#word-region-alignment-wra"></a> Word-Region Alignment (WRA)</h4><p>我们对 WRA 使用 Optimal Transport(OT)，其中学习了一个<strong>传输计划transport plan</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>T</mi><mo>×</mo><mi>K</mi></mrow></msup></mrow><annotation encoding="application/x-tex">T \in \mathbb{R}^{T\times K}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span></span></span></span></span></span></span></span></span> 来优化 w 和 v 之间的对齐。OT有以下优点：</p><p>(i) 自归一化：T 的所有元素总和为 1 。</p><p>(ii) 稀疏性：当精确求解时，OT 产生最多包含 (2r-1) 个非零元素的稀疏解 T，其中 r = max(K,T)，导致更可解释和更稳健的对齐。</p><p>(iii) 效率：与传统的线性规划求解器相比，我们的解决方案可以使用仅需要矩阵向量乘积的迭代程序轻松获得，因此很容易适用于大规模模型预训练。</p><p>（w，v）可以被视为两个离散分布 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi><mo separator="true">,</mo><mi>ν</mi></mrow><annotation encoding="application/x-tex">\mu,\nu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">μ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.06366em;">ν</span></span></span></span> ,且 $ \mu = \sum_{i=1}^{T} a_i \delta_{w_i} ,\ \  \nu = \sum_{j=1}^{K} b_j \delta_{v_j}$ ，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>δ</mi><msub><mi>w</mi><mi>i</mi></msub></msub></mrow><annotation encoding="application/x-tex">δ_{w_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9445399999999999em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02691em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span></span></span></span> 是以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为中心的Dirac函数。权重向量 a 和 b 分别属于 T 维和 K 维单纯形(代数拓扑概念) ，因为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">μ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">μ</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ν</mi></mrow><annotation encoding="application/x-tex">ν</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.06366em;">ν</span></span></span></span> 都是概率分布。其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mo stretchy="false">{</mo><msub><mi>a</mi><mi>i</mi></msub><msubsup><mo stretchy="false">}</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>T</mi></msubsup><mo>∈</mo><msub><mi mathvariant="normal">Δ</mi><mi>T</mi></msub><mo separator="true">,</mo><mtext>  </mtext><mi>b</mi><mo>=</mo><mo stretchy="false">{</mo><msub><mi>b</mi><mi>j</mi></msub><msubsup><mo stretchy="false">}</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>K</mi></msubsup><mo>∈</mo><msub><mi mathvariant="normal">Δ</mi><mi>K</mi></msub><mo separator="true">,</mo><mtext>  </mtext><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>T</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>K</mi></msubsup><msub><mi>b</mi><mi>j</mi></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a=\{a_i\}_{i=1}^T \in \Delta_T, \ \ b=\{b_j\}_{j=1}^K \in \Delta_K,\ \ \sum_{i=1}^Ta_i=\sum_{j=1}^Kb_j=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0999949999999998em;vertical-align:-0.258664em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">}</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">Δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.236103em;vertical-align:-0.394772em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">}</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2809409999999999em;vertical-align:-0.29971000000000003em;"></span><span class="mord"><span class="mord">Δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mspace"> </span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.417049em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 。</p><p>µ 和 ν 之间的 OT 距离（因此也是 (w,v) 对的对齐损失）定义为：</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110152146341.png" style="zoom:67%;" /><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110152153286.png" style="zoom:67%;" /><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mn>1</mn><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">1_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是n维的全1向量，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo stretchy="false">(</mo><msub><mi>w</mi><mi>i</mi></msub><mi mathvariant="normal">，</mi><msub><mi>v</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c(w_i，v_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 是评估 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">v_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 之间距离的成本函数。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110152202159.png" style="zoom:67%;" /><p>矩阵T表示为<strong>传输计划transport plan</strong>，解释两种模式之间的对齐。不幸的是，T上的精确最小化是难以计算的，并且我们考虑IPOT算法来近似OT距离（细节在补充文件中提供）。求解T后，OT距离作为WRA损失，可用于更新参数θ。</p><h4 id="masked-region-modeling-mrm"><a class="markdownIt-Anchor" href="#masked-region-modeling-mrm"></a> Masked Region Modeling (MRM)</h4><p>与 MLM 类似，我们也对图像区域进行采样并以 15% 的概率掩盖其视觉特征。 给定剩余未掩蔽的区域 v_\m 和所有单词 w，该模型被训练以重建掩蔽区域 v_m。 掩蔽区域的视觉特征被零替换。 与表示为离散标签的文本标记不同，视觉特征是高维和连续的，因此不能通过类似然进行监督。 相反，我们为 MRM 提出了三个变体，它们共享相同的目标基础：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110152206202.png" alt="" /></p><ol><li><p>Masked Region Feature Regression (MRFR)</p><p>MRFR 学习将每个屏蔽区域 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>v</mi><mi>m</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">v^{(i)}_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.161392em;vertical-align:-0.11659199999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.5834080000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11659199999999997em;"><span></span></span></span></span></span></span></span></span></span> 的 Transformer 输出回归到其视觉特征。 具体来说，我们应用 FC 层将其 Transformer 输出转换为与输入 ROI 池化特征 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><msubsup><mi>v</mi><mi>m</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r(v^{(i)}_m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2948em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.5834080000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11659199999999997em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 维度相同的向量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msubsup><mi>v</mi><mi>m</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h_θ(v^{(i)}_m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2948em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.5834080000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11659199999999997em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，并对二者使用L2回归：<img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110152210711.png" style="zoom:67%;" /></p></li><li><p>Masked Region Classification (MRC)</p><p>MRC 学习预测每个屏蔽区域的对象语义类。 我们首先将掩蔽区域 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>v</mi><mi>m</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">v^{(i)}_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.161392em;vertical-align:-0.11659199999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.5834080000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11659199999999997em;"><span></span></span></span></span></span></span></span></span></span> 的 Transformer 输出馈送到 FC 层以预测 K 个对象类别的分数，然后进一步通过 softmax 函数将其转换为归一化分布  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>g</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msubsup><mi>v</mi><mi>m</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup><mo stretchy="false">)</mo><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mi>K</mi></msup></mrow><annotation encoding="application/x-tex">g_{\theta}(v^{(i)}_m) \in \mathbb{R}^K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2948em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.5834080000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11659199999999997em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span></span></span></span></span></span></span></span> 。 请注意，没有真实标签，因为未提供对象类别。 因此，我们使用 Faster R-CNN 的对象检测输出，并将检测到的对象类别（具有最高置信度）作为掩蔽区域的标签，将其转换为单热向量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo stretchy="false">(</mo><msubsup><mi>v</mi><mi>m</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup><mo stretchy="false">)</mo><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mi>K</mi></msup></mrow><annotation encoding="application/x-tex">c(v^{(i)}_m) \in \mathbb{R}^K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2948em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.5834080000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11659199999999997em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span></span></span></span></span></span></span></span> ，最终目标是最小化交叉熵 (CE) 损失：<img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110152213555.png" style="zoom:67%;" /></p></li><li><p>Masked Region Classification with KL-Divergence (MRC-kl)</p><p>MRC 将对象检测模型中最可能的对象类作为硬标签（w.p. 0 或 1），假设检测到的对象类是该区域的真实标签。 然而，这可能不是真的，因为没有可用的真实标签。 因此，在 MRC-kl 中，我们通过使用软标签作为监督信号来避免这种假设，这是来自检测器的原始输出（即对象类的分布 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>c</mi><mo>~</mo></mover><mo stretchy="false">(</mo><msubsup><mi>v</mi><mi>m</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\tilde{c}(v^{(i)}_m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2948em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span></span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">~</span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.5834080000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11659199999999997em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>）。 MRC-kl 旨在通过最小化两个分布之间的 KL 散度，将这些知识提炼到 UNITER 中 [16]：<img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110152214543.png" style="zoom:67%;" /></p></li></ol><h3 id="预训练数据集"><a class="markdownIt-Anchor" href="#预训练数据集"></a> 预训练数据集</h3><p>COCO, Visual Genome (VG), Conceptual Captions (CC), and SBU Captions中的句子图像对。</p><img src="C:\Users\WangTiao\AppData\Roaming\Typora\typora-user-images\image-20211016154742022.png" alt="image-20211016154742022" style="zoom:67%;" /><p>将四个数据集分为两类。第一个由COCO的图像字幕数据和VG的密集字幕数据组成。我们称之为“域内in domain”数据，因为大多数V+L任务都构建在这两个数据集之上。为了获得“公平”的数据分割，我们合并了COCO的原始的训练和验证分割，并排除了下游任务中出现的所有验证和测试图像。</p><p>我们还通过URL匹配排除了所有同时出现的Flickr30K图像，因为COCO和Flickr30K图像都是从Flickr中抓取的，可能存在重叠，同样的规则也适用于视觉基因组。</p><p>通过这种方式，我们获得了用于训练的5.6M图像文本对和用于内部验证的131K图像文本对，这是LXMERT中使用的数据集大小的一半，这是由于过滤重叠图像和仅使用图像文本对。我们还使用来自CC和SBU的额外域外数据进行模型训练。</p><h2 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h2><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110161629703.png" alt="" /></p><p>对于VQA, VCR, NLVR任务，我们通过多层感知器（MLP）从**[CLS]标记的表示<strong>中提取输入图像-文本对的</strong>联合嵌入**。为了重新理解，我们使用MLP计算区域对齐分数。这些MLP层在微调阶段学习。具体而言，我们将VQA、VCR、NLVR、视觉蕴涵和再理解表述为<strong>分类问题</strong>，并最小化地面真相答案/响应的交叉熵。对于图像文本检索，我们将其表述为一个排序问题。在微调过程中，我们对三对图像和文本进行采样，其中一对来自数据集，另一对来自数据集，两对来自数据集，通过随机将其句子/图像替换为其他句子/图像。我们计算正负对的相似度分数（基于联合嵌入），并通过三元组损失最大化它们之间的边际。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110161736678.png" alt="" /></p><p>对于下游任务，我们的基础模型和大型模型都在域内+域外数据集上进行预训练，最佳预训练设置为：MLM+ITM+MRC kl+MRFR+WRA。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-LXMERT</title>
    <link href="/2021/10/14/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-LXMERT/"/>
    <url>/2021/10/14/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-LXMERT/</url>
    
    <content type="html"><![CDATA[<h2 id="论文要点"><a class="markdownIt-Anchor" href="#论文要点"></a> 论文要点</h2><ul><li><p>提出了 LXMERT（从 Transformers 学习跨模态编码器表示）框架来学习这些视觉和语言的联系，构建了一个由三个编码器组成的大规模 Transformer 模型：对象关系编码器、语言编码器和跨模态编码器。</p></li><li><p>使用大量图像和句子对对模型进行预训练，通过五个不同的代表性预训练任务：掩码语言建模、掩码对象预测（ 特征回归和标签分类）、跨模态匹配和图像问答。</p></li></ul><h2 id="模型结构"><a class="markdownIt-Anchor" href="#模型结构"></a> 模型结构</h2><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110141320945.png" alt="" /></p><h3 id="input-embedding"><a class="markdownIt-Anchor" href="#input-embedding"></a> Input embedding</h3><p>模型将输入分别表示为word-level sentence embeddings 和 object-level image embeddings。</p><h4 id="word-level-sentence-embeddings"><a class="markdownIt-Anchor" href="#word-level-sentence-embeddings"></a> word-level sentence embeddings</h4><p>一个句子首先被WordPiece分词器分成单词序列 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><msub><mi>w</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>w</mi><mi>n</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{w_1,…, w_n\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span> 长度为 n。 接下来，如图 1 所示，通过embedding子层将单词 w_i 及其索引 i（w_i 在句子中的绝对位置）投影到向量，然后添加到索引感知词嵌入中：</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110141329206.png" style="zoom:67%;" /><h4 id="object-level-image-embeddings"><a class="markdownIt-Anchor" href="#object-level-image-embeddings"></a> object-level image embeddings</h4><p>我们没有使用卷积神经网络输出的特征图，而是遵循BUTD的方法将检测到的对象的特征作为图像的嵌入，即使用faster rcnn提取对象及特征。 具体来说，物体检测器检测图像中的 m 个物体 {o_1, . . . , o_m} 。 每个对象 o_j 由其位置特征（即边界框坐标）p_j 及其 2048 维感兴趣区域 (RoI) 特征 f_j 表示。 (2018)，我们通过添加 2 个全连接层的输出来学习位置感知嵌入 v_j</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110141332437.png" style="zoom:67%;" /><h3 id="encoder"><a class="markdownIt-Anchor" href="#encoder"></a> encoder</h3><h4 id="single-modality-encoders"><a class="markdownIt-Anchor" href="#single-modality-encoders"></a> Single-Modality Encoders</h4><p>在经过ROI特征提取与word embedding之后，将两个输入分别送入两个单模态encoder中：language encoder 和 object-relationship encoder。单模态encoder中每一层都包含self-attention和FFN层，其中FFN层由两个全连接层构成。对语言单模态encoder重复 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mi>L</mi></msub></mrow><annotation encoding="application/x-tex">N_L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 层，对对象单模态encoder重复 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">N_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 层。 与原来结构相同，在每个子层之后添加残差连接和层规范化LN（由图1中的“+”符号注释）。</p><h4 id="cross-modality-encoder"><a class="markdownIt-Anchor" href="#cross-modality-encoder"></a> Cross-Modality Encoder</h4><p>交叉模态编码器中的每个交叉模态层（图 1 中右侧虚线块）由两个自注意子层、一个双向交叉注意子层和两个前馈子层组成，堆叠 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mi>X</mi></msub></mrow><annotation encoding="application/x-tex">N_X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 层。 具体到第k层中，首先应用双向交叉注意子层（‘Cross’），其中包含两个单向交叉注意子层：一个从语言到视觉，一个从视觉到语言，其输入的QKV均为k-1层的输出。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110141355248.png" style="zoom:67%;" /><p>交叉注意子层用于交换信息并对齐两种模态之间的实体，以学习联合交叉模态表示。 为了进一步建立内部连接，在其之后将自注意力子层（“Self”）应用于交叉注意力子层的输出：</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110141356580.png" style="zoom:67%;" /><p>最后输出应用FFN层，残差连接以及LN。</p><h3 id="output-representations"><a class="markdownIt-Anchor" href="#output-representations"></a> Output Representations</h3><p>如图 1 最右侧所示，我们的 LXMERT 跨模态模型分别具有语言、视觉和跨模态的三个输出。 语言和视觉输出是由跨模态编码器生成的特征序列。 对于跨模态输出，遵循BERT的做法，我们在句子词之前附加一个特殊标记[CLS]（表示为图1底部分支中的顶部黄色块），并将该特殊标记在语言特征序列中的对应特征向量用作跨模态输出。</p><h2 id="预训练方法"><a class="markdownIt-Anchor" href="#预训练方法"></a> 预训练方法</h2><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110141320808.png" alt="" /></p><h3 id="language-task-masked-cross-modality-lm"><a class="markdownIt-Anchor" href="#language-task-masked-cross-modality-lm"></a> Language Task: Masked Cross-Modality LM</h3><p>在语言方面，我们采用掩蔽跨模态语言模型（LM）任务。如图2底部分支所示，任务设置几乎<strong>与BERT相同</strong>：单词被随机屏蔽，概率为0.15，并要求模型预测这些屏蔽单词。不同的是除了从语言情态中的非蒙蔽词预测蒙蔽词外，LXMERT还可以通过其跨情态模型架构从视觉情态中预测蒙蔽词，从而解决歧义。因此，它有助于建立视觉模态与语言模态之间的联系，我们将此任务称为掩蔽跨模态LM，以强调这一差异。我们还表明，将BERT参数加载到LXMERT中会损害预训练过程。因为BERT在语言情态中表现相对较好，而不必学习这些跨情态连接。</p><h3 id="vision-task-masked-object-prediction"><a class="markdownIt-Anchor" href="#vision-task-masked-object-prediction"></a> Vision Task: Masked Object Prediction</h3><p>我们通过以0.15的概率随机掩蔽对象（即，用零掩蔽RoI特征）并要求模型预测这些掩蔽对象来预训练视觉侧。与语言任务（即掩蔽跨模态LM）类似，该模型可以从可见对象或语言模态推断掩蔽对象。从视觉方面推断对象有助于学习对象关系，从语言方面推断有助于学习跨模态对齐。因此，我们执行了两个子任务：<strong>RoI特征回归</strong>将对象的RoI特征f_j回归为L2损失，<strong>检测标签分类</strong>学习具有交叉熵损失的蒙蔽对象的标签。在“检测标签分类”子任务中，尽管我们的大多数预训练图像都有对象级注释，但注释对象的真实值标签在不同的数据集中是不一致的（例如，不同数量的标签类）。出于这些原因，我们采用Faster RCNN输出检测到的标签。虽然检测到的标签是有噪声的，但实验结果表明这些标签有助于预训练。</p><h3 id="cross-modality-tasks"><a class="markdownIt-Anchor" href="#cross-modality-tasks"></a> Cross-Modality Tasks</h3><h4 id="cross-modality-matching"><a class="markdownIt-Anchor" href="#cross-modality-matching"></a> Cross-Modality Matching</h4><p>对于每个句子，概率为0.5，我们将其替换为不匹配的2个句子。然后，我们训练分类器来<strong>预测图像和句子是否匹配</strong>。这项任务类似于BERT中的“下一句预测”。</p><h4 id="image-question-answering-qa"><a class="markdownIt-Anchor" href="#image-question-answering-qa"></a> Image Question Answering (QA)</h4><p>为了扩大预训练数据集（详见第 3.2 节），预训练数据中大约 1/3 的句子是关于图像的问题。 当图像和问题匹配时（即，在跨模态匹配任务中没有随机替换），我们要求模型预测这些图像相关问题的答案。 我们表明，使用此图像 QA 进行预训练可以在获得更好的跨模态表示。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-VILBERT</title>
    <link href="/2021/10/14/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-VILBERT/"/>
    <url>/2021/10/14/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-VILBERT/</url>
    
    <content type="html"><![CDATA[<h2 id="论文要点"><a class="markdownIt-Anchor" href="#论文要点"></a> 论文要点</h2><ul><li>提出VILBERT模型，将流行的BERT架构扩展到多模态<strong>双流</strong>模型，在通过共同注意转换层交互的独立流中处理视觉和文本输入。</li><li>在自动收集的大型概念标题数据集上通过两个代理任务对模型进行<strong>预训练</strong>，然后将其转移到多个已建立的视觉和语言任务——视觉问答、视觉常识推理、引用表达式、，以及基于字幕的图像检索——只需对基础架构进行少量添加。</li></ul><p>VILBERT的双流模型示例：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110141036515.png" alt="" /></p><p>预训练方法：在两个代理任务上训练我们的模型：在给定未屏蔽输入的情况下预测屏蔽词和图像区域的语义(predicting the semantics of masked words and image regions given the unmasked inputs,)，以及预测图像和文本片段是否对应(predicting whether an image and text segment correspond)。</p><h2 id="具体方法"><a class="markdownIt-Anchor" href="#具体方法"></a> 具体方法</h2><h3 id="bert"><a class="markdownIt-Anchor" href="#bert"></a> BERT</h3><p>bert是一种基于注意力的双向语言模型，其在大型语言语料库上进行预训练，BERT 已被证明对于将其迁移学习到多个自然语言处理任务上非常有效。</p><p>文章引入了一种基于 Transformer 架构的新型协同注意机制。 通过在多头注意力中交换键值对，这种结构使视觉参与的语言特征能够合并到视觉表示中（反之亦然）。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110141051055.png" style="zoom:67%;" /><p>BERT 对由词汇单词和一小组特殊标记组成的离散标记序列进行操作：SEP、CLS 和 MASK。 对这些离散标记序列进行word embedding之后再添加位置编码position embedding作为输入token。</p><p>BERT中有两种<strong>预训练任务</strong>： masked language modelling 和 next sentence prediction.</p><p>The masked language modelling task 随机将15%的输入token屏蔽。对于这些被屏蔽的token标记，80% 的情况下，被屏蔽的标记会被特殊的 MASK 标记替换，10% 情况下是随机单词，10% 是不进行更改。 然后训练 BERT 模型以在给定观察集的情况下重建这些掩码标记。 具体来说，学习线性层将每个索引（例如 h_i）的最终表示映射到词汇表的分布，并在交叉熵损失下训练模型。</p><p>Next sentence prediction 传入一前一后两个句子A，B，BERT被训练来预测B在源文本中是否跟在A后面。具体而言，在CLS令牌（即h_CLS）的最终表示上操作的线性层被训练以最小化该标签上的二进制交叉熵损失。</p><h3 id="vilbert"><a class="markdownIt-Anchor" href="#vilbert"></a> VILBERT</h3><p>我们称为 ViLBERT 的模型如图 1 所示，由两个并行的 BERT 样式模型组成，这些模型在图像区域和文本段上运行。 每个流都是一系列Transformer块 (TRM) 和新颖的co-attention Transformer层 (Co-TRM)，我们引入它们以实现模式之间的信息交换。 这种方法允许每个模态的网络深度可变，并支持不同深度的跨模态连接。</p><p>如图1，输入给定的一幅图像 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span> ，首先将其表示为一组图像区域特征 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mn>0</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>v</mi><mi>τ</mi></msub></mrow><annotation encoding="application/x-tex">v_0,…,v_{\tau}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.1132em;">τ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，一组文本输入 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mn>0</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>w</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">w_0,…,w_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，模型最终将其分别转化为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mrow><mi>v</mi><mn>0</mn></mrow></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>h</mi><mrow><mi>v</mi><mi>τ</mi></mrow></msub><mi mathvariant="normal">和</mi><msub><mi>h</mi><mrow><mi>w</mi><mn>0</mn></mrow></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>h</mi><mrow><mi>w</mi><mi>T</mi></mrow></msub></mrow><annotation encoding="application/x-tex">h_{v0},…,h_{v\tau} 和 h_{w0},…,h_{wT}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.1132em;">τ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">和</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110141118425.png" alt="" /></p><p>我们引入了图 2b 中所示的co-attention transformer层。 给定中间视觉和语言表示 H (i) _V 和 H (j) _W ，该模块像在标准transformer块中一样计算q,k,v矩阵。 然而，来自每个模态的k和v作为输入传递到另一个模态的多头注意力块。 因此，注意力模块为以另一个模态为条件的每种模态产生注意力池化特征——实际上在视觉流中执行图像条件语言注意力，在语言流中执行语言条件图像注意力。</p><p><strong>预训练任务</strong>： masked multi-modal modelling 和multi-modal alignment prediction.</p><p><strong>masked multi-modal modelling掩码多模态建模任务</strong>（如图 3a 所示）遵循标准 BERT 中的掩码语言建模任务——遮蔽大约 15% 的单词和图像区域输入，并在给定剩余输入的情况下对模型进行重构。 遮蔽的图像区域的图像特征在 90% 的情况下被归零，10% 的情况下未改变。 遮蔽文本输入的处理方式与 BERT 相同。 该模型不是直接回归遮蔽的特征值，而是预测相应图像区域的语义类分布。 为了监督这一点，我们从特征提取中使用的相同预训练检测模型中获取该区域的输出分布。 我们训练模型以最小化这两个分布之间的 KL 散度。 这种选择反映了这样一种观念，即语言通常只识别视觉内容的高级语义，不太可能重建准确的图像特征。 此外，应用回归损失可能难以平衡蒙版图像和文本输入造成的损失。</p><p>在<strong>multi-modal alignment prediction多模态对齐任务</strong>中（如图 3b 所示），模型以图像-文本对的形式呈现为 {IMG, v1, … . . , vT , CLS, w1, . . . , wT , SEP} 并且必须预测图像和文本是否对齐，即文本是否描述了图像。 我们将输出 h_IMG 和 h_CLS 作为视觉和语言输入的整体表示。 从视觉和语言模型中借用另一种常见结构，我们将整体表示计算为 h_IMG 和 h_CLS 之间的元素乘积，并学习一个线性层来进行二值预测，即图像和文本是否对齐。 但是，Conceptual Captions [24] 数据集仅包含对齐的图像-字幕对，为了生成图像标题对的负片，我们随机将图像或标题替换为另一个。</p><h3 id="模型实现细节"><a class="markdownIt-Anchor" href="#模型实现细节"></a> 模型实现细节</h3><p>我们使用在 BookCorpus 和英文维基百科上预训练的 BERT 语言模型初始化 ViLBERT 模型的语言流。 具体来说，我们使用 <strong>BERT_BASE</strong> 模型 ，它有 12 层转换器块，每个块的隐藏状态大小为 762 和 12 个注意力头。BERT_large可能会有更好的性能，但是会影响训练时间。</p><p>我们使用在 Visual Genome 数据集 [16]（详见 [30]）上预训练的 <strong>Faster R-CNN</strong> （带有 ResNet-101 主干）来提取区域特征。 我们选择类别检测概率超过置信阈值的区域，并保留 10 到 36 个高分框。 对于每个选定的区域 i，vi 被定义为来自该区域的平均池化卷积特征。 视觉流中的 Transformer 和 co-attentional Transformer 块的隐藏状态大小为 1024 和 8 个注意力头。</p><p>与文本中的单词不同，图像区域缺少自然的顺序。我们对空间位置进行编码，从区域位置（标准化的左上角和右下角坐标）和覆盖的图像面积部分构造一个5-d向量。然后对其进行投影以匹配视觉特征的尺寸，并将其相加。我们用代表整个图像的特殊 IMG 标记来标记图像区域序列的开始（即具有对应于整个图像的空间编码的均值池化视觉特征）。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>略读一些VQA论文</title>
    <link href="/2021/10/12/%E7%95%A5%E8%AF%BB%E4%B8%80%E4%BA%9BVQA%E8%AE%BA%E6%96%87/"/>
    <url>/2021/10/12/%E7%95%A5%E8%AF%BB%E4%B8%80%E4%BA%9BVQA%E8%AE%BA%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h2 id="mcb2016紧凑双线性池化"><a class="markdownIt-Anchor" href="#mcb2016紧凑双线性池化"></a> MCB（2016）紧凑双线性池化</h2><p>Multimodal Compact Bilinear Pooling for Visual Question Answering and Visual Grounding，使用<strong>紧凑的双线性池化</strong>来计算两个模态的特征向量。</p><p>双线性池化模型在2000年被提出，然而，考虑到它们的高维数（n^2），双线性池化到目前为止还没有被广泛使用。 文章参考了【. Compact bilinear pooling. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition】这篇论文中 Gao 等人的想法，其展示了如何有效地压缩单一模态的双线性池化。</p><p>VQA上，使用具有注意力和多个 MCB 的架构对两个 VQA 数据集上的表现进行了显著改进。 在视觉短语定位任务中，引入 MCB 池化可以提高短语定位精度，表明查询短语表示和提议边界框的视觉表示之间有更好的交互。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110121135474.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110121651698.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110121651660.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110121156626.png" alt="" /></p><h2 id="mlb-2016-2017-低秩双线性池化"><a class="markdownIt-Anchor" href="#mlb-2016-2017-低秩双线性池化"></a> MLB (2016-2017) 低秩双线性池化</h2><p>双线性表示往往是高维的，限制了计算复杂任务的适用性。 本文提出了：</p><ol><li>使用 <strong>Hadamard 乘积的低秩双线性池化</strong>，以实现多模态学习的有效注意机制。 我们表明，我们的模型在视觉问答任务中的表现优于紧凑双线性池，在 VQA 数据集上获得了最先进的结果。</li><li>其次，针对vqa，提出了一种<strong>利用低秩双线性池的高效注意机制的多模态低秩双线性注意网络（MLB）</strong>,结合了soft attention，实现了一种新的最先进的性能，并且具有更好的节省性能，进行了消融研究，以探索替代选择，例如网络深度、非线性函数和快捷连接。</li></ol><p>紧凑的双线性池包含两个缺点。 一种来自<strong>抽样sample方法</strong>。 紧凑双线性池化依赖于一个有利的特性，E[hΨ(x, h, s), Ψ(y, h, s)i] = hx, yi，它为使用投影特征而不是原始特征提供了基础。 然而，计算精确期望在计算上是难以处理的，因此，随机参数 h 和 s 在训练和评估期间是固定的。 这个实际的选择导致了第二个缺点。 紧凑双线性池的投影维度应该足够大，以最小化固定参数的偏差。 对于 512 维和 4096 维输入，实际选择分别为 10K 和 16K。 尽管与完全双线性池化相比，这些压缩维度减少了两个数量级，但这种<strong>高维特征可能成为计算复杂模型的瓶颈</strong>。</p><p>**解决方法：**使用 Hadamard 乘积（逐元素乘法）的低秩双线性池化。将用于双线性池化的三维权重张量分解为三个二维权重矩阵，从而强制权重张量的秩为低秩。 因此，分别由两个权重矩阵线性投影的两个输入特征向量通过 Hadamard 乘积计算，然后使用第三个权重矩阵进行线性投影。</p><h2 id="mutan-2017"><a class="markdownIt-Anchor" href="#mutan-2017"></a> MUTAN （2017）</h2><p>Multimodal Tucker Fusion for VQA，同样是对双线性池化的改进，改进方向同样是使其更适合计算复杂任务。</p><p>文章认为，MLB的低秩张量结构相当于将视觉和问题表示投影到公共r维空间中，并在该空间中计算简单的元素级产品交互。因此，MLB本质上是为学习文本和图像模式的强大单模态嵌入而设计的，但依赖于该空间中的简单融合方案。</p><p>为了解决这个问题，引入了 MUTAN，一种基于多模态张量的 Tucker 分解，以有效地参数化视觉和文本表示之间的双线性交互。 如下图，将q，v联合的向量 $\tau $ 分解为三个向量和一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>τ</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">\tau_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110131049573.png" alt="" /></p><p>除了 Tucker 框架之外，我们还设计了一个基于低秩矩阵的分解来明确限制交互秩。 使用 MUTAN，我们控制合并方案的复杂性，同时保持良好的可解释融合关系。 我们展示了我们的 MUTAN 模型如何概括一些最新的 VQA 架构，提供最先进的结果。</p><p>文中使用和MCB类似的attention方法</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110131036531.png" alt="" /></p><h2 id="总结以上工作"><a class="markdownIt-Anchor" href="#总结以上工作"></a> 总结以上工作</h2><p>想要使用双线性池化相关方法对image vec &amp; question vec 作联合得到一个联合向量，对这个联合向量进行分类器输入得到答案</p><h2 id="mfb-2017-双线性池化co-attention"><a class="markdownIt-Anchor" href="#mfb-2017-双线性池化co-attention"></a> MFB (2017) 双线性池化+co-attention</h2><p>由于MLB生成的输出特征具有较低的维度和较少的参数模型，因此它与MCB具有很强的竞争力。然而，<strong>MLB收敛速度慢，对学习的超参数敏感</strong>。</p><p>为了解决这些问题，我们开发了**多模分解双线性池（MFB）**方法，用于融合图像的视觉特征和问题的文本特征，该方法具有MLB紧凑的输出特性和MCB强大的表达能力。</p><p>其次，在MFB模块的基础上，设计了一个<strong>共同注意co-attention学习</strong>体系结构，实现了图像注意和问题注意的联合学习。MFB方法和共同注意模型在VQA数据集上实现了最先进的性能。我们还进行了详细和广泛的实验，以说明为什么我们的MFB方法是有效的。</p><p>同时我们的实验结果表明，归一化技术在双线性模型中非常重要。</p><h4 id="最简单的多模态双线性模型"><a class="markdownIt-Anchor" href="#最简单的多模态双线性模型"></a> 最简单的多模态双线性模型</h4><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110131600745.png" style="zoom:67%;" /><p>x是图片特征，y是文本特征。虽然双线性池化可以有效地捕捉特征维度之间的成对相互作用，但它也引入了大量的参数（投影矩阵W），可能会导致高计算成本和过拟合的风险。</p><h4 id="将w变换为两个低秩矩阵可以重写为mfb形式"><a class="markdownIt-Anchor" href="#将w变换为两个低秩矩阵可以重写为mfb形式"></a> 将W变换为两个低秩矩阵，可以重写为MFB形式</h4><p>MLB可以理解为MFB的特例（k=1），形象地说，MFB 可以分解为两个阶段：首先，将来自不同模态的特征扩展到高维空间，然后与元素乘法相结合。 之后，执行和归一化层后的和池化以将高维特征压缩到紧凑的输出特征中，而 MLB 直接将特征投影到低维输出空间并执行逐元素乘法。 因此，在输出特征维数相同的情况下，MFB 的表示能力比 MLB 更强大。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110131603852.png" style="zoom:67%;" /><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110131608898.png" style="zoom:67%;" /><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110131207384.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110131207509.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110131701450.png" alt="" /></p><h2 id="mfh-2018-mfb的广义高阶设置"><a class="markdownIt-Anchor" href="#mfh-2018-mfb的广义高阶设置"></a> MFH (2018) MFB的广义高阶设置</h2><ul><li>设计了一种具有<strong>协同注意力</strong>学习的网络架构，同时对图像注意力和问题注意力进行建模，以便我们可以有效地减少不相关的特征，并为图像和问题表示提取更多的判别特征。</li><li>开发了一种<strong>多模态因子化双线性池 (MFB) 方法</strong>以实现更有效地融合图像的视觉特征和问题的文本特征，并开发了一个称为 MFH 的广义高阶模型来捕获更复杂的交互 多模态特征。 与现有的双线性池化方法相比，我们提出的 MFB 和 MFH 方法可以显着提高 VQA 的性能，因为它们可以更有效地利用多模态特征之间的复杂相关性，它具有MLB紧凑的输出特性和MCB强大的表达能力。我们将双线性MFB模型扩展到一个广义的高阶设置，并提出了一种多模态分解高阶池（MFH）方法，通过充分利用多模态特征的复相关来实现更有效的多模态特征融合。通过在多模态特征之间引入更复杂的高阶交互，我们的MFH方法可以实现更具辨别力的图像问题表示，并进一步显著提高VQA性能。</li><li>通过使用<strong>KL 散度作为损失函数</strong>，与最先进的策略相比，我们提出的答案预测方法可以实现更快的收敛速度并获得更好的性能。 我们的实验结果表明，我们的方法在两个大规模真实世界 VQA 数据集上实现了最先进的或可比的性能。我们将答案预测问题描述为一个标签分布学习问题。训练数据集中图像问题对的答案转换为所有可能答案的概率分布。我们使用KullbackLeibler散度（KLD）作为损失函数，以更准确地描述预测答案的概率分布与注释者给出的地面真相答案的概率分布之间的一致性。与MCB[8]中的答案抽样方法相比，使用KLD损失可以获得更快的收敛速度，并且在答案预测方面获得稍好的精度。</li></ul><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110131848877.png" style="zoom:67%;" /><h4 id="通过级联多个mfb块来将二阶双线性池扩展到广义高阶池一种广义的多模态分解高阶池mfh模型"><a class="markdownIt-Anchor" href="#通过级联多个mfb块来将二阶双线性池扩展到广义高阶池一种广义的多模态分解高阶池mfh模型"></a> 通过级联多个MFB块来将二阶双线性池扩展到广义高阶池，一种广义的多模态分解高阶池（MFH）模型</h4><p>MFB可以分为膨胀和紧缩阶段。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110131936218.png" style="zoom:67%;" /><p>稍加修改使其适合及联。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110131939742.png" style="zoom:67%;" /><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110131941679.png" style="zoom:67%;" /><p>(5)式修改为（7）式，结果在（6）式中输出为当前第i个block的输出，由（8）式对所有block的输出进行及联。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110131949823.png" alt="" /></p><h4 id="kl散度损失函数"><a class="markdownIt-Anchor" href="#kl散度损失函数"></a> KL散度损失函数</h4><p>在<strong>大多数现有的VQA方法</strong>中，应答阶段被描述为一个多类分类问题，每个应答涉及一个单独的类。在实践中，这种假设可能不适用于VQA任务，因为具有相同或相似含义的答案可以由不同的注释者进行不同的表达。例如，对于给定的图像问题对，“dog”和“puppy”的答案可能都是正确的。因此，在VQA任务中对答案相关性进行建模是至关重要的，这样学习到的模型才能更稳健。在一些数据集中，如VQA，每个问题都由不同的人用多个答案进行注释。为了利用答案相关性，MCB采用了答案抽样策略。具体而言，对于训练集中的每个图像问题对，每个样本的多个答案表示为所有可能答案y的分布N维向量，其中N是整个训练集的答案总数，每一个元素的大小为0-1，是对应为答案的概率。这样，问题就变成了传统的单标签多类分类问题，传统的softmax损失函数可以用来训练模型。通过足够的迭代次数，模型最终可以学习答案相关性</p><p>在<strong>实践中</strong>，使用答案抽样策略可能会给学习的模型带来不确定性，并且可能需要更多的迭代才能收敛。 为了克服这个问题，我们将带有样本答案的单标签多类分类问题转换为带有答案分布 y 的标签分布学习 (LDL) 问题 [37]。 因此，在最后一个全连接层的 softmax 激活之后，我们使用 KLdivergence 损失函数来惩罚预测 z ∈ RN。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110132014996.png" style="zoom:67%;" /><h2 id="ban-bilinear-attention-networks-低秩双线性池化的基础上使用双线性注意分布"><a class="markdownIt-Anchor" href="#ban-bilinear-attention-networks-低秩双线性池化的基础上使用双线性注意分布"></a> BAN Bilinear Attention Networks 低秩双线性池化的基础上使用双线性注意分布</h2><p>BAN利用双线性注意映射优雅地扩展了单一注意网络，其中<strong>使用低秩双线性池提取多模态多通道输入的联合表示</strong>。尽管BAN考虑每对多模输入通道，但计算成本保持不变，因为BAN由矩阵链乘法组成，以实现高效计算。此外，我们提出了一种**多模态剩余网络（MRN）**的变体，以有效地利用BAN的多个双线性注意图，由于提出的BAN残差学习方法利用残差求和而不是级联，因此可以有效地学习多达8个BAN的参数和性能。关于两个一瞥禁令的概述，保持了中间特征的大小不变。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110132238626.png" alt="" /></p><p>注意力分数由低秩双线性池化确定：<img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110132253460.png" style="zoom:67%;" /></p><p>Attention map 确定方式：<img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110132353931.png" style="zoom:67%;" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110132342976.png" alt="" /></p><p>经过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>=</mo><msup><mi>P</mi><mi>T</mi></msup><msup><mi>f</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup></mrow><annotation encoding="application/x-tex">f = P^Tf^{&#x27;}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.13692em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> 得到最终BAN函数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>=</mo><mi>B</mi><mi>A</mi><mi>N</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo separator="true">;</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f = BAN(X,Y;A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span> 。</p><p>其对应的残差连接：<img src="https://gitee.com/pokestar/image-bed/raw/master/2021/202110132354446.png" style="zoom:67%;" /></p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-MCAN</title>
    <link href="/2021/10/08/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-MCAN/"/>
    <url>/2021/10/08/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-MCAN/</url>
    
    <content type="html"><![CDATA[<h1 id="deep-modular-co-attention-networks-for-vqa"><a class="markdownIt-Anchor" href="#deep-modular-co-attention-networks-for-vqa"></a> Deep Modular Co-Attention Networks for VQA</h1><h2 id="论文要点"><a class="markdownIt-Anchor" href="#论文要点"></a> 论文要点</h2><ul><li>提出一个深度的协同注意力网络(Deep Modular Co-Attention Networks)，以协同方式对问题模态、图像模态内以及模态之间进行建模。</li><li>获得了VQAchallenge2019的冠军</li></ul><h2 id="模型架构"><a class="markdownIt-Anchor" href="#模型架构"></a> 模型架构</h2><h3 id="mca层"><a class="markdownIt-Anchor" href="#mca层"></a> MCA层</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/20211008154256.png" alt="" /></p><p>MCA层由两个基本单元构成，SA单元与GA单元。两个都使用缩放点积注意力(scaled dot-product attention)，即基于如下公式：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/20211008155245.png" alt="" /></p><p>同时也使用了Multi-head Attention：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/20211008155332.png" alt="" /></p><h4 id="sa-unit"><a class="markdownIt-Anchor" href="#sa-unit"></a> SA unit</h4><p>接收一个输入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">;</mo><mo>…</mo><mo separator="true">;</mo><msub><mi>x</mi><mi>m</mi></msub><mo stretchy="false">]</mo><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>m</mi><mo>×</mo><msub><mi>d</mi><mi>x</mi></msub></mrow></msup></mrow><annotation encoding="application/x-tex">X = [x_1;…;x_m] \in \mathbb{R}^{m \times d_x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> ，Multi-head Attention模块学习X内部的对应关系，即 $ A(x_i,(X,X))，i \in [1,m]$ ，输出feature <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Z</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>m</mi><mo>×</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">Z \in \mathbb{R}^{m \times d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span> ，FFN层接收之前的输出Z，传入到FC(4d)-ReLU-Dropout(0.1)- FC(d)。此外，对以上两层的输出应用残差连接residual connection和层规范化Layer Norm，以促进优化。</p><h4 id="ga-unit"><a class="markdownIt-Anchor" href="#ga-unit"></a> GA unit</h4><p>除了接收SA的输入X之外，还接收 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi>y</mi><mn>1</mn></msub><mo separator="true">;</mo><mo>…</mo><mo separator="true">;</mo><msub><mi>y</mi><mi>n</mi></msub><mo stretchy="false">]</mo><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>n</mi><mo>×</mo><msub><mi>d</mi><mi>y</mi></msub></mrow></msup></mrow><annotation encoding="application/x-tex">Y = [y_1;…;y_n] \in  \mathbb{R}^{n \times d_y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> ，  其Attention部分为 $ A(x_i,Y,Y)$，其余部分和SA类似。</p><h4 id="为什么使用问题y作为k-v使用图像作为q"><a class="markdownIt-Anchor" href="#为什么使用问题y作为k-v使用图像作为q"></a> 为什么使用问题Y作为K、V，使用图像作为q？</h4><p>这里我一开始有个疑惑是为什么不用question问题作为查询q，用图像x作为K、V呢？直觉上理解应该是用问题来引导（guide）图像X中的注意力才对。问了余老师才明白，使用问题Y作为K,V的原因是<strong>需要对问题Y进行self-attention来更好地提取里面的特征</strong>，同时对guide attention来讲谁作为Q并没有太大的性能影响，所以这里这么设计。</p><h4 id="模块化组合"><a class="markdownIt-Anchor" href="#模块化组合"></a> 模块化组合</h4><p>文章中设计了三种性能相对较好的单元间的组合方式，这些组合的输入和输出形状都相同，所以可以在深度上进行叠加。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/20211008162149.png" alt="" /></p><h5 id="idy-gaxy"><a class="markdownIt-Anchor" href="#idy-gaxy"></a> ID(Y)-GA(X,Y)</h5><p>输入问题特征Y通过恒等映射直接传递到输出特征，而在GA unit内对每个region $x_i \in X $和每个word <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>∈</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">y_i \in Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span>之间的密集模态间的相互作用进行建模。</p><h5 id="say-gaxy"><a class="markdownIt-Anchor" href="#say-gaxy"></a> SA(Y)-GA(X,Y)</h5><p>在(a)的基础上对问题特征Y添加SA unit来对每个问题词对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><msub><mi>y</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">}</mo><mo>∈</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">\{y_i,y_j\} \in Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> 之间的密集模内交互进行建模。</p><h5 id="say-sgaxy"><a class="markdownIt-Anchor" href="#say-sgaxy"></a> SA(Y)-SGA(X,Y)</h5><p>在(b)的基础上继续对图像特征X添加SA unit来对每个region对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">}</mo><mo>∈</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">\{x_i,x_j\} \in X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 之间密集的模内交互进行建模。</p><h3 id="模型整体结构"><a class="markdownIt-Anchor" href="#模型整体结构"></a> 模型整体结构</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/20211008164831.png" alt="" /></p><p>首先从输入的问题和图像中解释图像和问题的特征表示。 然后提出了两种深度共同注意模型，即堆叠stack和编码器-解码器Encoder-Decoder，它们由多个深度级联的 MCA 层组成，以逐渐细化参与的图像和问题特征。 当我们获得参与的图像和问题特征时，我们设计了一个简单的多模态融合模型来融合多模态特征，最后将它们馈送到多标签分类器以预测答案。 MCAN 的概览流程图如上图所示。</p><p>我们将采用堆叠策略的 MCAN 模型命名为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>C</mi><mi>A</mi><msub><mi>N</mi><mrow><mi>s</mi><mi>k</mi></mrow></msub><mo>−</mo><mi>L</mi></mrow><annotation encoding="application/x-tex">MCAN_{sk}-L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span>，将采用编码解码器策略的 MCAN 模型命名为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>C</mi><mi>A</mi><msub><mi>N</mi><mrow><mi>e</mi><mi>d</mi></mrow></msub><mo>−</mo><mi>L</mi></mrow><annotation encoding="application/x-tex">MCAN_{ed}-L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span>，其中 L 是深度级联的 MCA 层总数。</p><h4 id="question-and-image-representations"><a class="markdownIt-Anchor" href="#question-and-image-representations"></a> Question and Image Representations</h4><p>输入图像以自下而上的方式表示为一组区域视觉特征(BUTD attention)。这些特征是从在Visual Genome数据集上预训练的Faster R-CNN模型中提取的中间特征（以ResNet-101为backbone）。我们为检测到的对象的概率设置一个置信阈值，并获得动态对象数m∈ [10, 100]，最后得到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>m</mi><mo>×</mo><msub><mi>d</mi><mi>x</mi></msub></mrow></msup></mrow><annotation encoding="application/x-tex">X \in \mathbb{R}^{m \times d_x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>。</p><p>输入的问题以单词为单位分割，最多保留14个单词，每个单词使用经过预训练的GloVe word embeddings转化为300维的向量，一个n个单词的问题就被转化成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>×</mo><mn>300</mn></mrow><annotation encoding="application/x-tex">n \times 300</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">0</span></span></span></span> 的向量。这些向量被传入到一个具有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">d_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 个hidden units的LSTM网络中，同时保持输入输出形状不变，得到问题特征 $Y \in \mathbb{R}^{n \times d_y} $。</p><p>对于以上n，m，未满最大数字如n=14，m=100的，会使用zero-padding填充至最大数值。</p><h4 id="deep-co-attention-learning"><a class="markdownIt-Anchor" href="#deep-co-attention-learning"></a> Deep Co-Attention Learning</h4><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/20211008184303.png" alt="" /></p><p>上图以SA(Y)-SGA(X,Y)层为例展示Stack策略与Encoder-Decoder策略的两种模型。接收之前的输出X、Y作为输入，传入L层MCA层，对于每一层，输入都是上一层的输出（MCA层不改变输入输出的形状），第一层MCA层的输入即为上一模块的输出。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/20211008184914.png" alt="" /></p><p>Stack策略即为L层MCA层在深度上叠加，encoder-decoder策略是由Transformer启发。它通过将每个MCA层中GA单元的输入特征Y替换为最后一个MCA层的SA unit的输出问题特征Y来稍微修改堆叠模型。encoder-decoder策略可以理解为：encoder用于使用L个堆叠的SA单元学习关注的问题特征Y(L)，decoder用于使用Y(L)和堆叠的SGA单元学习关注的图像特征X(L)。</p><h4 id="multimodal-fusion-and-output-classifier"><a class="markdownIt-Anchor" href="#multimodal-fusion-and-output-classifier"></a> Multimodal Fusion and Output Classifier</h4><p>经过堆叠的MCA层后我们得到了模态间互相提取的图像特征和问题特征 $ X^{(L)} = [x_1<sup>{(L)};…;x_m</sup>{(L)}] \in \mathbb{R}^{m \times d} $ 和 $ Y^{(L)} = [y_1<sup>{(L)};…;y_n</sup>{(L)}] \in \mathbb{R}^{n \times d} $ ，所以这一部分对两个feature分别应用一个注意力减退模型(attentional reduction model)和一个两层的MLP(FC(d)-ReLU-Dropout(0.1)-FC(1))。以X为例，最后得到的attended feature <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>x</mi><mo>~</mo></mover></mrow><annotation encoding="application/x-tex">\tilde{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6678599999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6678599999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">~</span></span></span></span></span></span></span></span></span> 如下所示：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/20211008205815.png" alt="" /></p><p>然后再将两者合一，这里使用LayerNorm来稳定训练：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/20211008205859.png" alt="" /></p><p>之后将z投影为一个n维向量s，其中n是数据集中最常见的答案的数量，再对s使用一个sigmoid函数。之后，我们使用二元交叉熵（BCE）作为损失函数，在融合特征z上训练一个N类分类器。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-DETR</title>
    <link href="/2021/09/28/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-DETR/"/>
    <url>/2021/09/28/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-DETR/</url>
    
    <content type="html"><![CDATA[<h1 id="detr"><a class="markdownIt-Anchor" href="#detr"></a> DETR</h1><p>End-to-End Object Detection with Transformers</p><h2 id="论文要点"><a class="markdownIt-Anchor" href="#论文要点"></a> 论文要点</h2><ul><li><p>利用Transformer大大简化了目标检测的流程，实现了“端到端”检测，同时取得类似Faster RCNN的性能。</p></li><li><p>没有了anchor提出，NMS等等手动设计的组件，模型代码非常简洁，令刚看了Faster RCNN的代码的我大受震撼。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 论文最后给出的最简实现</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torchvision.models <span class="hljs-keyword">import</span> resnet50<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DETR</span>(<span class="hljs-params">nn.Module</span>):</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, num_classes, hidden_dim, nheads,num_encoder_layers, num_decoder_layers</span>):</span><br><span class="hljs-built_in">super</span>().__init__()<br> <span class="hljs-comment"># We take only convolutional layers from ResNet-50 model</span><br> self.backbone = nn.Sequential(*<span class="hljs-built_in">list</span>(resnet50(pretrained=<span class="hljs-literal">True</span>).children())[:-<span class="hljs-number">2</span>])<br>self.conv = nn.Conv2d(<span class="hljs-number">2048</span>, hidden_dim, <span class="hljs-number">1</span>)<br>self.transformer = nn.Transformer(hidden_dim, nheads, num_encoder_layers, num_decoder_layers)<br>self.linear_class = nn.Linear(hidden_dim, num_classes + <span class="hljs-number">1</span>)<br>self.linear_bbox = nn.Linear(hidden_dim, <span class="hljs-number">4</span>)<br>self.query_pos = nn.Parameter(torch.rand(<span class="hljs-number">100</span>, hidden_dim))<br>self.row_embed = nn.Parameter(torch.rand(<span class="hljs-number">50</span>, hidden_dim // <span class="hljs-number">2</span>))<br>self.col_embed = nn.Parameter(torch.rand(<span class="hljs-number">50</span>, hidden_dim // <span class="hljs-number">2</span>))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, inputs</span>):</span><br>x = self.backbone(inputs)<br>h = self.conv(x)<br>H, W = h.shape[-<span class="hljs-number">2</span>:]<br>pos = torch.cat([self.col_embed[:W].unsqueeze(<span class="hljs-number">0</span>).repeat(H, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>),<br> self.row_embed[:H].unsqueeze(<span class="hljs-number">1</span>).repeat(<span class="hljs-number">1</span>, W, <span class="hljs-number">1</span>),<br>], dim=-<span class="hljs-number">1</span>).flatten(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).unsqueeze(<span class="hljs-number">1</span>)<br>h = self.transformer(pos + h.flatten(<span class="hljs-number">2</span>).permute(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>), self.query_pos.unsqueeze(<span class="hljs-number">1</span>))<br><span class="hljs-keyword">return</span> self.linear_class(h), self.linear_bbox(h).sigmoid()<br><br> detr = DETR(num_classes=<span class="hljs-number">91</span>, hidden_dim=<span class="hljs-number">256</span>, nheads=<span class="hljs-number">8</span>, num_encoder_layers=<span class="hljs-number">6</span>, num_decoder_layers=<span class="hljs-number">6</span>)<br> detr.<span class="hljs-built_in">eval</span>()<br> inputs = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">800</span>, <span class="hljs-number">1200</span>)<br> logits, bboxes = detr(inputs)<br></code></pre></td></tr></table></figure><p><img src="https://scontent-tpe1-1.xx.fbcdn.net/v/t39.2365-6/98328450_244310383568962_7955889666970877952_n.jpg?_nc_cat=106&amp;ccb=1-5&amp;_nc_sid=ad8a9d&amp;_nc_ohc=qOObwnmScM0AX_6gFl3&amp;_nc_ht=scontent-tpe1-1.xx&amp;oh=125c094440b8cafa75c9550d30d2ee44&amp;oe=6157F84C" alt="DETR与Faster RCNN比较" /></p><p>如图所示，相比传统的目标检测方法（Faster RCNN），DETR在检测步骤上精简了很多。</p><h2 id="模型结构"><a class="markdownIt-Anchor" href="#模型结构"></a> 模型结构</h2><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109281053672.png" alt="DETR整体结构" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109281051526.png" alt="DETR具体结构" /></p><p>以上就是DETR的结构图，首先使用一个CNN Bakbone来提取特征图，接着是一个encoder-decoder Transformer和一个前馈网络FNN进行最终检测预测。</p><h3 id="backbone"><a class="markdownIt-Anchor" href="#backbone"></a> Backbone</h3><p>接收一个输入三通道图像 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mrow><mi>i</mi><mi>m</mi><mi>g</mi></mrow></msub><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mn>3</mn><mo>×</mo><msub><mi>H</mi><mn>0</mn></msub><mo>×</mo><msub><mi>W</mi><mn>0</mn></msub></mrow></msup></mrow><annotation encoding="application/x-tex">x_{img} \in \mathbb{R}^{3 \times H_0 \times W_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8252079999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.08125em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>，经过一个CNN backbone（一般是ResNet）后得到一个feature map <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>C</mi><mo>×</mo><mi>H</mi><mo>×</mo><mi>W</mi></mrow></msup></mrow><annotation encoding="application/x-tex">f \in \mathbb{R}^{C \times H \times W}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span></span></span></span></span></span></span></span></span></span></span></span> ，一般 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo>=</mo><mn>2048</mn></mrow><annotation encoding="application/x-tex">C=2048</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">4</span><span class="mord">8</span></span></span></span>，而HW则各自为缩小32倍。</p><h3 id="transformer-encoder"><a class="markdownIt-Anchor" href="#transformer-encoder"></a> Transformer encoder</h3><p>在encoder之前，先将feature map传入一个1*1卷积层进行降维，将2048维降低到一个更小的维度d，就得到一个新的feature map <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>z</mi><mn>0</mn></msub><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>d</mi><mo>×</mo><mi>H</mi><mo>×</mo><mi>W</mi></mrow></msup></mrow><annotation encoding="application/x-tex">z_0 \in \mathbb{R}^{d \times H \times W}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span></span></span></span></span></span></span></span></span></span></span></span> ，由于encoder接收的是一个输入序列，所以还要将空间维度转换为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>×</mo><mi>H</mi><mi>W</mi></mrow><annotation encoding="application/x-tex">d\times HW</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span></span> 。</p><p>每一个encoder都遵循Transformer的标准结构，如图二所示，由一个Multi-head Self-Attention结构和一个FNN层组成。由于Transformer是permutation invarient的也就是说元素之间位置的改变对最后的结果没有影响，所以为了让其学习到图像空间信息，就要为输入序列添加一个位置编码Position encoding，然后再输入到这个N个堆叠的Encoder中。这里的Position encoding我理解上就是feature map中每一个点在原本图像中的位置信息，如xy坐标等。</p><h3 id="transformer-decoder"><a class="markdownIt-Anchor" href="#transformer-decoder"></a> Transformer decoder</h3><p>Decoder也遵循Transformer的标准结构，使用Multi-head Self-Attention机制和encoder-decoder 注意力机制来操作大小为 d 的 N 个Embeddings输入。 与原始Transformer的不同之处在于，我们的模型在每个Decoder层并行解码 N 个对象，由于Decoder也是置换不变的，因此 N 个输入Embeddings必须不同才能产生不同的结果。 这些输入Embeddings是学习到的position encoding，我们称为object queries，与encoder类似，我们将它们添加到<strong>每个注意力层的输入</strong>中。 N 个object queries被Decoder转换为输出Embeddings。 然后通过前馈网络（在下一小节中描述）将它们独立解码为框坐标和类标签，从而产生 N 个最终预测。 在这些Embeddings上使用 Self-Attention机制和encoder-decoder注意力，模型使用它们之间的成对关系将所有对象一起全局推理，同时能够使用整个图像作为上下文。</p><p>所以这N个object queries输出N个最终预测框（类别），个人理解这就是N个anchor，那么在Decoder之后就能一对一输出N个bounding box，同时对每一个box进行分类。</p><h3 id="prediction-feed-forward-networks"><a class="markdownIt-Anchor" href="#prediction-feed-forward-networks"></a> Prediction feed-forward networks</h3><p>最终预测由具有 ReLU 激活函数和具有隐藏维度 d 的 3 层感知器和线性投影层计算。 FFN 预测框的归一化中心坐标、高度和宽度。 对于输入图像，线性层使用 softmax 函数预测类标签。 由于我们预测了一组固定大小的 N 个边界框，其中 N 通常远大于图像中感兴趣对象的实际数量，因此使用额外的特殊类标签 ∅ 来表示在槽内没有检测到对象。 该类与标准对象检测方法中的“背景”类起着类似的作用。</p><h3 id="auxiliary-decoding-loss-辅助损失"><a class="markdownIt-Anchor" href="#auxiliary-decoding-loss-辅助损失"></a> Auxiliary decoding loss 辅助损失</h3><p>在每个decoder层之后添加预测FFN层和Hungarian loss 。所有预测FFN共享其参数。使用额外的共享layer-norm来规范来自不同解码器层的预测FFN的输入。</p><p>这里的辅助损失，在参考了网上一些文章之后，我认为是为了辅助训练，加快收敛。即使如此这个模型仍然需要在16块V100上训练300个epoch共耗时3天，而要达到与faster rcnn对比的水平，更是要使用500个epoch。不过一个比较安慰的地方就是模型相对通用的架构比较适用迁移学习。</p><h2 id="损失函数"><a class="markdownIt-Anchor" href="#损失函数"></a> 损失函数</h2><p>之前已经说明DETR会生成N个最终预测框，一般为100，这个数字远大于图像中一般的物体数量，也会大于数据集中ground truth的数量。我们假定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 为ground truth，而 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>y</mi><mo>^</mo></mover><mo>=</mo><mo stretchy="false">{</mo><msub><mover accent="true"><mi>y</mi><mo>^</mo></mover><mi>i</mi></msub><msubsup><mo stretchy="false">}</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></msubsup></mrow><annotation encoding="application/x-tex">\hat y = \{\hat y_i\}^N_{i=1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0999949999999998em;vertical-align:-0.258664em;"></span><span class="mopen">{</span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">}</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span></span></span></span> 是N个预测输出的集合，我们将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 看作用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">\varnothing</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66334em;vertical-align:-0.08167em;"></span><span class="mord amsrm">∅</span></span></span></span> （no object）填充至数量N，他们的内容如下：$ y_i = (c_i , b_i) $ ，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是目标类别label，且有可能是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">\varnothing</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66334em;vertical-align:-0.08167em;"></span><span class="mord amsrm">∅</span></span></span></span> 也就是背景类，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><msup><mo stretchy="false">]</mo><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">b_i \in [0,1]^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span> 定义了ground truth box的坐标（中心x，y，相对图片大小的宽高）。要算loss首先得要把预测得到的输出与ground truth匹配起来，为了找到这两个集合之间的二分匹配 bipartite matching将其看作是二分图问题，采用匈牙利算法求解，我们的目标是使计算得到的预测输出的index  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span> 尽量匹配其应该对应的ground truth i。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109281530397.png" alt="" /></p><p>其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mi>c</mi><mi>h</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mover accent="true"><mi>y</mi><mo>^</mo></mover><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_{match}(y_i, \hat{y}_{\sigma(i)})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 的内容如下：<br /><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109281532662.png" alt="" /></p><p>使用上述最小化方法最小化 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mi>c</mi><mi>h</mi></mrow></msub></mrow><annotation encoding="application/x-tex">L_{match}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 以及匈牙利算法使 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span> 计算出来的index更加匹配到ground truth的 i。</p><p>第二步是计算损失函数，即上一步匹配的所有对的匈牙利损失。 我们定义的损失类似于常见物体检测器的损失，即类预测的负对数似然和稍后定义的框损失的线性组合：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109281545183.png" alt="" /></p><p>其中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>σ</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\hat{\sigma}(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span> 是上面计算出来的最佳匹配。实践中，当  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub><mo>=</mo><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">c_i= \varnothing</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66334em;vertical-align:-0.08167em;"></span><span class="mord amsrm">∅</span></span></span></span> 时将会除以10来降低因样本数量对权重的影响。</p><h3 id="bounding-box-loss"><a class="markdownIt-Anchor" href="#bounding-box-loss"></a> bounding box loss</h3><p>由于L1loss对不同大小的box所得的loss大小有误差，为了缓解这个问题，我们使用了 L1 损失和广义 IoU 损失的线性组合，所以bounding box loss定义为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>b</mi><mi>o</mi><mi>x</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>b</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mover accent="true"><mi>b</mi><mo>^</mo></mover><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>λ</mi><mrow><mi>i</mi><mi>o</mi><mi>u</mi></mrow></msub><msub><mi>L</mi><mrow><mi>i</mi><mi>o</mi><mi>u</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>b</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mover accent="true"><mi>b</mi><mo>^</mo></mover><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mi>λ</mi><mrow><mi>L</mi><mn>1</mn></mrow></msub><mi mathvariant="normal">∥</mi><msub><mi>b</mi><mi>i</mi></msub><mi mathvariant="normal">−</mi><msub><mover accent="true"><mi>b</mi><mo>^</mo></mover><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msub><msub><mi mathvariant="normal">∥</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">L_{box}(b_i, \hat{b}_{σ(i)})  = λ_{iou}L_{iou}(b_i,\hat{b}_{σ(i)}) + λ_{L1}\|b_i − \hat{b}_{σ(i)}\|_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3130799999999998em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3130799999999998em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.3130799999999998em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∥</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">−</span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">σ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mrow><mi>i</mi><mi>o</mi><mi>u</mi></mrow></msub><mo separator="true">,</mo><msub><mi>λ</mi><mrow><mi>L</mi><mn>1</mn></mrow></msub><mo>∈</mo><mi mathvariant="double-struck">R</mi></mrow><annotation encoding="application/x-tex">λ_{iou}, λ_{L1} \in \mathbb{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbb">R</span></span></span></span></span> 是超参数。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://www.youtube.com/watch?v=T35ba_VXkMY&amp;t=35s">DETR: End-to-End Object Detection with Transformers (Paper Explained)——Yannic Kilcher</a></p><p><a href="https://ai.facebook.com/blog/end-to-end-object-detection-with-transformers/">End-to-end object detection with Transformers——From Facebook AI‘s Blog</a></p><p><a href="https://www.zhihu.com/question/397692959/answer/1249687016">如何评价FAIR的新论文DETR？ - 梦里梦到梦的回答 - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/267156624">用Transformer做object detection：DETR - 小小理工男的文章 - 知乎</a></p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FasterRCNN_ResNet101-从代码角度解析</title>
    <link href="/2021/09/24/FasterRCNN_ResNet101-%E4%BB%8E%E4%BB%A3%E7%A0%81%E8%A7%92%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <url>/2021/09/24/FasterRCNN_ResNet101-%E4%BB%8E%E4%BB%A3%E7%A0%81%E8%A7%92%E5%BA%A6%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="fasterrcnn_resnet101-从代码角度理解"><a class="markdownIt-Anchor" href="#fasterrcnn_resnet101-从代码角度理解"></a> FasterRCNN_ResNet101 从代码角度理解</h1><p>看完论文之后，想代码角度从头好好捋一遍以ResNet为Backbone的FasterRCNN的过程。使用的代码为<a href="https://github.com/ruotianluo/pytorch-faster-rcnn">pytorch-faster-rcnn</a>，基于此版本阅读源码进行理解，首先基于demo理解网络前向传播的过程，以此来理解整个网络结构，以下是个人整理的网络结构图。由于博文结合代码，<strong>会略去函数中不相关的部分代码</strong>，完整代码参见上述代码仓库。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109242134299.jpg" alt="Faster RCNN 网络结构图" /></p><h2 id="代码入口"><a class="markdownIt-Anchor" href="#代码入口"></a> 代码入口</h2><p>首先看<code>demo.py</code>中的主函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># tools\demo.py</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    cfg.TEST.HAS_RPN = <span class="hljs-literal">True</span>  <span class="hljs-comment"># Use RPN for proposals</span><br>    args = parse_args()<br><br>    <span class="hljs-comment"># load network</span><br>    <span class="hljs-keyword">if</span> demonet == <span class="hljs-string">&#x27;vgg16&#x27;</span>:<br>        net = vgg16()<br>    <span class="hljs-keyword">elif</span> demonet == <span class="hljs-string">&#x27;res101&#x27;</span>:<br>      <span class="hljs-comment">## 本文基于此配置  调用了resnetv1和network的init，初始化了很多参数</span><br>        net = resnetv1(num_layers=<span class="hljs-number">101</span>)  <span class="hljs-comment">#  lib/nets/resnet_v1.py</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> NotImplementedError<br>    <span class="hljs-comment">##  初始化了anchor scale radio等参数  调用_init_modules</span><br>    net.create_architecture(<span class="hljs-number">21</span>, tag=<span class="hljs-string">&#x27;default&#x27;</span>, anchor_scales=[<span class="hljs-number">8</span>, <span class="hljs-number">16</span>, <span class="hljs-number">32</span>])<br><br>    net.load_state_dict(<br>        torch.load(saved_model, map_location=<span class="hljs-keyword">lambda</span> storage, loc: storage))<br><br>    net.<span class="hljs-built_in">eval</span>()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> torch.cuda.is_available():<br>        net._device = <span class="hljs-string">&#x27;cpu&#x27;</span><br>    net.to(net._device)<br>    <br>    print(<span class="hljs-string">&#x27;Loaded network &#123;:s&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(saved_model))<br><br>    im_names = [<br>        <span class="hljs-string">&#x27;000456.jpg&#x27;</span>, <span class="hljs-string">&#x27;000542.jpg&#x27;</span>, <span class="hljs-string">&#x27;001150.jpg&#x27;</span>, <span class="hljs-string">&#x27;001763.jpg&#x27;</span>, <span class="hljs-string">&#x27;004545.jpg&#x27;</span><br>    ]<br>    <span class="hljs-keyword">for</span> im_name <span class="hljs-keyword">in</span> im_names:<br>        print(<span class="hljs-string">&#x27;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#x27;</span>)<br>        print(<span class="hljs-string">&#x27;Demo for data/demo/&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(im_name))<br>        <span class="hljs-comment"># 向网络模型中传入图片开始前向传播</span><br>        demo(net, im_name)<br><br>    plt.show()<br></code></pre></td></tr></table></figure><p>可以看到，网络的搭建主要是调用两个函数<code>net = resnetv1(num_layers=101)</code>和<code>net.create_architecture(21, tag='default', anchor_scales=[8, 16, 32])</code>，之后使用<code>net.load_state_dict(torch.load(saved_model, map_location=lambda storage, loc: storage))</code>传入已经训练好的参数，最后调用<code>demo(net, im_name)</code>来给网络传入图片开始前向传播。</p><p>查看两个网络搭建函数的具体实现，可以看到<code>resnetv1()</code>是一个继承了<code>Network类</code>的模型类，而查看具体的类结构可以看到，无论父类还是子类都只是初始化了网络的部分超参数。而<code>Network类</code>有一个<code>create_architecture()</code>方法可以初始化网络的一部分超参数以及调用自身的<code>_init_modules()</code>方法来初始化RPN层以及后续的分类层，之后再初始化权重。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># lib\nets\resnet_v1.py </span><br><span class="hljs-comment"># 具体函数实现已经省略</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">resnetv1</span>(<span class="hljs-params">Network</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, num_layers=<span class="hljs-number">50</span></span>):</span><br>        Network.__init__(self)<br>        self._feat_stride = [<br>            <span class="hljs-number">16</span>,<br>        ]<br>        self._feat_compress = [<br>            <span class="hljs-number">1.</span> / <span class="hljs-built_in">float</span>(self._feat_stride[<span class="hljs-number">0</span>]),<br>        ]<br>        self._num_layers = num_layers<br>        self._net_conv_channels = <span class="hljs-number">1024</span><br>        self._fc7_channels = <span class="hljs-number">2048</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_crop_pool_layer</span>(<span class="hljs-params">self, bottom, rois</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_image_to_head</span>(<span class="hljs-params">self</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_head_to_tail</span>(<span class="hljs-params">self, pool5</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_init_head_tail</span>(<span class="hljs-params">self</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">train</span>(<span class="hljs-params">self, mode=<span class="hljs-literal">True</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_pretrained_cnn</span>(<span class="hljs-params">self, state_dict</span>):</span><br><br><span class="hljs-comment"># lib\nets\network.py</span><br><span class="hljs-comment"># 许多暂时不需要的函数已经省略</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Network</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        nn.Module.__init__(self)<br>        self._predictions = &#123;&#125;<br>        self._losses = &#123;&#125;<br>        self._anchor_targets = &#123;&#125;<br>        self._proposal_targets = &#123;&#125;<br>        self._layers = &#123;&#125;<br>        self._gt_image = <span class="hljs-literal">None</span><br>        self._act_summaries = &#123;&#125;<br>        self._score_summaries = &#123;&#125;<br>        self._event_summaries = &#123;&#125;<br>        self._image_gt_summaries = &#123;&#125;<br>        self._variables_to_fix = &#123;&#125;<br>        self._device = <span class="hljs-string">&#x27;cuda&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_add_gt_image</span>(<span class="hljs-params">self</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_add_gt_image_summary</span>(<span class="hljs-params">self</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_add_act_summary</span>(<span class="hljs-params">self, key, tensor</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_add_score_summary</span>(<span class="hljs-params">self, key, tensor</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_add_train_summary</span>(<span class="hljs-params">self, key, var</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_proposal_top_layer</span>(<span class="hljs-params">self, rpn_cls_prob, rpn_bbox_pred</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_proposal_layer</span>(<span class="hljs-params">self, rpn_cls_prob, rpn_bbox_pred</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_roi_pool_layer</span>(<span class="hljs-params">self, bottom, rois</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_roi_align_layer</span>(<span class="hljs-params">self, bottom, rois</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_anchor_target_layer</span>(<span class="hljs-params">self, rpn_cls_score</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_proposal_target_layer</span>(<span class="hljs-params">self, rois, roi_scores</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_anchor_component</span>(<span class="hljs-params">self, height, width</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_smooth_l1_loss</span>(<span class="hljs-params">self, bbox_pred, bbox_targets, bbox_inside_weights, bbox_outside_weights, sigma=<span class="hljs-number">1.0</span>, dim=[<span class="hljs-number">1</span>]</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_add_losses</span>(<span class="hljs-params">self, sigma_rpn=<span class="hljs-number">3.0</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_region_proposal</span>(<span class="hljs-params">self, net_conv</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_region_classification</span>(<span class="hljs-params">self, fc7</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_image_to_head</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">raise</span> NotImplementedError<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_head_to_tail</span>(<span class="hljs-params">self, pool5</span>):</span><br>        <span class="hljs-keyword">raise</span> NotImplementedError<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_architecture</span>(<span class="hljs-params">self, num_classes, tag=<span class="hljs-literal">None</span>, anchor_scales=(<span class="hljs-params"><span class="hljs-number">8</span>, <span class="hljs-number">16</span>, <span class="hljs-number">32</span></span>), anchor_ratios=(<span class="hljs-params"><span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span></span>)</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_init_modules</span>(<span class="hljs-params">self</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_run_summary_op</span>(<span class="hljs-params">self, val=<span class="hljs-literal">False</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_predict</span>(<span class="hljs-params">self</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, image, im_info, gt_boxes=<span class="hljs-literal">None</span>, mode=<span class="hljs-string">&#x27;TRAIN&#x27;</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init_weights</span>(<span class="hljs-params">self</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extract_head</span>(<span class="hljs-params">self, image</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_image</span>(<span class="hljs-params">self, image, im_info</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_intermediate_states</span>(<span class="hljs-params">self</span>):</span><br>      <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_summary</span>(<span class="hljs-params">self, blobs</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">train_step</span>(<span class="hljs-params">self, blobs, train_op</span>):</span><br>      <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">train_step_with_summary</span>(<span class="hljs-params">self, blobs, train_op</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">train_step_no_return</span>(<span class="hljs-params">self, blobs, train_op</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_state_dict</span>(<span class="hljs-params">self, state_dict</span>):</span><br>            <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># lib\nets\network.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_architecture</span>(<span class="hljs-params">self,</span></span><br><span class="hljs-function"><span class="hljs-params">                        num_classes,</span></span><br><span class="hljs-function"><span class="hljs-params">                        tag=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                        anchor_scales=(<span class="hljs-params"><span class="hljs-number">8</span>, <span class="hljs-number">16</span>, <span class="hljs-number">32</span></span>),</span></span><br><span class="hljs-function"><span class="hljs-params">                        anchor_ratios=(<span class="hljs-params"><span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span></span>)</span>):</span><br>    self._tag = tag<br><br>    self._num_classes = num_classes<br>    self._anchor_scales = anchor_scales<br>    self._num_scales = <span class="hljs-built_in">len</span>(anchor_scales)<br><br>    self._anchor_ratios = anchor_ratios<br>    self._num_ratios = <span class="hljs-built_in">len</span>(anchor_ratios)<br><br>    self._num_anchors = self._num_scales * self._num_ratios<br><br>    <span class="hljs-keyword">assert</span> tag != <span class="hljs-literal">None</span><br><br>    <span class="hljs-comment"># Initialize layers</span><br>    self._init_modules()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_init_modules</span>(<span class="hljs-params">self</span>):</span><br>  <span class="hljs-comment"># 定义Backbone</span><br>    self._init_head_tail()<br><br>    <span class="hljs-comment"># rpn</span><br>    self.rpn_net = nn.Conv2d(<br>        self._net_conv_channels, cfg.RPN_CHANNELS, [<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-number">1</span>)<br><br>    self.rpn_cls_score_net = nn.Conv2d(cfg.RPN_CHANNELS,<br>                                       self._num_anchors * <span class="hljs-number">2</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br><br>    self.rpn_bbox_pred_net = nn.Conv2d(cfg.RPN_CHANNELS,<br>                                       self._num_anchors * <span class="hljs-number">4</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br><br>    self.cls_score_net = nn.Linear(self._fc7_channels, self._num_classes)<br>    self.bbox_pred_net = nn.Linear(self._fc7_channels,<br>                                   self._num_classes * <span class="hljs-number">4</span>)<br><br>    self.init_weights()<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init_weights</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">normal_init</span>(<span class="hljs-params">m, mean, stddev, truncated=<span class="hljs-literal">False</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">  weight initalizer: truncated normal and random normal.</span><br><span class="hljs-string">  &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># x is a parameter</span><br>        <span class="hljs-keyword">if</span> truncated:<br>            m.weight.data.normal_().fmod_(<span class="hljs-number">2</span>).mul_(stddev).add_(<br>                mean)  <span class="hljs-comment"># not a perfect approximation</span><br>        <span class="hljs-keyword">else</span>:<br>            m.weight.data.normal_(mean, stddev)<br>        m.bias.data.zero_()<br><br>    normal_init(self.rpn_net, <span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, cfg.TRAIN.TRUNCATED)<br>    normal_init(self.rpn_cls_score_net, <span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, cfg.TRAIN.TRUNCATED)<br>    normal_init(self.rpn_bbox_pred_net, <span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, cfg.TRAIN.TRUNCATED)<br>    normal_init(self.cls_score_net, <span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, cfg.TRAIN.TRUNCATED)<br>    normal_init(self.bbox_pred_net, <span class="hljs-number">0</span>, <span class="hljs-number">0.001</span>, cfg.TRAIN.TRUNCATED)<br></code></pre></td></tr></table></figure><p>结合之前给出的网络模型结构图，可以猜测<code>resnetv1()</code>是创建了一个网络类实例，而<code>create_architecture()</code>则定义了FasterRCNN网络的大部分具体结构。再调用<code>demo(net, im_name)</code>来给网络传入输入图片。下面我们先根据<code>create_architecture()</code>查看整个网络的大部分具体结构，再查看网络传输前向传播的流程。</p><h2 id="网络结构定义"><a class="markdownIt-Anchor" href="#网络结构定义"></a> 网络结构定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># lib\nets\resnet_v1.py </span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_init_head_tail</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-comment"># choose different blocks for different number of layers</span><br>    <span class="hljs-keyword">if</span> self._num_layers == <span class="hljs-number">50</span>:<br>        self.resnet = resnet50()<br><br>    <span class="hljs-keyword">elif</span> self._num_layers == <span class="hljs-number">101</span>:<br>        self.resnet = resnet101()<br><br>    <span class="hljs-keyword">elif</span> self._num_layers == <span class="hljs-number">152</span>:<br>        self.resnet = resnet152()<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># other numbers are not supported</span><br>        <span class="hljs-keyword">raise</span> NotImplementedError<br><br>    <span class="hljs-comment"># Fix blocks 固定部分层</span><br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> self.resnet.bn1.parameters():<br>        p.requires_grad = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> self.resnet.conv1.parameters():<br>        p.requires_grad = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">assert</span> (<span class="hljs-number">0</span> &lt;= cfg.RESNET.FIXED_BLOCKS &lt; <span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">if</span> cfg.RESNET.FIXED_BLOCKS &gt;= <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> self.resnet.layer3.parameters():<br>            p.requires_grad = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> cfg.RESNET.FIXED_BLOCKS &gt;= <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> self.resnet.layer2.parameters():<br>            p.requires_grad = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> cfg.RESNET.FIXED_BLOCKS &gt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> self.resnet.layer1.parameters():<br>            p.requires_grad = <span class="hljs-literal">False</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_bn_fix</span>(<span class="hljs-params">m</span>):</span><br>        classname = m.__class__.__name__<br>        <span class="hljs-keyword">if</span> classname.find(<span class="hljs-string">&#x27;BatchNorm&#x27;</span>) != -<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> m.parameters():<br>                p.requires_grad = <span class="hljs-literal">False</span><br><br>    self.resnet.apply(set_bn_fix)<br><br>    <span class="hljs-comment"># Build resnet.</span><br>    self._layers[<span class="hljs-string">&#x27;head&#x27;</span>] = nn.Sequential(<br>        self.resnet.conv1, self.resnet.bn1, self.resnet.relu,<br>        self.resnet.maxpool, self.resnet.layer1, self.resnet.layer2,<br>        self.resnet.layer3)<br><span class="hljs-comment"># lib\nets\network.py    </span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_init_modules</span>(<span class="hljs-params">self</span>):</span><br>  <span class="hljs-comment"># 定义Backbone</span><br>    self._init_head_tail()<br><br>    <span class="hljs-comment"># rpn</span><br>    self.rpn_net = nn.Conv2d(self._net_conv_channels, cfg.RPN_CHANNELS, [<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-number">1</span>)<br><br>    self.rpn_cls_score_net = nn.Conv2d(cfg.RPN_CHANNELS, self._num_anchors * <span class="hljs-number">2</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br><br>    self.rpn_bbox_pred_net = nn.Conv2d(cfg.RPN_CHANNELS, self._num_anchors * <span class="hljs-number">4</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br><br>    <span class="hljs-comment"># classfication</span><br>    self.cls_score_net = nn.Linear(self._fc7_channels, self._num_classes)<br>    self.bbox_pred_net = nn.Linear(self._fc7_channels, self._num_classes * <span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>以上代码定义了Faster RCNN网络大部分具体结构，我们可以把它整理简化一下，结合论文阅读的了解到的结构添加上还没实现的部分，更方便理解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义Backbone </span><br>self.resnet = resnet101()<br>self._layers[<span class="hljs-string">&#x27;head&#x27;</span>] = nn.Sequential(<br>    self.resnet.conv1, self.resnet.bn1, self.resnet.relu,<br>    self.resnet.maxpool, self.resnet.layer1, self.resnet.layer2,<br>    self.resnet.layer3)<br><br><span class="hljs-comment">## <span class="hljs-doctag">TODO:</span> Anchors生成</span><br><br><span class="hljs-comment"># 定义rpn网络 </span><br>self.rpn_net = nn.Conv2d(self._net_conv_channels, cfg.RPN_CHANNELS, [<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># RPN后的分类回归网络 生成ROIs</span><br>self.rpn_cls_score_net = nn.Conv2d(cfg.RPN_CHANNELS, self._num_anchors * <span class="hljs-number">2</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br><br>self.rpn_bbox_pred_net = nn.Conv2d(cfg.RPN_CHANNELS, self._num_anchors * <span class="hljs-number">4</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br><br><span class="hljs-comment">## <span class="hljs-doctag">TODO:</span> ROI pooling</span><br><br><span class="hljs-comment"># 最后的分类回归层</span><br>self.cls_score_net = nn.Linear(self._fc7_channels, self._num_classes)<br>self.bbox_pred_net = nn.Linear(self._fc7_channels, self._num_classes * <span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>到这里，网络的结构定义已经相对明了了。下一步我们来了解前向传播的过程，先从之前找到的入口<code>demo(net, im_name)</code>开始。</p><h2 id="前向传播过程"><a class="markdownIt-Anchor" href="#前向传播过程"></a> 前向传播过程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># tools\demo.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">demo</span>(<span class="hljs-params">net, image_name</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;Detect object classes in an image using pre-computed object proposals.&quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># Load the demo image</span><br>    im_file = os.path.join(cfg.DATA_DIR, <span class="hljs-string">&#x27;demo&#x27;</span>, image_name)<br>    im = cv2.imread(im_file)<br><br>    <span class="hljs-comment"># Detect all object classes and regress object bounds</span><br>    timer = Timer()<br>    timer.tic()<br>    <span class="hljs-comment">## 调用网络开始前向传播以及接收传回的结果</span><br>    scores, boxes = im_detect(net, im)<br>    timer.toc()<br>    print(<span class="hljs-string">&#x27;Detection took &#123;:.3f&#125;s for &#123;:d&#125; object proposals&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        timer.total_time(), boxes.shape[<span class="hljs-number">0</span>]))<br><br>    <span class="hljs-comment"># Visualize detections for each class</span><br>    CONF_THRESH = <span class="hljs-number">0.8</span><br>    NMS_THRESH = <span class="hljs-number">0.3</span><br>    <span class="hljs-keyword">for</span> cls_ind, cls <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(CLASSES[<span class="hljs-number">1</span>:]):<br>        cls_ind += <span class="hljs-number">1</span>  <span class="hljs-comment"># because we skipped background</span><br>        cls_boxes = boxes[:, <span class="hljs-number">4</span> * cls_ind:<span class="hljs-number">4</span> * (cls_ind + <span class="hljs-number">1</span>)]<br>        cls_scores = scores[:, cls_ind]<br>        dets = np.hstack((cls_boxes,<br>                          cls_scores[:, np.newaxis])).astype(np.float32)<br>        keep = nms(<br>            torch.from_numpy(cls_boxes), torch.from_numpy(cls_scores),<br>            NMS_THRESH)<br>        dets = dets[keep.numpy(), :]<br>        vis_detections(im, cls, dets, thresh=CONF_THRESH)<br></code></pre></td></tr></table></figure><p>进一步查看后，发现在<code>demo()</code>方法中只有一条语句涉及网络调用<code>scores, boxes = im_detect(net, im)</code>。那么我们下一步就基于这个函数进行研究。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># lib\model\test.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_detect</span>(<span class="hljs-params">net, im</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;Convert an image and RoIs within that image into network inputs.&quot;&quot;&quot;</span><br>    blobs, im_scales = _get_blobs(im)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(im_scales) == <span class="hljs-number">1</span>, <span class="hljs-string">&quot;Only single-image batch implemented&quot;</span><br><br>    im_blob = blobs[<span class="hljs-string">&#x27;data&#x27;</span>]<br>    blobs[<span class="hljs-string">&#x27;im_info&#x27;</span>] = np.array(<br>        [im_blob.shape[<span class="hljs-number">1</span>], im_blob.shape[<span class="hljs-number">2</span>], im_scales[<span class="hljs-number">0</span>]], dtype=np.float32)<br><br>    <span class="hljs-comment"># 模型传入图片进行计算</span><br>    _, scores, bbox_pred, rois = net.test_image(blobs[<span class="hljs-string">&#x27;data&#x27;</span>],<br>                                                blobs[<span class="hljs-string">&#x27;im_info&#x27;</span>])<br><br>    <span class="hljs-comment"># 从ROI中提取bounding_box</span><br>    boxes = rois[:, <span class="hljs-number">1</span>:<span class="hljs-number">5</span>] / im_scales[<span class="hljs-number">0</span>]<br>    scores = np.reshape(scores, [scores.shape[<span class="hljs-number">0</span>], -<span class="hljs-number">1</span>])<br>    bbox_pred = np.reshape(bbox_pred, [bbox_pred.shape[<span class="hljs-number">0</span>], -<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">if</span> cfg.TEST.BBOX_REG:<br>        <span class="hljs-comment"># Apply bounding-box regression deltas 将预测的偏移应用到boundingbox上</span><br>        box_deltas = bbox_pred<br>        <span class="hljs-comment"># 传入预测框和偏移量</span><br>        pred_boxes = bbox_transform_inv(<br>            torch.from_numpy(boxes), torch.from_numpy(box_deltas)).numpy()<br>        pred_boxes = _clip_boxes(pred_boxes, im.shape) <span class="hljs-comment"># 防止anchor超出图片</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># Simply repeat the boxes, once for each class</span><br>        pred_boxes = np.tile(boxes, (<span class="hljs-number">1</span>, scores.shape[<span class="hljs-number">1</span>]))<br><br>    <span class="hljs-keyword">return</span> scores, pred_boxes<br></code></pre></td></tr></table></figure><p>这个函数的逻辑也比较清晰，首先对传入的图片进行一些处理，再将其送入<code>net.test_image()</code>函数中进行前向传播，得到分类分数scores，RPN预测的ROI框坐标rois以及相应预测的框偏移量bbox_pred，在使用<code>bbox_transform_inv()</code>函数转换成最终的预测边界框。关于<code>bbox_transform_inv()</code>这个函数，实现逻辑比较简单，就不贴源码了。它的主要作用是输入一组anchors（每个的形式为左上x，y，右下x，y）和一组deltas（anchors对应的偏移量，每个的形式为dx，dy，dw，dh），返回加上偏移量后的正确的预测边界框（每个的形式为左上x，y，右下x，y）。所以我们的下一步是去<code>net.test_image()</code>中寻找模型是如何进行前向传播的。</p><p><code>net.test_image()</code>之前在<code>Network()</code>类的结构中就看到过，我们来看看他的具体实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># lib\nets\network.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_image</span>(<span class="hljs-params">self, image, im_info</span>):</span><br>    self.<span class="hljs-built_in">eval</span>()<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        self.forward(image, im_info, <span class="hljs-literal">None</span>, mode=<span class="hljs-string">&#x27;TEST&#x27;</span>)<br>    cls_score, cls_prob, bbox_pred, rois = self._predictions[<span class="hljs-string">&quot;cls_score&quot;</span>].data.cpu().numpy(), \<br>                                                     self._predictions[<span class="hljs-string">&#x27;cls_prob&#x27;</span>].data.cpu().numpy(), \<br>                                                     self._predictions[<span class="hljs-string">&#x27;bbox_pred&#x27;</span>].data.cpu().numpy(), \<br>                                                     self._predictions[<span class="hljs-string">&#x27;rois&#x27;</span>].data.cpu().numpy()<br>    <span class="hljs-keyword">return</span> cls_score, cls_prob, bbox_pred, rois<br></code></pre></td></tr></table></figure><p>可以看到，他的主要逻辑就是调用<code>self.forward(image, im_info, None, mode='TEST')</code>之后，读出经前向传播后储存在类中的预测返回值cls_score，cls_prob，bbox_pred，rois。那么我们继续往下看forward函数的实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># lib\nets\network.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, image, im_info, gt_boxes=<span class="hljs-literal">None</span>, mode=<span class="hljs-string">&#x27;TRAIN&#x27;</span></span>):</span><br>    self._image_gt_summaries[<span class="hljs-string">&#x27;image&#x27;</span>] = image<br>    self._image_gt_summaries[<span class="hljs-string">&#x27;gt_boxes&#x27;</span>] = gt_boxes<br>    self._image_gt_summaries[<span class="hljs-string">&#x27;im_info&#x27;</span>] = im_info<br>    <br>    <span class="hljs-comment"># RGB BGR 输入图像预处理</span><br>    self._image = torch.from_numpy(image.transpose([<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>,<br>                                                    <span class="hljs-number">2</span>])).to(self._device)<br>    self._im_info = im_info  <span class="hljs-comment"># No need to change; actually it can be an list</span><br>    self._gt_boxes = torch.from_numpy(gt_boxes).to(<br>        self._device) <span class="hljs-keyword">if</span> gt_boxes <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <br>    self._mode = mode<br>    <br>    <span class="hljs-comment"># 主要的前向传播过程</span><br>    rois, cls_prob, bbox_pred = self._predict()<br>    <br>    <span class="hljs-keyword">if</span> mode == <span class="hljs-string">&#x27;TEST&#x27;</span>:<br>        stds = bbox_pred.data.new(cfg.TRAIN.BBOX_NORMALIZE_STDS).repeat(<br>            self._num_classes).unsqueeze(<span class="hljs-number">0</span>).expand_as(bbox_pred)<br>        means = bbox_pred.data.new(cfg.TRAIN.BBOX_NORMALIZE_MEANS).repeat(<br>            self._num_classes).unsqueeze(<span class="hljs-number">0</span>).expand_as(bbox_pred)<br>        self._predictions[<span class="hljs-string">&quot;bbox_pred&quot;</span>] = bbox_pred.mul(stds).add(means)<br>    <span class="hljs-keyword">else</span>:<br>        self._add_losses()  <span class="hljs-comment"># compute losses</span><br></code></pre></td></tr></table></figure><p>可以看到主要的前向传播都在<code>self._predict()</code>中，下一步查看这个函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># lib\nets\network.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_predict</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-comment"># This is just _build_network in tf-faster-rcnn</span><br>    <span class="hljs-comment"># Faster RCNN rpn出rois roihead出cls和bbox</span><br>    torch.backends.cudnn.benchmark = <span class="hljs-literal">False</span><br>    net_conv = self._image_to_head() <span class="hljs-comment"># 得到特征图 通道数变为1024  H W缩小16倍</span><br><br>    <span class="hljs-comment"># build the anchors for the image</span><br>    self._anchor_component(net_conv.size(<span class="hljs-number">2</span>), net_conv.size(<span class="hljs-number">3</span>))  <span class="hljs-comment"># 传入特征图的HW</span><br><br>    rois = self._region_proposal(net_conv) <span class="hljs-comment"># H*W*A,5  预测的边界框 前缀1</span><br>    <span class="hljs-keyword">if</span> cfg.POOLING_MODE == <span class="hljs-string">&#x27;align&#x27;</span>:<br>        pool5 = self._roi_align_layer(net_conv, rois)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># Tensor[K, C, output_size[0], output_size[1]]: The pooled RoIs.</span><br>        pool5 = self._roi_pool_layer(net_conv, rois)<br><br>    <span class="hljs-keyword">if</span> self._mode == <span class="hljs-string">&#x27;TRAIN&#x27;</span>:<br>        torch.backends.cudnn.benchmark = <span class="hljs-literal">True</span>  <span class="hljs-comment"># benchmark because now the input size are fixed</span><br>    fc7 = self._head_to_tail(pool5)  <span class="hljs-comment"># resnetv1</span><br><br>    cls_prob, bbox_pred = self._region_classification(fc7)<br><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> self._predictions.keys():<br>        self._score_summaries[k] = self._predictions[k]<br><br>    <span class="hljs-keyword">return</span> rois, cls_prob, bbox_pred<br></code></pre></td></tr></table></figure><p>可以看到，这个函数中包括了大部分的Faster RCNN前向传播的过程，包括Backbone生成feature map，RPN网络，ROI pooling等，接下来我们深入分析这个函数，来理解前向传播的过程以及网络的整体结构。</p><p>分析<code>_predict(self)</code>之后，它的主要代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Backbone部分 得到feature_map</span><br>net_conv = self._image_to_head() <span class="hljs-comment"># 得到特征图 通道数变为1024  H W缩小16倍</span><br><br><span class="hljs-comment"># 生成anchors</span><br>self._anchor_component(net_conv.size(<span class="hljs-number">2</span>), net_conv.size(<span class="hljs-number">3</span>))  <span class="hljs-comment"># 传入特征图的HW</span><br><br><span class="hljs-comment"># RPN网络 根据feature_map生成ROIs</span><br>rois = self._region_proposal(net_conv) <span class="hljs-comment"># H*W*A,5  预测的边界框 前缀</span><br><br><span class="hljs-comment"># 选择使用ROI_Aligin或者ROI_pooling</span><br><span class="hljs-keyword">if</span> cfg.POOLING_MODE == <span class="hljs-string">&#x27;align&#x27;</span>:<br>    pool5 = self._roi_align_layer(net_conv, rois)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># Tensor[K, C, output_size[0], output_size[1]]: The pooled RoIs.</span><br>    pool5 = self._roi_pool_layer(net_conv, rois)<br><br><span class="hljs-comment"># fc layer 这里使用的是resnet的layer4</span><br>fc7 = self._head_to_tail(pool5)  <span class="hljs-comment"># resnetv1</span><br><br><span class="hljs-comment"># 最后的两个分类回归层</span><br>cls_prob, bbox_pred = self._region_classification(fc7)<br></code></pre></td></tr></table></figure><h3 id="backbone"><a class="markdownIt-Anchor" href="#backbone"></a> BackBone</h3><p><code>net_conv = self._image_to_head()</code>这句语句是调用模型的<code>_image_to_head()</code>函数来得到特征图，而这个函数在原始父类<code>Network()</code>中只是声明了并没有实现，具体实现在子类<code>resnetv1()</code>中，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># lin\nets\resnetv1.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_image_to_head</span>(<span class="hljs-params">self</span>):</span><br>    net_conv = self._layers[<span class="hljs-string">&#x27;head&#x27;</span>](self._image)<br>    self._act_summaries[<span class="hljs-string">&#x27;conv&#x27;</span>] = net_conv<br><br>    <span class="hljs-keyword">return</span> net_conv<br></code></pre></td></tr></table></figure><p>这里传入的<code>self._image</code>已经在<code>forward()</code>函数中设定好，由函数内容可得具体Backbone网络为<code>self._layers['head']</code>，之前已经看到其定义如下，使用这种方式定义头部网络可以方便地更换Backbone。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Build resnet.</span><br>self._layers[<span class="hljs-string">&#x27;head&#x27;</span>] = nn.Sequential(<br>    self.resnet.conv1, self.resnet.bn1, self.resnet.relu,<br>    self.resnet.maxpool, self.resnet.layer1, self.resnet.layer2,<br>    self.resnet.layer3)<br></code></pre></td></tr></table></figure><p>这里使用了ResNet的conv1层到layer3层的网络作为Backbone，其网络定义如下所示，最后得到的将是宽高缩小16倍，通道数增加到1024维的feature map。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109261341543.png" alt="" /></p><h3 id="生成anchor"><a class="markdownIt-Anchor" href="#生成anchor"></a> 生成Anchor</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 生成anchors</span><br>self._anchor_component(net_conv.size(<span class="hljs-number">2</span>), net_conv.size(<span class="hljs-number">3</span>))  <span class="hljs-comment"># 传入特征图的HW</span><br><br><span class="hljs-comment"># lib\nets\network.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_anchor_component</span>(<span class="hljs-params">self, height, width</span>):</span><br>    <span class="hljs-comment"># just to get the shape right</span><br>    <span class="hljs-comment">#height = int(math.ceil(self._im_info.data[0, 0] / self._feat_stride[0]))</span><br>    <span class="hljs-comment">#width = int(math.ceil(self._im_info.data[0, 1] / self._feat_stride[0]))</span><br>    anchors, anchor_length = generate_anchors_pre(height, width,<br>                                           self._feat_stride, self._anchor_scales, self._anchor_ratios)<br>    self._anchors = torch.from_numpy(anchors).to(self._device)  <span class="hljs-comment"># h*w*A,4</span><br>    self._anchor_length = anchor_length <span class="hljs-comment"># anchors的总个数# h*w*A</span><br><br><span class="hljs-comment"># lib\layer_utils\snippets.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_anchors_pre</span>(<span class="hljs-params">height, width, feat_stride,</span></span><br><span class="hljs-function"><span class="hljs-params">                         anchor_scales=(<span class="hljs-params"><span class="hljs-number">8</span>, <span class="hljs-number">16</span>, <span class="hljs-number">32</span></span>),</span></span><br><span class="hljs-function"><span class="hljs-params">                         anchor_ratios=(<span class="hljs-params"><span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span></span>)</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot; </span><br><span class="hljs-string">    A wrapper function to generate anchors given different scales</span><br><span class="hljs-string">    Also return the number of anchors in variable &#x27;length&#x27;</span><br><span class="hljs-string">  &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 生成默认的一组anchors</span><br>    anchors = generate_anchors(ratios=np.array(anchor_ratios), scales=np.array(anchor_scales)) <span class="hljs-comment"># 9，4</span><br>    A = anchors.shape[<span class="hljs-number">0</span>] <span class="hljs-comment"># 9</span><br>    shift_x = np.arange(<span class="hljs-number">0</span>, width) * feat_stride  <span class="hljs-comment"># 0-w，扩大16倍即恢复到原图大小</span><br>    shift_y = np.arange(<span class="hljs-number">0</span>, height) * feat_stride<br>    shift_x, shift_y = np.meshgrid(shift_x, shift_y)   <span class="hljs-comment"># h，w</span><br>    shifts = np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(),<br>                        shift_y.ravel())).transpose()  <span class="hljs-comment"># h*w,4 均为左上坐标点即[左上x,y，左上x,y]</span><br>    K = shifts.shape[<span class="hljs-number">0</span>]  <span class="hljs-comment"># h*w 个像素点 需要 anchor</span><br>    <span class="hljs-comment"># width changes faster, so here it is H, W, C</span><br>    <span class="hljs-comment"># 将每个[左上x,y，左上x,y]加上了以0，0为左上坐标的一组锚框，得到K，A，4的最终锚框。</span><br>    anchors = anchors.reshape((<span class="hljs-number">1</span>, A, <span class="hljs-number">4</span>)) + shifts.reshape((<span class="hljs-number">1</span>, K, <span class="hljs-number">4</span>)).transpose((<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>))  <span class="hljs-comment"># K,A,4</span><br>    anchors = anchors.reshape((K * A, <span class="hljs-number">4</span>)).astype(np.float32, copy=<span class="hljs-literal">False</span>)<br>    length = np.int32(anchors.shape[<span class="hljs-number">0</span>]) <span class="hljs-comment"># k*A h*w*A</span><br><br>    <span class="hljs-keyword">return</span> anchors, length<br><br><span class="hljs-comment"># lib\layer_utils\generate_anchors.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_anchors</span>(<span class="hljs-params">base_size=<span class="hljs-number">16</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                     ratios=[<span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>],</span></span><br><span class="hljs-function"><span class="hljs-params">                     scales=<span class="hljs-number">2</span>**np.arange(<span class="hljs-params"><span class="hljs-number">3</span>, <span class="hljs-number">6</span></span>)</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    以默认16的长宽生成一组anchors（对应一个像素点，默认生成9个）</span><br><span class="hljs-string">  Generate anchor (reference) windows by enumerating aspect ratios X</span><br><span class="hljs-string">  scales wrt a reference (0, 0, 15, 15) window.</span><br><span class="hljs-string">  &quot;&quot;&quot;</span><br><br>    base_anchor = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, base_size, base_size]) - <span class="hljs-number">1</span> <span class="hljs-comment"># 基础anchor框，宽高均为16</span><br>    ratio_anchors = _ratio_enum(base_anchor, ratios)   <span class="hljs-comment"># 3,4 </span><br>    anchors = np.vstack([<br>        _scale_enum(ratio_anchors[i, :], scales)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ratio_anchors.shape[<span class="hljs-number">0</span>])<br>    ])  <span class="hljs-comment"># 遍历三个anchor，每一个anchor三个放缩</span><br>    <span class="hljs-keyword">return</span> anchors  <span class="hljs-comment"># 9，4</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_ratio_enum</span>(<span class="hljs-params">anchor, ratios</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">  Enumerate a set of anchors for each aspect ratio wrt an anchor.</span><br><span class="hljs-string">  为每个长宽比枚举一组锚点。</span><br><span class="hljs-string">  &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># (0, 0, 15, 15)</span><br>    w, h, x_ctr, y_ctr = _whctrs(anchor)  <span class="hljs-comment"># 16 16 7.5 7.5</span><br>    size = w * h<br>    size_ratios = size / ratios <span class="hljs-comment"># 3，</span><br>    ws = np.<span class="hljs-built_in">round</span>(np.sqrt(size_ratios))  <span class="hljs-comment"># round 四舍五入  3，</span><br>    hs = np.<span class="hljs-built_in">round</span>(ws * ratios)  <span class="hljs-comment">#  元素对元素 3，</span><br>    <span class="hljs-comment"># 以原来的中心为中心 生成比例不同的anchor</span><br>    anchors = _mkanchors(ws, hs, x_ctr, y_ctr)<br>    <span class="hljs-keyword">return</span> anchors<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_scale_enum</span>(<span class="hljs-params">anchor, scales</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">  Enumerate a set of anchors for each scale wrt an anchor.</span><br><span class="hljs-string">  为每个缩放比枚举一组锚点。</span><br><span class="hljs-string">  &quot;&quot;&quot;</span><br><br>    w, h, x_ctr, y_ctr = _whctrs(anchor)<br>    ws = w * scales<br>    hs = h * scales<br>    anchors = _mkanchors(ws, hs, x_ctr, y_ctr)<br>    <span class="hljs-keyword">return</span> anchors<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_whctrs</span>(<span class="hljs-params">anchor</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">  Return width, height, x center, and y center for an anchor (window).</span><br><span class="hljs-string">  给定anchor(左上x，y  右下x，y)，返回宽高和中心坐标</span><br><span class="hljs-string">  &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># (0, 0, 15, 15)</span><br>    w = anchor[<span class="hljs-number">2</span>] - anchor[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span><br>    h = anchor[<span class="hljs-number">3</span>] - anchor[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span><br>    x_ctr = anchor[<span class="hljs-number">0</span>] + <span class="hljs-number">0.5</span> * (w - <span class="hljs-number">1</span>)<br>    y_ctr = anchor[<span class="hljs-number">1</span>] + <span class="hljs-number">0.5</span> * (h - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> w, h, x_ctr, y_ctr<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_mkanchors</span>(<span class="hljs-params">ws, hs, x_ctr, y_ctr</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    给定宽高和中心坐标，返回(左上x，y  右下x，y)</span><br><span class="hljs-string">  Given a vector of widths (ws) and heights (hs) around a center</span><br><span class="hljs-string">  (x_ctr, y_ctr), output a set of anchors (windows).</span><br><span class="hljs-string">  &quot;&quot;&quot;</span><br><br>    ws = ws[:, np.newaxis] <span class="hljs-comment"># 增加1维 n，1</span><br>    hs = hs[:, np.newaxis]<br>    anchors = np.hstack((x_ctr - <span class="hljs-number">0.5</span> * (ws - <span class="hljs-number">1</span>), y_ctr - <span class="hljs-number">0.5</span> * (hs - <span class="hljs-number">1</span>),<br>                         x_ctr + <span class="hljs-number">0.5</span> * (ws - <span class="hljs-number">1</span>), y_ctr + <span class="hljs-number">0.5</span> * (hs - <span class="hljs-number">1</span>)))  <span class="hljs-comment"># 左上x，y  右下x，y</span><br>    <span class="hljs-keyword">return</span> anchors <span class="hljs-comment"># n个anchor坐标（n，4）</span><br></code></pre></td></tr></table></figure><p>以上是根据<code>self._anchor_component(net_conv.size(2), net_conv.size(3))</code>进行溯源得到的一些列anchor生成函数。</p><p>大部分的操作结合注释和代码应该比较好懂，比较困扰我的是这里的<code>generate_anchors_pre()</code>中的操作，这里我的理解是每一个图片经过backbone之后都缩小了16倍，所以feature map的每一个点都是对16*16区域的投射，也相当于把一小块16*16*3的区域映射为了一个1024维的向量（参考之前的resnet backbone，实际上还有一个维度转换的卷积层），然后对每一个点生成一组基础大小为16*16的锚框，所以要对得到的feature map的宽高乘以16，也就是<code>feat_stride</code>的值。这样也解释了之后可以直接对RPN后的feature map进行分类和回归，也就是可以直接对feature map上的一个点进行分类（是物体或背景）和回归（anchor的偏移值）。</p><h3 id="rpn网络"><a class="markdownIt-Anchor" href="#rpn网络"></a> RPN网络</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python">rois = self._region_proposal(net_conv) <span class="hljs-comment"># H*W*A,5  预测的边界框 前缀1</span><br><br><span class="hljs-comment"># network.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_region_proposal</span>(<span class="hljs-params">self, net_conv</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    self.rpn_net = nn.Conv2d(self._net_conv_channels, cfg.RPN_CHANNELS, [3, 3], padding=1)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    rpn = F.relu(self.rpn_net(net_conv)) <span class="hljs-comment"># 3*3卷积 大小不变 维度变换为cfg.RPN_CHANNELS,</span><br>    self._act_summaries[<span class="hljs-string">&#x27;rpn&#x27;</span>] = rpn<br><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    self._num_anchors 每一个像素点对应的anchors</span><br><span class="hljs-string">    self.rpn_cls_score_net = nn.Conv2d(cfg.RPN_CHANNELS, self._num_anchors * 2, [1, 1])</span><br><span class="hljs-string">    self.rpn_bbox_pred_net = nn.Conv2d(cfg.RPN_CHANNELS, self._num_anchors * 4, [1, 1])</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    rpn_cls_score = self.rpn_cls_score_net(rpn)  <span class="hljs-comment"># 是否为物体</span><br>    <span class="hljs-comment"># batch * (num_anchors * 2) * h * w  [batch,(num_anchors * 2),h,w]</span><br><br>    <span class="hljs-comment"># change it so that the score has 2 as its channel size</span><br>    rpn_cls_score_reshape = rpn_cls_score.view(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, rpn_cls_score.size()[-<span class="hljs-number">1</span>])  <br>    <span class="hljs-comment"># batch * 2 * (num_anchors*h) * w  [1,2, h*num_anchors*batch ,w]</span><br>    <span class="hljs-comment"># 这里应该是默认batch为1了</span><br>    rpn_cls_prob_reshape = F.softmax(rpn_cls_score_reshape, dim=<span class="hljs-number">1</span>) <span class="hljs-comment"># 物体类或背景类</span><br><br>    <span class="hljs-comment"># Move channel to the last dimenstion, to fit the input of python functions</span><br>    rpn_cls_prob = rpn_cls_prob_reshape.view_as(rpn_cls_score).permute(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>)  <br>    <span class="hljs-comment"># batch * h * w * (num_anchors * 2)</span><br>    rpn_cls_score = rpn_cls_score.permute(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>)  <br>    <span class="hljs-comment"># batch * h * w * (num_anchors * 2)</span><br>    rpn_cls_score_reshape = rpn_cls_score_reshape.permute(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>).contiguous()  <br>    <span class="hljs-comment"># batch * (num_anchors*h) * w * 2</span><br>    rpn_cls_pred = torch.<span class="hljs-built_in">max</span>(rpn_cls_score_reshape.view(-<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># 得到最大值的index 也就是当前像素点的当前anchor是物体还是背景</span><br><br>    rpn_bbox_pred = self.rpn_bbox_pred_net(rpn) <span class="hljs-comment"># 偏移量</span><br>    rpn_bbox_pred = rpn_bbox_pred.permute(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>).contiguous()  <br>    <span class="hljs-comment"># batch * h * w * (num_anchors*4)</span><br><br>    <span class="hljs-keyword">if</span> self._mode == <span class="hljs-string">&#x27;TRAIN&#x27;</span>:<br>        rois, roi_scores = self._proposal_layer(rpn_cls_prob, rpn_bbox_pred)  <br>        <span class="hljs-comment"># rois, roi_scores are varible</span><br>        rpn_labels = self._anchor_target_layer(rpn_cls_score)<br>        rois, _ = self._proposal_target_layer(rois, roi_scores)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> cfg.TEST.MODE == <span class="hljs-string">&#x27;nms&#x27;</span>:<br>            rois, _ = self._proposal_layer(rpn_cls_prob, rpn_bbox_pred)  <span class="hljs-comment"># H*W*A,5  前缀0</span><br>        <span class="hljs-keyword">elif</span> cfg.TEST.MODE == <span class="hljs-string">&#x27;top&#x27;</span>:<br>            rois, _ = self._proposal_top_layer(rpn_cls_prob, rpn_bbox_pred)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> NotImplementedError<br><br>    self._predictions[<span class="hljs-string">&quot;rpn_cls_score&quot;</span>] = rpn_cls_score<br>    self._predictions[<span class="hljs-string">&quot;rpn_cls_score_reshape&quot;</span>] = rpn_cls_score_reshape<br>    self._predictions[<span class="hljs-string">&quot;rpn_cls_prob&quot;</span>] = rpn_cls_prob<br>    self._predictions[<span class="hljs-string">&quot;rpn_cls_pred&quot;</span>] = rpn_cls_pred<br>    self._predictions[<span class="hljs-string">&quot;rpn_bbox_pred&quot;</span>] = rpn_bbox_pred<br>    self._predictions[<span class="hljs-string">&quot;rois&quot;</span>] = rois<br><br>    <span class="hljs-keyword">return</span> rois<br></code></pre></td></tr></table></figure><p>RPN网络中大多数的网络层结构已经在注释中给出，先经由一个3*3的卷积层改变其维度，不改变其大小，再是一个ReLU，接着就像上文说的，一个点对应一个区域进行分类和回归，之后根据分类和回归的结果经由<code>self._proposal_layer()</code>得到ROIs。我们这里暂时不考虑训练时的情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># network.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_proposal_layer</span>(<span class="hljs-params">self, rpn_cls_prob, rpn_bbox_pred</span>):</span><br>    rois, rpn_scores = proposal_layer(rpn_cls_prob, rpn_bbox_pred, self._im_info, self._mode,<br>                                     self._feat_stride, self._anchors, self._num_anchors)<br>    <span class="hljs-keyword">return</span> rois, rpn_scores<br><br><span class="hljs-comment"># lib\layer_utils\proposal_layer.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">proposal_layer</span>(<span class="hljs-params">rpn_cls_prob, rpn_bbox_pred, im_info, cfg_key, _feat_stride,</span></span><br><span class="hljs-function"><span class="hljs-params">                   anchors, num_anchors</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    A simplified version compared to fast/er RCNN</span><br><span class="hljs-string">    For details please see the technical report</span><br><span class="hljs-string">  &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(cfg_key) == <span class="hljs-built_in">bytes</span>:<br>        cfg_key = cfg_key.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    pre_nms_topN = cfg[cfg_key].RPN_PRE_NMS_TOP_N<br>    post_nms_topN = cfg[cfg_key].RPN_POST_NMS_TOP_N<br>    nms_thresh = cfg[cfg_key].RPN_NMS_THRESH<br><br>    <span class="hljs-comment"># Get the scores and bounding boxes</span><br>    scores = rpn_cls_prob[:, :, :, num_anchors:]  <span class="hljs-comment"># batch * h * w * (num_anchors)</span><br>    rpn_bbox_pred = rpn_bbox_pred.view((-<span class="hljs-number">1</span>, <span class="hljs-number">4</span>))  <span class="hljs-comment"># batch*h*w*num_anchors ,(4)</span><br>    scores = scores.contiguous().view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># batch * h * w * (num_anchors), 1</span><br>    proposals = bbox_transform_inv(anchors, rpn_bbox_pred)   <span class="hljs-comment"># 预测的边界框</span><br>    proposals = clip_boxes(proposals, im_info[:<span class="hljs-number">2</span>])<br><br>    <span class="hljs-comment"># Pick the top region proposals</span><br>    scores, order = scores.view(-<span class="hljs-number">1</span>).sort(descending=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">if</span> pre_nms_topN &gt; <span class="hljs-number">0</span>:<br>        order = order[:pre_nms_topN]<br>        scores = scores[:pre_nms_topN].view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    proposals = proposals[order.data, :]<br><br>    <span class="hljs-comment"># Non-maximal suppression</span><br>    keep = nms(proposals, scores.squeeze(<span class="hljs-number">1</span>), nms_thresh)<br><br>    <span class="hljs-comment"># Pick th top region proposals after NMS</span><br>    <span class="hljs-keyword">if</span> post_nms_topN &gt; <span class="hljs-number">0</span>:<br>        keep = keep[:post_nms_topN]<br>    proposals = proposals[keep, :]<br>    scores = scores[keep, ]<br><br>    <span class="hljs-comment"># Only support single image as input</span><br>    batch_inds = proposals.new_zeros(proposals.size(<span class="hljs-number">0</span>), <span class="hljs-number">1</span>)<br>    blob = torch.cat((batch_inds, proposals), <span class="hljs-number">1</span>)  <span class="hljs-comment"># H*W*A,5  前缀0，为了之后pooling方便</span><br><br>    <span class="hljs-keyword">return</span> blob, scores<br></code></pre></td></tr></table></figure><p>主要的操作还是对ROIs进行了一个NMS操作，选出得分最高的几个anchors作为proposal。</p><h3 id="roi_pooling"><a class="markdownIt-Anchor" href="#roi_pooling"></a> ROI_pooling</h3><p>这里可以选择使用ROI_Aligin或者ROI_pooling，这里是二者都是直接调用的pytorch中的函数，具体实现可以去参阅pytorch的文档。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 选择使用ROI_Aligin或者ROI_pooling</span><br><span class="hljs-keyword">if</span> cfg.POOLING_MODE == <span class="hljs-string">&#x27;align&#x27;</span>:<br>    pool5 = self._roi_align_layer(net_conv, rois)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># Tensor[K, C, output_size[0], output_size[1]]: The pooled RoIs.</span><br>    pool5 = self._roi_pool_layer(net_conv, rois)<br><br><span class="hljs-comment"># network.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_roi_pool_layer</span>(<span class="hljs-params">self, bottom, rois</span>):</span><br>    <span class="hljs-keyword">return</span> RoIPool((cfg.POOLING_SIZE, cfg.POOLING_SIZE), <span class="hljs-number">1.0</span> / <span class="hljs-number">16.0</span>)(bottom, rois)  <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_roi_align_layer</span>(<span class="hljs-params">self, bottom, rois</span>):</span><br>    <span class="hljs-keyword">return</span> RoIAlign((cfg.POOLING_SIZE, cfg.POOLING_SIZE), <span class="hljs-number">1.0</span> / <span class="hljs-number">16.0</span>, <span class="hljs-number">0</span>)(bottom, rois)<br></code></pre></td></tr></table></figure><h3 id="fc-layer-resnetlayer4"><a class="markdownIt-Anchor" href="#fc-layer-resnetlayer4"></a> fc layer (resnet.layer4)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># fc layer 这里使用的是resnet的layer4</span><br>fc7 = self._head_to_tail(pool5)  <span class="hljs-comment"># resnetv1</span><br><br><span class="hljs-comment"># resnet_v1.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_head_to_tail</span>(<span class="hljs-params">self, pool5</span>):</span><br>    fc7 = self.resnet.layer4(pool5).mean(<span class="hljs-number">3</span>).mean(<br>        <span class="hljs-number">2</span>)  <span class="hljs-comment"># average pooling after layer4</span><br>    <span class="hljs-keyword">return</span> fc7<br></code></pre></td></tr></table></figure><p>fc7层就是使用了之前没有用到的ResNet的layer4并做了平均汇聚操作。</p><h3 id="最后的分类以及回归层"><a class="markdownIt-Anchor" href="#最后的分类以及回归层"></a> 最后的分类以及回归层</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 最后的两个分类回归层</span><br>cls_prob, bbox_pred = self._region_classification(fc7)<br><br><span class="hljs-comment"># network.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_region_classification</span>(<span class="hljs-params">self, fc7</span>):</span><br>    cls_score = self.cls_score_net(fc7)<br>    cls_pred = torch.<span class="hljs-built_in">max</span>(cls_score, <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>]<br>    cls_prob = F.softmax(cls_score, dim=<span class="hljs-number">1</span>)<br>    bbox_pred = self.bbox_pred_net(fc7)<br><br>    self._predictions[<span class="hljs-string">&quot;cls_score&quot;</span>] = cls_score<br>    self._predictions[<span class="hljs-string">&quot;cls_pred&quot;</span>] = cls_pred<br>    self._predictions[<span class="hljs-string">&quot;cls_prob&quot;</span>] = cls_prob<br>    self._predictions[<span class="hljs-string">&quot;bbox_pred&quot;</span>] = bbox_pred<br><br>    <span class="hljs-keyword">return</span> cls_prob, bbox_pred<br>  <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">self.cls_score_net = nn.Linear(self._fc7_channels, self._num_classes)</span><br><span class="hljs-string">self.bbox_pred_net = nn.Linear(self._fc7_channels, self._num_classes * 4)</span><br><span class="hljs-string">&quot;&quot;&quot;</span>  <br></code></pre></td></tr></table></figure><p>最后的分类回归层做法类似于RPN中，只是使用了线性层而不是1*1卷积层，同样这里和之前都是回归预测四个偏移量。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>本篇博客从代码的角度结合一次正向传播的过程理解了以ResNet为Backbone的Faster RCNN的结构，理完正向传播过程之后结合文章一开始的结构图应该能有更深刻的了解，这次阅读代码之旅对我理解Faster RCNN的帮助很大，希望也能对你有帮助。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-Bottom-Up and Top-Down Attention for Image Captioning and Visual Question Answering</title>
    <link href="/2021/09/22/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Bottom-up%20Attention%20for%20VQA/"/>
    <url>/2021/09/22/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Bottom-up%20Attention%20for%20VQA/</url>
    
    <content type="html"><![CDATA[<h1 id="bottom-up-and-top-down-attention-for-image-captioning-and-visual-question-answering"><a class="markdownIt-Anchor" href="#bottom-up-and-top-down-attention-for-image-captioning-and-visual-question-answering"></a> Bottom-Up and Top-Down Attention for Image Captioning and Visual Question Answering</h1><p>本文与另一篇<a href="https://blog.pokestar.wang/2021/09/13/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Tips%20and%20Tricks%20for%20VQA/">Tips and Tricks for VQA</a>是相同的模型/作者，那一篇具体阐述了VQA的模型以及相关trick，本文主要增加讲解了Faster RCNN的引入以及在image caption上的效果。</p><h2 id="论文要点"><a class="markdownIt-Anchor" href="#论文要点"></a> 论文要点</h2><p>相比以往的“自上而下”的注意力机制（即以非视觉的文本问题/任务为导向），增加了“自下而上”的注意力（即从视觉中提取注意力机制），而这种自下而上的注意力，一般指Faster RCNN。</p><h2 id="相关工作"><a class="markdownIt-Anchor" href="#相关工作"></a> 相关工作</h2><p>通常情况下，注意力模型在CNN特征上操作，如左图，分割成同等⼤⼩图像区域的统⼀⽹格来进行attention操作，即将attention用于CNN的一层或多层输出的feature map上来预测各网格的权重。 这种方法的问题在于：</p><ol><li>区域数量如何界定，若数量多则过于精细，数量少则过于粗略，同时需要考虑参数量的问题。</li><li>区域位置与特征内容不一致。</li></ol><p>本文⽅法即右图，在Faster RCNN提出的物体区域和其他突出的图像区域层面进行attention计算，可以让提出的区域与特征很好对应。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109221436953.png" alt="" /></p><h2 id="具体方法"><a class="markdownIt-Anchor" href="#具体方法"></a> 具体方法</h2><p>对于一张输入图像<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span>，本文的caption model和VQA model使用的输入都为K个大小不一的图像feature vector，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mo>=</mo><mo stretchy="false">{</mo><msub><mi>v</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>v</mi><mi>k</mi></msub><mo stretchy="false">}</mo><mo separator="true">,</mo><msub><mi>v</mi><mi>i</mi></msub><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mi>D</mi></msup></mrow><annotation encoding="application/x-tex">V = \{v_1,…,v_k \},v_i \in \mathbb R^D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span></span></span></span></span></span></span></span>，每一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>都是D维向量，代表了一个一个突出图像区域的特征编码。V即作为Faster RCNN的输出，再输入到caption model或VQA model中。</p><h3 id="bottom-up-attention-model-faster-rcnn"><a class="markdownIt-Anchor" href="#bottom-up-attention-model-faster-rcnn"></a> Bottom-Up Attention Model (Faster RCNN)</h3><p>本部分处理输入的图像<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span>，生成K个大小不一的特征向量V，作为caption model和VQA model的输入。</p><p>我们将 Faster R-CNN 与 ResNet-101结合使用。 为了生成用于图像字幕或 VQA 的图像特征输出集 V，我们采用模型的最终输出，并使用IoU阈值对每个对象类执行非最大抑制NMS。 然后我们选择任何类别检测概率超过置信阈值的所有区域。 对于每个选定的区域 i，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 被定义为来自该区域的均值池化卷积特征，因此图像特征向量的维数 D 为 2048。以这种方式使用，Faster R-CNN 有效地起到了“硬”注意力的作用 机制，因为只有相对少量的图像边界框特征，而且是从大量可能的配置中选择的。</p><p>为了预训练自下而上的注意力模型，我们首先使用经过ImageNet预训练的 ResNet-101 初始化 Faster R-CNN。 然后训练 Visual Genome数据。 为了帮助学习良好的特征表示，我们添加了一个额外的训练输出来预测属性类（除了对象类）。为了预测区域 i 的属性，我们将平均池化卷积特征 vi 与真实对象类的学习嵌入连接起来，并将其输入一个额外的输出层，定义每个属性类的softmax分布以及“无属性”类 .</p><p>原始的 Faster R-CNN 多任务损失函数包含四个组件，分别定义在 RPN 和最终对象类建议的分类和边界框回归输出上。 我们保留这些组件并添加一个额外的多类损失组件来训练属性预测器。</p><h3 id="captioning-model"><a class="markdownIt-Anchor" href="#captioning-model"></a> Captioning Model</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109221559899.png" alt="" /></p><p>给定一组图像特征 V （由自下而上的注意力Faster RCNN给出），我们提出的captioning model使用“软”自上而下的注意力机制在字幕生成期间对每个特征进行加权，使用现有的部分输出序列作为上下文。</p><p>整体上，captioning model由两个标准的LSTM层构成，将第一个Attention LSTM层描述为自上而下的视觉注意模型 $ h^1$ ，第二个Language LSTM层描述为语言模型 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>h</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">h^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，其每一步的运行都遵循如下公式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mi>t</mi></msub><mo>=</mo><mi>L</mi><mi>S</mi><mi>T</mi><mi>M</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>t</mi></msub><mo separator="true">,</mo><msub><mi>h</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h_t = LSTM(x_t,h_{t-1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，为了符号方便，我们忽略了存储单元的传播。</p><h4 id="top-down-attention-lstm"><a class="markdownIt-Anchor" href="#top-down-attention-lstm"></a> Top-Down Attention LSTM</h4><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109221626573.png" alt="" /></p><p>第一层LSTM在每一个时间步的输入向量x包含了上一个时间步第二层LSTM的输出，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>x</mi><mi>t</mi><mn>1</mn></msubsup><mo>=</mo><mo stretchy="false">[</mo><msubsup><mi>h</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></msubsup><mo separator="true">,</mo><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mo separator="true">,</mo><msub><mi>W</mi><mi>e</mi></msub><msub><mo>∏</mo><mi>t</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x^1_t = [h^2_{t-1}, \bar{v}, W_e\prod_t]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.061108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1205469999999997em;vertical-align:-0.30643899999999996em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999998em;"><span style="top:-2.451892em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30643899999999996em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1308459999999999em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>。</p><p>其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>v</mi><mo>ˉ</mo></mover><mo>=</mo><mfrac><mn>1</mn><mi>k</mi></mfrac><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\bar{v} = \frac{1}{k}\sum_iv_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.56778em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16195399999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>e</mi></msub></mrow><annotation encoding="application/x-tex">W_e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是一个E*\abs{\sum}的词嵌入矩阵，词汇表大小为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo>∏</mo><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">\prod_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0497100000000001em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1308459999999999em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span></span></span></span>是时间步t时的输入词的独热编码。</p><p>这些输入分别为注意力 LSTM 提供了关于语言 LSTM 状态、图像的整体内容和到目前为止生成的部分字幕输出的最大上下文。 词嵌入是从随机初始化中学习的，没有预训练。</p><p>给出attention LSTM的输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>h</mi><mi>t</mi><mn>1</mn></msubsup></mrow><annotation encoding="application/x-tex">h^1_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.061108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span> 后，在每一个时间步 t 针对k个图像特征向量中的每一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 生成一个规范化的attention 权重 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>α</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\alpha_{i,t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，方法如下所示：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109221632151.png" alt="" /></p><p>而最后的输出给语言LSTM的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>v</mi><mo>^</mo></mover><mi>t</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>K</mi></msubsup><msub><mi>α</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>t</mi></mrow></msub><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\hat{v}_t = \sum_{i=1}^K\alpha_{i,t}v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2809409999999999em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><h4 id="language-lstm"><a class="markdownIt-Anchor" href="#language-lstm"></a> Language LSTM</h4><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109221637354.png" alt="" /></p><p>语言模型LSTM的输入向量x由关注的图像特征组成，与关注LSTM的输出相连，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>x</mi><mi>t</mi><mn>2</mn></msubsup><mo>=</mo><mo stretchy="false">[</mo><msub><mover accent="true"><mi>v</mi><mo>^</mo></mover><mi>t</mi></msub><mo separator="true">,</mo><msubsup><mi>h</mi><mi>t</mi><mn>1</mn></msubsup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x^2_t=[\hat{v}_t, h^1_t]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.061108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>。</p><p>用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mrow><mn>1</mn><mo>:</mo><mi>T</mi></mrow></msub></mrow><annotation encoding="application/x-tex">y_{1:T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mrel mtight">:</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 来指代一系列的单词输入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>y</mi><mn>1</mn></msub><mi mathvariant="normal">，</mi><mo>…</mo><mi mathvariant="normal">，</mi><msub><mi>y</mi><mi>T</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(y_1，…，y_T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">，</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，那么在每一个时间步可能的输出词的条件分布应该如下所示：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109221644201.png" alt="" /></p><p>完整输出序列的分布计算为条件分布的乘积：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109221649855.png" alt="" /></p><h4 id="objectiveloss-计算"><a class="markdownIt-Anchor" href="#objectiveloss-计算"></a> Objective(Loss 计算)</h4><p>在给出了真实序列 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>y</mi><mrow><mn>1</mn><mo>:</mo><mi>T</mi></mrow><mo>∗</mo></msubsup></mrow><annotation encoding="application/x-tex">y^*_{1:T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.964027em;vertical-align:-0.275331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.424669em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mrel mtight">:</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.275331em;"><span></span></span></span></span></span></span></span></span></span> 和captioning model的参数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span> 后，最小化cross entropy loss来优化模型。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109221653500.png" alt="" /></p><p>为了公平地与近期工作进行对比，本文还提交了使用CIDEr优化计算的结果。在使用cross entropy loss 训练后的模型初始化之后，使用负期望分数来进行最小化：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109221655061.png" alt="" /></p><p>其中r是得分函数如CIDEr。根据SCST中描述的方式，这个loss的梯度可以被近似为：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109221658500.png" alt="" /></p><p>其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>y</mi><mrow><mn>1</mn><mo>:</mo><mi>T</mi></mrow><mi>s</mi></msubsup></mrow><annotation encoding="application/x-tex">y^s_{1:T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.939723em;vertical-align:-0.275331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.424669em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mrel mtight">:</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.275331em;"><span></span></span></span></span></span></span></span></span></span> 是取样的字幕caption，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><msub><mover accent="true"><mi>y</mi><mo>^</mo></mover><mrow><mn>1</mn><mo>:</mo><mi>T</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r(\hat{y}_{1:T})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mrel mtight">:</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 定义了通过贪婪解码当前模型获得的基线分数。SCST（与其他 REINFORCE [44] 算法一样）通过从策略中采样来探索字幕空间。在训练中。 这种梯度倾向于增加得分高于当前模型得分的采样字幕的概率。</p><p>在实验中，本文遵循 SCST，但通过限制采样分布来加快训练过程。 使用波束搜索解码，仅从解码波束中的那些字幕中进行采样。 根据经验，我们在使用波束搜索解码时观察到，生成的波束通常至少包含一个非常高分的标题——尽管这个标题经常没有集合中最高的对数概率。 相比之下，我们观察到很少有不受限制的字幕样本得分高于贪婪解码的字幕。 使用这种方法，我们在单个 epoch 中完成了 CIDEr 优化。</p><h3 id="vqa-model"><a class="markdownIt-Anchor" href="#vqa-model"></a> VQA model</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109221706670.png" alt="" /></p><p>这部分不做详细介绍，具体方式与<a href="https://blog.pokestar.wang/2021/09/13/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Tips%20and%20Tricks%20for%20VQA/">Tips and Tricks for VQA</a>中介绍的相同。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-Mask RCNN</title>
    <link href="/2021/09/16/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Mask%20RCNN/"/>
    <url>/2021/09/16/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Mask%20RCNN/</url>
    
    <content type="html"><![CDATA[<h1 id="mask-rcnn"><a class="markdownIt-Anchor" href="#mask-rcnn"></a> Mask RCNN</h1><h2 id="论文要点"><a class="markdownIt-Anchor" href="#论文要点"></a> 论文要点</h2><ul><li><p>在Faster RCNN的基础上增加了一个预测对象掩码的分支，使用全连接卷积网络FCN，即在这个region proposal上做语义分割。</p></li><li><p>使用ROI Align替代ROI pooling，解决了ROI pooling中的像素不对齐问题，具体算法为bilinear interpolation双线性插值。</p></li></ul><h2 id="模型结构"><a class="markdownIt-Anchor" href="#模型结构"></a> 模型结构</h2><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109171036152.png" alt="" /></p><p>与Faster RCNN类似，先通过RPN网络提出region proposal，然后对每个候选框进行分类，边界框回归等，不同的是在进行分类回归的同时产生一个分支网络FCN生成mask，类似于语义分割，同时使用ROI Align替代ROI pooling，最终网络的Loss变为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>=</mo><msub><mi>L</mi><mrow><mi>c</mi><mi>l</mi><mi>s</mi></mrow></msub><mo>+</mo><msub><mi>L</mi><mrow><mi>b</mi><mi>o</mi><mi>x</mi></mrow></msub><mo>+</mo><msub><mi>L</mi><mrow><mi>m</mi><mi>a</mi><mi>s</mi><mi>k</mi></mrow></msub></mrow><annotation encoding="application/x-tex">L=L_{cls}+L_{box}+L_{mask}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><h3 id="mask分支"><a class="markdownIt-Anchor" href="#mask分支"></a> Mask分支</h3><p>使用一个全卷积神经网络FCN对每一个ROI产生一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>∗</mo><msup><mi>m</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">K*m^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>的输出，即对K个类别，每个类别编码一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>∗</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">m*m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>的二进制掩码。掩码分支对<strong>每个像素使用sigmoid</strong>，且定义<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>m</mi><mi>a</mi><mi>s</mi><mi>k</mi></mrow></msub></mrow><annotation encoding="application/x-tex">L_{mask}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为<strong>平均二元交叉熵损失</strong>：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109171022531.png" alt="" /></p><p>这与之前将FCN应用于语义分割的做法不同，后者通常使用每像素softmax和multinomial cross-entropy loss多项式交叉熵损失，这种情况下不同类别的掩码会发生竞争。MaskRCNN的做法对一个与真实类K相关的ROI，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>m</mi><mi>a</mi><mi>s</mi><mi>k</mi></mrow></msub></mrow><annotation encoding="application/x-tex">L_{mask}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>只定义在第K个掩码上，其他掩码的输出不对损失有影响。实验表明，这种方法是取得良好实例分割结果的关键。</p><p>由于Mask是对输入对象的空间布局进行编码，可以输出像素到像素的对应关系，这要求ROI特征图保持很好的像素对应关系，而之前的ROI pooling方法显然无法较好地完成这个要求，于是Mask RCNN提出了ROI Align层，使用双线性插值解决了这个问题。</p><h3 id="roi-align"><a class="markdownIt-Anchor" href="#roi-align"></a> ROI Align</h3><figure class="half">       <img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109171024272.png", width="550">   <img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210811102346.png"> </figure><p>ROI pooling的操作如上图所示，具体方法可以看之前<a href="https://blog.pokestar.wang/2021/08/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Fast-RCNN/">Fast RCNN</a>的博客，可以看到，ROI pooling是像素不对齐的。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109171036557.png" alt="" /></p><p>虚线部分表示feature map，实线表示ROI框，切分方式为2*2即ROI切分成4个单元格，假设采样点数为4，那么每个单元格有四个采样点，使用双线性插值对每一个采样点生成一个像素值，然后对四个采样点进行maxpooling，就得到ROI这一个单元格的最终结果。</p><h3 id="模型结构对比"><a class="markdownIt-Anchor" href="#模型结构对比"></a> 模型结构对比</h3><p>对比了使用不同的backbone：resnet-50，resnet-101，resnext-50，resnext-101；</p><p>对比了不同的head Architecture：Faster RCNN使用resnet50时，从Block 4导出特征供RPN使用，这种叫做ResNet-50-C4，同时还对比了FPN特征金字塔网络。</p><p>经实验对比，resnext-101和FPN网络效果较好。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109171103810.png" alt="" /></p><h2 id="拓展-人体姿态检测"><a class="markdownIt-Anchor" href="#拓展-人体姿态检测"></a> 拓展 人体姿态检测</h2><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img/202109171116938.png" alt="" /></p><p>Mask RCNN可以方便地转换到人体姿态检测，将关键点的位置建模为one-hot mask，并采用Mask R-CNN预测K个mask，每一个用于K个关键点类型中的一种（例如，左肩、右肘）。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://zhuanlan.zhihu.com/p/37998710">令人拍案称奇的Mask RCNN</a></p><p><a href="https://blog.csdn.net/wangdongwei0/article/details/83110305/">【Mask RCNN】论文详解(真的很详细)</a></p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-Tips and Tricks for VQA</title>
    <link href="/2021/09/13/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Tips%20and%20Tricks%20for%20VQA/"/>
    <url>/2021/09/13/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Tips%20and%20Tricks%20for%20VQA/</url>
    
    <content type="html"><![CDATA[<h1 id="tips-and-tricks-for-vqa"><a class="markdownIt-Anchor" href="#tips-and-tricks-for-vqa"></a> Tips and Tricks for VQA</h1><p>本文介绍了作者获得2017年的VQA challenge冠军所使用的模型，同时介绍了很多作者实际工作中发现的一些技巧和窍门。</p><p>VQA（visual question answering）是对一个图像和一个相关的文本问题，由机器确定其正确答案。</p><h2 id="论文要点"><a class="markdownIt-Anchor" href="#论文要点"></a> 论文要点</h2><p>文章使用了联合嵌入方法joint embedding，同时提出以下几点技巧：</p><ul><li>使用<code>sigmoid output</code>来允许每个问题有多个答案，来代替single-label的softmax。</li><li>使用<code>soft scores作为ground truth targets</code>，任务作为候选答案的分数进行回归，而不是进行传统的分类。</li><li>使用<code>gated tanh</code>作为激活函数，在所有的非线性层中。</li><li>使用<code>image features from bottom-up attention</code>来提供区域特定的图像，而不是简单的CNN的grid-like feature。</li><li>使用<code>pretrained representations of candidate answers</code>来初始化输出层的权重。</li><li>在SGD中使用<code>large mini-batches and smart shuffling of training data</code>来训练。</li></ul><h2 id="数据集"><a class="markdownIt-Anchor" href="#数据集"></a> 数据集</h2><ul><li>VQA-real 2015年推出。</li><li>VQA v2 每个问题连接两个图片，这两个图片分别对应不同的答案，解决了之前对问题-答案之间关系进行直接推断的问题。这是VQA challenge2017和本文实验的基础。</li><li>Visual Genome 包含了以场景图形式存在的图像注释，构成了对图像内容的细粒度描述。它提供了一组出现在场景中的视觉元素如物体，人体，以及其特征，属性和他们之间的关系。本文并未直接使用该数据集，而是用于训练一个faster rcnn模型，并用它来获得以物体为中心的图像特征。这些图像注释通常比VQA v2中的答案（通常1-3个字）更长。</li></ul><h2 id="模型方法"><a class="markdownIt-Anchor" href="#模型方法"></a> 模型方法</h2><p>流行的VQA方法主要基于以下三点</p><ul><li><strong>将问题回答作为一个分类问题。</strong></li></ul><p>目前的VQA数据集中的问题大多是视觉性质上的，因此正确答案只跨越了一小部分单词和短语，通常是几百到几千。</p><ul><li><strong>将上述分类问题使用一个实现了联合嵌入joint embedding的模型来解决。</strong></li></ul><p>将图像输入和问题输入分别用CNN和RNN映射到固定大小的向量表征中。这些向量表征的进一步非线性映射通常被解释为对联合语义空间（joint “semantic” space）的投影。之后将图像输入和问题输入的向量表征通过元素相乘的方式进行组合，输送给分类器。</p><ul><li><strong>在实例问题/答案下进行端到端训练。</strong></li></ul><p>神经网络模型在问题、图像和他们的真实答案上进行端到端训练。考虑到图像输入和问题输入的巨大维度导致的相对稀疏的训练信号，推动了收集大规模数据集的努力，如VQA v2，包含650000个问题与120000张图片。</p><h2 id="模型结构"><a class="markdownIt-Anchor" href="#模型结构"></a> 模型结构</h2><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/202109131911376.png" alt="" /></p><h3 id="question-embedding"><a class="markdownIt-Anchor" href="#question-embedding"></a> Question Embedding</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/202109131926239.png" alt="" /></p><p>对问题进行词嵌入。每个实例输入，无论是训练实例还是测试实例，都是一个文本问题和一张图。问题首先使用空格和标点符号分割成单词，数字或基于数字的单词也被视为一个单词。为了提高计算效率，问题被修建到最多14个字（数据集中仅0.25%的问题长于14个字），每个词被转化为一个向量表示（带有查找表），其条目为在训练期间与其他参数一起学习的300维向量。这些向量是使用在WIkipedia/Gigaword语料库预训练的GloVe Word Embedding来初始化的。在预训练词嵌入中未被初始化的单词被初始化为零向量（在训练期间进行优化），短于14个词的问题被使用零向量填充（训练期间冻结）。最终得到一个14*300的词嵌入序列，进入GRU。GRU有512维的内部状态，我们使用其最终状态，作为我们的Question Embedding问题嵌入q。</p><h3 id="image-feature"><a class="markdownIt-Anchor" href="#image-feature"></a> Image Feature</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/202109131934088.png" alt="" /></p><p>输入的图像通过CNN得到一个K*2048的向量表示，K是图像区域位置的数量，即每一个区域位置都由一个2048维的向量进行表示。CNN有两个选择，一个是imagenet上预训练的ResNet200，我们将其特征图调整为7*7即K=49；第二个更高性能的选择是基于Faster RCNN内的ResNet CNN，同时使用bottom-up attention提供图像特征，在此配置下使用Visual Genome数据集进行预训练，使其可以专注于给定图像中的特定元素。由此产生的特征可以解释为图像前K个物体为中心的ResNet特征。若使K自适应，随每个图像复杂性变化，其平均值为60。</p><h3 id="image-attention"><a class="markdownIt-Anchor" href="#image-attention"></a> Image attention</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/202109131947310.png" alt="" /></p><p>模型实现了大多数现代VQA模型共有的问题引导的注意力机制，文章称其为top-down attention。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/202109131956941.png" alt="" /></p><p>对图像的每一个区域位置$$i=1……K $$，其特征向量为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，将其与问题嵌入q连接，然后通过一个非线性层<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">f_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和一个线性层来获得一个与该位置相关的标量注意力权重<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>α</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\alpha_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">w_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是可学习的参数向量。接着使用softmax函数对所有位置的注意力权重进行归一化（公式2）。最后，将所有位置的图像特征被归一化的权值加权并求和（公式3），得到一个单一的2048维的向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>v</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{v}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">^</span></span></span></span></span></span></span></span></span>，代表被关注的图像。</p><h3 id="multimodel-fusion"><a class="markdownIt-Anchor" href="#multimodel-fusion"></a> Multimodel fusion</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/202109132011970.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/202109132012272.png" alt="" /></p><p>将来自图像的输入和来自问题文本的输入进行Hadamard积，即元素对元素乘法，得到的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span>就是联合嵌入joint embedding。</p><h3 id="output-classifier"><a class="markdownIt-Anchor" href="#output-classifier"></a> Output classifier</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/202109132059144.png" alt="" /></p><p>一组候选答案（输出词汇）是由训练集中出现8次以上的所有正确答案预先确定的（答案都是从存在的里面选的），共有N=3129个候选答案，所以就可以将其看作是一个多标签分类任务。事实上，VQA v2数据集中每一个训练问题都与一个或几个答案相关联，每个答案标记一个[0,1]的soft accuracy。此外，有一些训练问题（约7%）在选定的输出词汇中没有正确答案，这些问题并没有被丢弃，他们使输出词汇的所有候选者的预测分数趋于0，这传递了一个有用的训练信号。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/202109132052371.png" alt="" /></p><p>分类器的具体做法是：将联合嵌入h通过一个非线性层<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">f_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，之后通过一个线性映射<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">w_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（N*512）和一个sigmoid函数来预测一个对所有N个候选答案的分数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>s</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span></span></span></span>。</p><p>其loss函数类似于二元交叉熵损失：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/202109132055475.png" alt="" /></p><p>M是训练问题数，N是候选答案数。真实答案的分数也是一个soft acc。sigmoid函数允许对每个问题的多个正确答案进行优化，其次soft acc提供了更丰富的训练信号，因为其捕捉到了答案偶尔出现的不确定性。</p><h3 id="pretraining-the-classifier"><a class="markdownIt-Anchor" href="#pretraining-the-classifier"></a> Pretraining the classifier</h3><p>每个得分其实是联合嵌入h对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">w_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>矩阵的某一行做乘积得到的，所以可以将每一个答案的适当表示作为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">w_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的一行来学习，就是说对上述分类器进行预训练，可以从文本和图像两个角度进行。文本上，和之前问题嵌入一样使用答案词的GloVe词嵌入形式的语言学信息来初始化，当答案不能匹配预训练的嵌入时，使用经过拼写检查、去除连字符或从多词表达中保留一个词后的最接近的匹配，相应的向量放如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>w</mi><mi>o</mi><mrow><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">w^{text}_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040556em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>中。图像上，使用谷歌图片来检索与每个候选答案相关的10张图片，这些图片通过一个Imagenet上预训练的ResNet101提取出平均池化特征并对这10张照片进行平均，得到的结果是2048维的向量对应每一个候选答案，放入矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>w</mi><mi>o</mi><mrow><mi>i</mi><mi>m</mi><mi>g</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">w^{img}_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.071664em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>的相应行中。最终得分<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>s</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span></span></span></span>的公式为：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/202109132114943.png" alt="" /></p><h3 id="non-linear-layers"><a class="markdownIt-Anchor" href="#non-linear-layers"></a> Non-Linear Layers</h3><p>网络使用了多个可学习的非线性层。每一个非线性层都使用了一个门控双曲切线激活函数（gated hyperbolic tangent activation）。每一个这种层都实现了一个函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">f_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，使一个m维的x变化为一个n维的y，使用如下方法：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/202109132115293.png" alt="" /></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span></span>是sigmoid函数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi><mo separator="true">,</mo><msup><mi>W</mi><mo separator="true">,</mo></msup></mrow><annotation encoding="application/x-tex">W,W^,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span></span></span></span>都是n*m的可学习权重，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo separator="true">,</mo><msup><mi>b</mi><mo separator="true">,</mo></msup></mrow><annotation encoding="application/x-tex">b,b^,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span></span></span></span>是可学习的bias，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∘</mo></mrow><annotation encoding="application/x-tex">\circ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord">∘</span></span></span></span>是Hadamard积。</p><h3 id="training"><a class="markdownIt-Anchor" href="#training"></a> Training</h3><p>训练中一个特别点是将VQA v2中与VG训练集重合的问题放到同一小批次中，使模型能学到不同，学习更稳定。</p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习随记</title>
    <link href="/2021/09/12/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/"/>
    <url>/2021/09/12/%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="学习随记"><a class="markdownIt-Anchor" href="#学习随记"></a> 学习随记</h1><p>记录学习过程中的一些小tips</p><h2 id="pytorch"><a class="markdownIt-Anchor" href="#pytorch"></a> Pytorch</h2><ul><li>在 <code>nn.Sequential</code> 的实例被函数 <code>torch.jit.script</code> 脚本化后，通过使用符号式编程提高了计算性能。</li></ul><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/202109121441701.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu20.04安装cuda&amp;cudnn</title>
    <link href="/2021/08/29/Ubuntu20-04%E5%AE%89%E8%A3%85cuda-cudnn/"/>
    <url>/2021/08/29/Ubuntu20-04%E5%AE%89%E8%A3%85cuda-cudnn/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>之前装完了cuda老是重启就掉，重装了几次，索性记录一下自己装cuda&amp;cudnn的过程以及遇到的坑。</p><h2 id="首先安装nvidia驱动"><a class="markdownIt-Anchor" href="#首先安装nvidia驱动"></a> 首先安装Nvidia驱动</h2><p>这一步可以在Ubuntu系统设置-关于-软件更新中完成。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/7ef189300431b955b89e82c9a90cece.png" alt="" /></p><p>选择专有的最新驱动即可。随后输入指令 <em>nvidia-smi</em> 查看支持的cuda版本，下图来自网络，为示例，支持版本最高为cuda10.2。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210829231759.png" alt="" /></p><h2 id="gcc"><a class="markdownIt-Anchor" href="#gcc"></a> gcc</h2><p>Ubuntu20.04自带的gcc版本为9.7.0，不同的cuda版本所需gcc版本不同，可能需要安装其他版本的gcc&amp;g++，不过这一步是可选的视情况而定，我就没有安装。</p><h2 id="安装cuda"><a class="markdownIt-Anchor" href="#安装cuda"></a> 安装cuda</h2><p>随后，前往<a href="https://developer.nvidia.com/cuda-toolkit-archive">nvidia官网</a>下载需要的cuda版本。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210829231941.png" alt="" /></p><p>随后，根据自己机器的情况进行选择，并按照官方提示进行安装，安装方式最好选择runfile。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210829232025.png" alt="" /></p><p>下载完成后输入上图中sh命令进行安装。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210829232620.png" alt="" /></p><p>选择continue。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210829232648.png" alt="" /></p><p>输入accept。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210829232705.png" alt="" /></p><p>cuda安装包是自带显卡驱动的，所以这一步按空格去掉安装显卡驱动的选项，然后选择install。</p><h2 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量</h2><p>输入gedit ~/.bashrc命令打开文件，在文件结尾输入以下语句，保存。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> CUDA_HOME=/usr/<span class="hljs-built_in">local</span>/cuda<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$CUDA_HOME</span>/bin<br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="hljs-built_in">local</span>/cuda/lib64<span class="hljs-variable">$&#123;LD_LIBRARY_PATH:+:<span class="hljs-variable">$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span><br></code></pre></td></tr></table></figure><p>由于cuda安装时会自动建立一个链接cuda指向对应版本的cuda.**.*文件夹，所以这里直接使用cuda作为路径比较好。</p><p>之后输入  source ~/.bashrc 命令更新环境变量。</p><p>至此完成cuda安装，输入nvcc -V查看cuda版本，检查是否安装成功。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/ce0825b722cd033b2a0f8b012c8a183.png" alt="" /></p><h3 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h3><p>我这里遇到重启后cuda丢失问题，现已解决，个人分析有以下三种原因：</p><ol><li>没有禁用Ubuntu内核更新，解决方法自行百度，很多博客都有写。</li><li>没有在Ubuntu系统设置内的软件更新处安装专有nv驱动导致其自动更新或更换了（猜测）。</li><li>**bashrc文件自动重写了或是未保存。**这条可能性最大，我在发现nvcc无法找到cuda之后打开bashrc文件发现已经没有了之前添加的路径信息，重新添加之后就恢复正常了。</li></ol><h2 id="cudnn安装"><a class="markdownIt-Anchor" href="#cudnn安装"></a> cuDNN安装</h2><p>从https://developer.nvidia.com/cudnn下载相应版本的cudnn，需要登陆。选择最上方的linux library(x86_64)即可。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210829234351.png" alt="" /></p><p>下载解压之后，将cuda/include/cudnn.h文件复制到usr/local/cuda/include文件夹，将cuda/lib64/下所有文件复制到/usr/local/cuda/lib64文件夹中，并添加读取权限。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 将文件复制到cuda对应的文件夹下</span><br>sudo cp cuda/include/cudnn.h /usr/<span class="hljs-built_in">local</span>/cuda/include/<br>sudo cp cuda/lib64/libcudnn* /usr/<span class="hljs-built_in">local</span>/cuda/lib64/<br><span class="hljs-comment"># 赋予文件执行权限</span><br>sudo chmod a+r /usr/<span class="hljs-built_in">local</span>/cuda/include/cudnn.h<br>sudo chmod a+r /usr/<span class="hljs-built_in">local</span>/cuda/lib64/libcudnn*<br></code></pre></td></tr></table></figure><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://blog.csdn.net/ashome123/article/details/105822040/">Ubuntu 20.04 CUDA&amp;cuDNN安装方法</a></p>]]></content>
    
    
    <categories>
      
      <category>技术杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-Transformer（Attention is All you need）</title>
    <link href="/2021/08/26/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Transformer%EF%BC%88Attention-is-All-you-need%EF%BC%89/"/>
    <url>/2021/08/26/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Transformer%EF%BC%88Attention-is-All-you-need%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="transformer"><a class="markdownIt-Anchor" href="#transformer"></a> Transformer</h1><h2 id="论文要点"><a class="markdownIt-Anchor" href="#论文要点"></a> 论文要点</h2><ul><li>提出了与CNN、RNN完全不同的架构，即只是用attention</li><li>模型准确率更高，更易<strong>并行化</strong>，训练时间更少</li></ul><h2 id="模型架构"><a class="markdownIt-Anchor" href="#模型架构"></a> 模型架构</h2><p>transformer模型是一种使用了self-attention的seq2seq模型，通俗理解就是一种encoder-decoder架构，只不过之前的模型都是使用RNN（lstm）作为两个编/解码器，而在Transformer中，使用了<strong>编码器栈</strong>（encoder stack）和<strong>解码器栈</strong>（decoder stack），所谓栈就是将一个编解码器重复N次。而在编解码器中，使用self-Attention结构来代替RNN。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210828205030.png" alt="" /></p><p>首先在输入层，除了常规的word Embedding之外，还加入了位置编码，这是因为transformer的结构难以感受到输入的位置关系，具体下文有讲解。</p><h3 id="encoder"><a class="markdownIt-Anchor" href="#encoder"></a> Encoder</h3><p>一个encoder中包含一个Multi-Head Attention，即子注意力模块将输入的序列转换成另一个序列，后接一个LayerNormalization与残差结构，即将multi-head attention的输出与输入进行相加在做LayerNormalization，再连接一个前馈神经网络，其作用是特征转换，类似于1*1卷积，之后再接一个残差结构和LayerNorm，做法与之前类似。</p><h3 id="decoder"><a class="markdownIt-Anchor" href="#decoder"></a> Decoder</h3><p>decoder架构类似于encoder，最主要的区别是在前端加了一个mask过后的Multi-Head Attention，主要是为了将后放的输入序列屏蔽，以便在训练时模拟实际预测情况。之后的残差结构和LayerNorm做法与之前相同，在接下来一层的Multi-head Attention会接受encoder的输出以及上一层的输出，之后的结构做法都是之前类似或比较常见的了。</p><h2 id="self-atttention机制qkv-model"><a class="markdownIt-Anchor" href="#self-atttention机制qkv-model"></a> Self-Atttention机制（QKV Model）</h2><h3 id="普通的attention机制"><a class="markdownIt-Anchor" href="#普通的attention机制"></a> 普通的Attention机制</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210828222228.png" alt="" /></p><p>主要是计算一个注意力分布<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span>，首先用一个查询向量q和输入x进行内积（这里其实得到两个向量相似度，即词之间相似度），结果过一个softmax函数，得到注意力分布<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span>，再用这个注意力分布与x相乘得到在输入x上添加注意力的效果。</p><h3 id="self-attention"><a class="markdownIt-Anchor" href="#self-attention"></a> self-attention</h3><p>可以看到，查询向量q是attention机制中比较重要的一个参数，如何计算得到它，如何更新它是一个难题。self-attention中，将自身的一部分来作为查询向量，即使其注意力来自自身。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210828223231.png" alt="" /></p><p>上图为self-attention的计算示例。在文本经过word embedding之后，直接用其自身作为查询向量q，计算注意力分布。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210828224044.png" alt="" /></p><p>在实际使用中，一般使用上图的QKV模型作为self-attention。输入由N个词向量组成的矩阵，经由不同的w得到相应的Q（query）、K（key）、V（value）矩阵，这里的可学习参数w可以更好地让查询q匹配到键值k，以及值v可以更好地适应输出。Q与K做矩阵乘法后经由一个softmax函数，这里乘上<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><msqrt><msub><mi>D</mi><mi>k</mi></msub></msqrt></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\sqrt{D_k}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.383108em;vertical-align:-0.538em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.590327em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8566757142857143em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.816675714285714em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.18332428571428572em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.538em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>是为了缩小量级，使得得到的概率分布更为平滑。QK相乘得到N*N的注意力矩阵，再与value矩阵V相乘得到输出。</p><h3 id="multi-head-self-attention"><a class="markdownIt-Anchor" href="#multi-head-self-attention"></a> Multi-head Self-Attention</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210828231226.png" alt="" /></p><p>而Multi-head Self-Attention就是将上文的QKVmodel多个进行组合，以得到不同注意力角度的x，进行维度转换将其结合为与输出相似的维度进行输出。</p><p>所以从这里可以看到，由于QKVmodel中是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Q</mi><mo>∗</mo><msup><mi>K</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">Q*K^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">Q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>，所以其实得到的N*N注意力矩阵的每一行就是当前行对应的word对于N个词向量的注意力，所以其实输出是天然考虑到所有的输入序列的，所以在做训练的时候，我们希望只接收前几个词就能输出得到后几个词，就需要将后面的次mask掉，即使用图一的mask，再结合encoder的输出来进行decoder的输出。建议看下方李宏毅老师的讲解，视频里36分左右有个gif图比较清楚。</p><h2 id="position-encoding"><a class="markdownIt-Anchor" href="#position-encoding"></a> Position Encoding</h2><p>从前面的结构可以看出，词向量的位置对于transformer来说并不敏感，tranfromer本质上只学习每个词向量对应的权重参数w，其在序列中的位置并无影响，所以必须为输入x加上与x同维的位置编码，让transformer对其进行考虑，位置编码是手动设定的。</p><p><strong>为何相加不是concat添加到后面</strong></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210828233525.png" alt="" /></p><p>结果是相同的，所以直接相加更方便。</p><h3 id="论文里给出的position-encoding生成方式"><a class="markdownIt-Anchor" href="#论文里给出的position-encoding生成方式"></a> 论文里给出的position encoding生成方式</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210828233714.png" alt="" /></p><h2 id="权重可视化"><a class="markdownIt-Anchor" href="#权重可视化"></a> 权重可视化</h2><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210828235913.png" alt="" /></p><p>将attention机制的权重可视化之后，可以看出它确实注意到了词之间的关系，并且multi-head attention中不同的attention也注意到了不同方向的关系，比如上图下方的attention就注重距离较近词之间的关系，上方的attention就负责注重较远距离的词之间的关系。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://www.bilibili.com/video/BV1sU4y1G7CN">20210625；短教程：《Transformers》；特邀讲师：邱锡鹏教授</a></p><p><a href="https://www.youtube.com/watch?v=ugWDIIOHtPA&amp;list=PLJV_el3uVTsOK_ZK5L0Iv_EQoL1JefRL4&amp;index=61">Transformer-李宏毅</a></p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cs231n-assignment3作业笔记</title>
    <link href="/2021/08/20/cs231n-assignment3%E4%BD%9C%E4%B8%9A%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/08/20/cs231n-assignment3%E4%BD%9C%E4%B8%9A%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="cs231n-assignment3"><a class="markdownIt-Anchor" href="#cs231n-assignment3"></a> CS231n-assignment3</h1><p>作业3的内容主要有：RNN循环神经网络，LSTM长短时记忆神经网络，NetworkVisualization使用图像梯度生成图像，Style Transfer风格迁移，GAN生成式对抗网络。具体代码已经上传<a href="https://github.com/1219521375/CS231n2020">github</a>。</p><h2 id="rnn"><a class="markdownIt-Anchor" href="#rnn"></a> RNN</h2><p>实现一个普通的循环神经网络，并使用它来训练一个可以为图像生成新标题的模型。RNN对具有序列特性的数据非常有效，它能挖掘数据中的时序信息以及语义信息，特别适合语音识别、语言模型、机器翻译以及时序分析等NLP领域的问题。</p><p>RNN的这一特性来源于其特殊的结构，RNN的隐含层之间的节点是由连接的，隐含层的输入不仅包括输入层的输出还包括上一时刻隐藏层的输出。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210821104604.png" style="zoom:67%;" /><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210821105037.png" alt="" /></p><p>RNN简单结构和公式如上图所示，注意<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>tanh</mtext><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{tanh}(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">tanh</span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>的导数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mtext>tanh</mtext><mn>2</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1 - \text{tanh}^2(x))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.148448em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord text"><span class="mord">tanh</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984479999999999em;"><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，根据以上公式编写代码，部分重点代码如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># rnn_step_forward</span><br>h = x.dot(Wx) + prev_h.dot(Wh) + b<br>next_h = (np.exp(h) - np.exp(-h)) / (np.exp(h) + np.exp(-h))<br>cache = (next_h, Wx, Wh, x, prev_h)<br><br><span class="hljs-comment"># rnn_step_backward</span><br>dh = (<span class="hljs-number">1</span> - next_h ** <span class="hljs-number">2</span>) * dnext_h<br>dx = dh.dot(Wx.T)<br>dWx = x.T.dot(dh)<br>dprev_h = dh.dot(Wh.T)<br>dWh = prev_h.T.dot(dh)<br>db = np.<span class="hljs-built_in">sum</span>(dh, axis=<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># rnn_forward</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(T - <span class="hljs-number">1</span>):<br>next_h, next_cache = rnn_step_forward(x[:, i + <span class="hljs-number">1</span>, :], next_h, Wx, Wh, b)<br>h[:, i + <span class="hljs-number">1</span>, :] = next_h<br><br><span class="hljs-comment"># rnn_backward</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(T - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        dnext_h = dprev_h + dh[:, i, :]<br>        dxt, dprev_h, dWxt, dWht, dbt = rnn_step_backward(dnext_h, cache[i])<br>        dx[:, i, :] = dxt<br>        dWx += dWxt<br>        dWh += dWht<br>        db += dbt<br>    dh0 = dprev_h<br></code></pre></td></tr></table></figure><h3 id="word-embedding"><a class="markdownIt-Anchor" href="#word-embedding"></a> Word Embedding</h3><p>词嵌入层的主要作用是将单词表（大小为V）映射到一个D维向量。</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sas"># forward<br><span class="hljs-meta">out</span> = W[<span class="hljs-meta">x</span>]  # <span class="hljs-meta">x</span>的每一位置填充w[<span class="hljs-meta">x</span>[i][j]]<br><br># brackward<br>dW = np.zeros((V, D))<br>np.<span class="hljs-meta">add</span>.at(dW, <span class="hljs-meta">x</span>, dout) # 在dw的下标为<span class="hljs-meta">x</span>的位置加上dout<br></code></pre></td></tr></table></figure><h2 id="lstm"><a class="markdownIt-Anchor" href="#lstm"></a> LSTM</h2><p>具体任务与上一节相同，只是使用LSTM代替RNN来实现。由于重复矩阵乘法引起的梯度消失和爆炸，普通RNN很难在长序列上训练。LSTMs通过用如下的选通机制替换RNN的简单更新规则来解决这个问题。</p><p><img src="C:%5CUsers%5C12195%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210822110450610.png" alt="image-20210822110450610" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210822110604.png" alt="" /></p><p>LSTM的公式与结构如上所示，实现方法也与RNN类似，根据公式构建单步的前向传播，再逐公式求导，根据链式法则编写单步反向传播的代码，最后使用for循环将多个单步运行链接即可。</p><h2 id="networkvisualization"><a class="markdownIt-Anchor" href="#networkvisualization"></a> NetworkVisualization</h2><p>先使用一个CNN模型进行训练，将反向传播得到的图片梯度进行可视化，可以了解到网络对图片不同地方的关注度，加深CNN对图片特征提取的理解。</p><p>在model计算得到所有scores后，使用gather函数找到label对应正确分类的分数，进行反向传播找到梯度变化最大的channe进行显示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = model(X)  <span class="hljs-comment"># N,C   y每一个数在0-C</span><br>correct_scores = scores.gather(<span class="hljs-number">1</span>, y.view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)).squeeze()<br>correct_scores.backward(torch.ones_like(y))  <span class="hljs-comment"># Tensor 对tensor求导</span><br>dx = X.grad<br>abs_dx = np.absolute(dx)  <span class="hljs-comment"># (N, 3, H, W) 绝对化下降或上升幅度</span><br>saliency, _ = torch.<span class="hljs-built_in">max</span>(abs_dx, dim=<span class="hljs-number">1</span>)  <span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>同时，作业中还将使用图像梯度来愚弄模型。具体做法是使用一个样本对应一个错误的类别，模型计算得到分数后用这个错误类别对应的得分来进行反向传播，并将梯度加到图像样本上，不断循环，当修改后的样本能够分类到这个错误类别后停止。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    scores = model(X_fooling)  <span class="hljs-comment"># N,C</span><br>    <span class="hljs-keyword">if</span> torch.argmax(scores) == target_y:<br>        print(<span class="hljs-string">&#x27;迭代次数: %i&#x27;</span> % i)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        target_score = scores[:, target_y]<br>        target_score.backward()<br>        target_grad = X_fooling.grad<br>        dx = learning_rate * target_grad / torch.norm(target_grad)<br>        <span class="hljs-keyword">with</span> torch.no_grad():<br>            X_fooling += dx<br>        X_fooling.grad.zero_()<br></code></pre></td></tr></table></figure><p>紧接着上一步，可以使用一个随机噪声图像进行梯度上升，来构造一个让网络可以识别为给定目标类的随机噪声图像。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210822114456.png" alt="" /></p><p>把图片当做变量，固定模型中的权重，来优化上面的目标函数，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>y</mi><mo stretchy="false">(</mo><mi>I</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">sy(I)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mclose">)</span></span></span></span>是给定类标签 y 时模型的评分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = model(img)  <span class="hljs-comment"># N,C</span><br>target_score = scores[:, target_y]<br>target_score.backward()<br>dx = img.grad + <span class="hljs-number">2</span> * l2_reg * img<br><span class="hljs-keyword">with</span> torch.no_grad():<br>    img += learning_rate * dx / torch.norm(dx)<br>model.zero_grad()<br></code></pre></td></tr></table></figure><h2 id="style-transfer"><a class="markdownIt-Anchor" href="#style-transfer"></a> Style Transfer</h2><p>输入两张图片，一张是风格图（比如一些著名画作），一张是内容图（比如摄影图），输出一张带有风格的内容图。</p><p>具体方法同样也是使用梯度回传。使用不同的loss来评判风格style和内容content的偏差，然后让一张随机的噪声图像或者content图的这两个loss尽可能小，就得到了一个style也不是完全和原图一样，content也不是完全和原图一样的结果。</p><p>首先根据公式编写content_loss的代码。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210822131852.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> content_weight * torch.<span class="hljs-built_in">sum</span>(torch.<span class="hljs-built_in">pow</span>((content_current - content_original), <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>之后完成style_loss。这里需要计算<a href="https://www.cnblogs.com/yifanrensheng/p/12862174.html">Gram矩阵</a>，Gram矩阵是协方差矩阵的近似值——它告诉我们每个通道的值（即过滤器的激活）如何与其他通道的值相关联。G是内容图片的gram矩阵，A是风格图片的gram矩阵。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210822132927.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210822132935.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210822132944.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># gram_matrix</span><br>N, C, H, W = features.shape<br>features = features.view(N * C, H * W)<br>Gram = torch.mm(features, features.T) <span class="hljs-comment"># 矩阵相乘 NC,NC</span><br><span class="hljs-keyword">if</span> normalize:<br>    Gram = Gram.div(C * H * W) <br><span class="hljs-keyword">return</span> Gram.view((N, C, C))<br><br><span class="hljs-comment"># style_loss</span><br><span class="hljs-comment"># style_targets为已经计算好的style img</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(style_layers)):<br>G = gram_matrix(feats[style_layers[i]])<br>loss += style_weights[i] * torch.<span class="hljs-built_in">sum</span>(torch.<span class="hljs-built_in">pow</span>((G - style_targets[i]), <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210822135457.png" alt="" /></p><p>最后计算tv_loss，对3个输入通道（RGB）中的每个通道的总变化调节进行求和，并用权重进行加权。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = torch.<span class="hljs-built_in">sum</span>(torch.<span class="hljs-built_in">pow</span>(img[:, :, :-<span class="hljs-number">1</span>, :] - img[:, :, <span class="hljs-number">1</span>:, :], <span class="hljs-number">2</span>))<br>b = torch.<span class="hljs-built_in">sum</span>(torch.<span class="hljs-built_in">pow</span>(img[:, :, :, :-<span class="hljs-number">1</span>] - img[:, :, :, <span class="hljs-number">1</span>:], <span class="hljs-number">2</span>))<br><span class="hljs-keyword">return</span> tv_weight * (a + b)<br></code></pre></td></tr></table></figure><h2 id="gan"><a class="markdownIt-Anchor" href="#gan"></a> GAN</h2><p>生成式对抗网络中有两个不同的神经网络，第一个网络是传统的分类网络，称为<strong>鉴别器discriminator</strong>。我们将训练鉴别器拍摄图像，并将它们分类为真实（属于训练集）或虚假（不存在于训练集中）。我们的另一个网络，称为<strong>生成器generator</strong>，将随机噪声作为输入，并使用神经网络对其进行变换以生成图像。生成器的目标是欺骗鉴别器，使其认为生成的图像是真实的。</p><p><img src="C:%5CUsers%5C12195%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210822173810442.png" alt="image-20210822173810442" /></p><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi><mo>∼</mo><mi>p</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">z ∼ p ( z )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span>代表随机噪声样本，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∼</mo><msub><mi>p</mi><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi></mrow></msub></mrow><annotation encoding="application/x-tex">x ∼ p_{data}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>代表的是训练数据，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G(z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span>代表用生成器G生成的图像，D就代表判别器的输出，可以认为是输入图像是real的概率，那相应的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>就是把训练图像判别为real的概率，而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D(G(z))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">G</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>就是把生成器生成的图像判别为real的概率。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="double-struck">E</mi></mrow><annotation encoding="application/x-tex">\mathbb{E}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbb">E</span></span></span></span></span>是期望的意思。</p><p>为了优化这个极小极大博弈，我们将在<img src="https://render.githubusercontent.com/render/math?math=G&amp;mode=inline" alt="" />的目标上采取梯度<em>下降</em>步数，在<img src="https://render.githubusercontent.com/render/math?math=D&amp;mode=inline" alt="" />的目标上采取梯度<em>上升</em>步数：<br />1.更新<strong>生成器</strong>（G），以最大限度地降低鉴别器做出正确选择的概率。让鉴别器猜错<br />2.更新<strong>鉴别器</strong>（D），以最大化uu鉴别器做出正确选择的概率。让鉴别器猜对</p><p>实践中，我们使用一个不同的目标</p><ol><li>更新生成器（G），使鉴别器D对生成的数据做出错误选择的概率最大化：</li></ol><p><img src="C:%5CUsers%5C12195%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210822174120324.png" alt="image-20210822174120324" /></p><ol start="2"><li>更新鉴别器（D），使鉴别器D对真实数据和生成的数据做出正确选择的概率最大化：</li></ol><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210822174224.png" alt="" /></p><h3 id="vanilla-gan"><a class="markdownIt-Anchor" href="#vanilla-gan"></a> Vanilla GAN</h3><p>首先是产生[-1,1]之间的噪声，利用torch.rand可以完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> torch.rand(batch_size, dim) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>  <span class="hljs-comment"># -1~1</span><br></code></pre></td></tr></table></figure><p>接下来是建立判别器D，结构如下：</p><ul><li>Fully connected layer with input size 784 and output size 256</li><li>LeakyReLU with alpha 0.01</li><li>Fully connected layer with input_size 256 and output size 256</li><li>LeakyReLU with alpha 0.01</li><li>Fully connected layer with input size 256 and output size 1</li></ul><p>接着是生成器G：</p><ul><li>Fully connected layer from noise_dim to 1024</li><li><code>ReLU</code></li><li>Fully connected layer with size 1024</li><li><code>ReLU</code></li><li>Fully connected layer with size 784</li><li><code>TanH</code> (to clip the image to be in the range of [-1,1])</li></ul><p>使用torch.nn.Sequential()建立即可。</p><p>接下来是GAN的loss函数，generator loss与discriminator loss的公式分别如下：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210822185507.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210822185514.png" alt="" /></p><p>之前的式子我们需要将其最大化，而损失函数的目标是最小化，所以添加负号方便计算。针对G，上式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mi>G</mi></msub></mrow><annotation encoding="application/x-tex">L_G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>目标即为使<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D(G(z))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">G</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>越大接近1，针对D，上式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mi>D</mi></msub></mrow><annotation encoding="application/x-tex">L_D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的目标是让<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>增大，让<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D(G(z))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">G</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>减小接近0。</p><p>使用<strong>二分类交叉熵损失函数</strong>(binary cross entropy loss)的形式，给定一个分值s和真实标签y，其公式为：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210822191615.png" alt="" /></p><p>一般s都是经过sigmoid或softmax将分数转化为的概率，这里使用sigmoid，将其化简：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210822191836.png" alt="" /></p><p>最后将上面红色和蓝色合并写成一个公式就是(仔细看下面的公式，当x为正时，就是上面的红色公式；当x为负时，就是上面的蓝色公式，总之就是使e的指数为负值)。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210822192907.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># discriminator_loss</span><br>true_labels = torch.ones(logits_real.shape[<span class="hljs-number">0</span>]).<span class="hljs-built_in">type</span>(dtype)<span class="hljs-comment"># </span><br>loss = bce_loss(logits_real, true_labels) + bce_loss(logits_fake, true_labels - <span class="hljs-number">1</span><br><br><span class="hljs-comment"># generator_loss</span><br>true_labels = torch.ones(logits_fake.shape[<span class="hljs-number">0</span>]).<span class="hljs-built_in">type</span>(dtype)<br>loss = bce_loss(logits_fake, true_labels)<br></code></pre></td></tr></table></figure><p>接着定义模型的优化器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">optimizer = optim.Adam(model.parameters(), betas=(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.999</span>), lr=<span class="hljs-number">1e-3</span>)<br></code></pre></td></tr></table></figure><h3 id="ls-gan"><a class="markdownIt-Anchor" href="#ls-gan"></a> LS-GAN</h3><p>LS-GAN是Least Squares GAN的简称，主要将GAN的生成器和判别器的损失函数都改了一下，可以更加稳定，生成器损失(generator loss)和判别器损失(discriminator loss)的公式分别为：</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210822195008.png" alt="" /></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># ls_discriminator_loss                                                   </span><br><span class="hljs-attribute">loss</span> = torch.mean(torch.pow(scores_real -<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))/<span class="hljs-number">2</span> + torch.mean(torch.pow(scores_fake, <span class="hljs-number">2</span>))/<span class="hljs-number">2</span><br><br><span class="hljs-comment"># ls_generator_loss</span><br><span class="hljs-attribute">loss</span> = torch.mean(torch.pow(scores_fake - <span class="hljs-number">1</span>, <span class="hljs-number">2</span>))/<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="dc-gan"><a class="markdownIt-Anchor" href="#dc-gan"></a> DC-GAN</h3><p>DC-GAN是Deeply Convolutional GANs的简称，原初来自于Ian Goodfellow的GAN里面网络结构都是线性层，没有卷积，而我们应用DCGAN的想法，就是构造模型时使用卷积神经网络和BatchNorm操作，会使得生成的图像更逼真。根据作业给出的结构编写模型代码。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vim"># build_dc_classifier<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">nn</span>.Sequential(<br>        Unflatten(batch_size, <span class="hljs-number">1</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>),<br>        <span class="hljs-keyword">nn</span>.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, stride=<span class="hljs-number">1</span>),<br>        <span class="hljs-keyword">nn</span>.LeakyReLU(),<br>        <span class="hljs-keyword">nn</span>.MaxPool2d(<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>),<br>        <span class="hljs-keyword">nn</span>.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, stride=<span class="hljs-number">1</span>),<br>        <span class="hljs-keyword">nn</span>.LeakyReLU(),<br>        <span class="hljs-keyword">nn</span>.MaxPool2d(<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>),<br>        <span class="hljs-keyword">nn</span>.Flatten(),<br>        <span class="hljs-keyword">nn</span>.Linear(<span class="hljs-number">4</span> * <span class="hljs-number">4</span> * <span class="hljs-number">64</span>, <span class="hljs-number">4</span> * <span class="hljs-number">4</span> * <span class="hljs-number">64</span>),<br>        <span class="hljs-keyword">nn</span>.LeakyReLU(),<br>        <span class="hljs-keyword">nn</span>.Linear(<span class="hljs-number">4</span> * <span class="hljs-number">4</span> * <span class="hljs-number">64</span>, <span class="hljs-number">1</span>)<br>    )<br><br># build_dc_generator<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">nn</span>.Sequential(<br>        <span class="hljs-keyword">nn</span>.Linear(noise_dim, <span class="hljs-number">1024</span>),<br>        <span class="hljs-keyword">nn</span>.ReLU(),<br>        <span class="hljs-keyword">nn</span>.BatchNorm1d(<span class="hljs-number">1024</span>),<br>        <span class="hljs-keyword">nn</span>.Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">7</span> * <span class="hljs-number">7</span> * <span class="hljs-number">128</span>),<br>        <span class="hljs-keyword">nn</span>.ReLU(),<br>        <span class="hljs-keyword">nn</span>.BatchNorm1d(<span class="hljs-number">7</span> * <span class="hljs-number">7</span> * <span class="hljs-number">128</span>),<br>        Unflatten(-<span class="hljs-number">1</span>, <span class="hljs-number">128</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>),<br>        <span class="hljs-keyword">nn</span>.ConvTranspose2d(<span class="hljs-number">128</span>, <span class="hljs-number">64</span>, <span class="hljs-number">4</span>, stride=<span class="hljs-number">2</span>, padding=<span class="hljs-number">1</span>),<br>        <span class="hljs-keyword">nn</span>.ReLU(),<br>        <span class="hljs-keyword">nn</span>.BatchNorm2d(<span class="hljs-number">64</span>),<br>        <span class="hljs-keyword">nn</span>.ConvTranspose2d(<span class="hljs-number">64</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, stride=<span class="hljs-number">2</span>, padding=<span class="hljs-number">1</span>),<br>        <span class="hljs-keyword">nn</span>.Tanh(),<br>        <span class="hljs-keyword">nn</span>.Flatten(<span class="hljs-number">1</span>)<br>    )<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210822220507.png" alt="" /><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210822220442.png" alt="" /><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210822220535.png" alt="" /></p><p>从最后效果来看，确实DCGAN的效果最好。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://blog.csdn.net/laizi_laizi/article/details/101443333?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-1.control&amp;spm=1001.2101.3001.4242">CS231n Spring 2019 Assignment 3—Generative Adversarial Networks (GANs)对抗生成网络</a></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs231n</tag>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cs231n-assignment2作业笔记</title>
    <link href="/2021/08/18/cs231n-assignment2%E4%BD%9C%E4%B8%9A%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/08/18/cs231n-assignment2%E4%BD%9C%E4%B8%9A%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="cs231n-assignment2"><a class="markdownIt-Anchor" href="#cs231n-assignment2"></a> CS231n-assignment2</h1><p>作业2的内容主要有：全连接神经网络（模块化实现），BatchNormalization，Dropout，CNN，Pytorch/Tensorflow。具体代码已经上传<a href="https://github.com/1219521375/CS231n2020">github</a>。</p><h2 id="fully-connected-neural-network"><a class="markdownIt-Anchor" href="#fully-connected-neural-network"></a> Fully connected Neural Network</h2><p>在上个作业中已经实现了两层全连接神经网络，但是代码不够模块化，不能方便将层数加深。将全连接层，relu层，softmax层都分别模块化为函数，每一层只需关注从后一层传回的梯度，再计算本层输入的梯度，一层层回传，就可以实现链式求导，代码编写逻辑与上一个作业类似，这里介绍神经网络的常用激活函数以及神经网络学习参数和搜索最优超参数的过程。</p><h3 id="常用激活函数"><a class="markdownIt-Anchor" href="#常用激活函数"></a> 常用激活函数</h3><h4 id="sigmoid"><a class="markdownIt-Anchor" href="#sigmoid"></a> sigmoid</h4><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210818170149.png" style="zoom:80%;" />$$\sigma =\frac{1}{1+e^{-x}}$$sigmoid函数将输入的一个实数“压缩”到0到1之间，大负数变为0，大正数变为1。sigmoid函数在神经网络的历史上经常使用，现在已经很少用到了，他有两个主要缺点：<ul><li><strong>Sigmoid函数饱和使梯度消失</strong>。sigmoid神经元有一个不好的特性，就是当神经元的激活在接近0或1处时会饱和：在这些区域，梯度几乎为0。回忆一下，在反向传播的时候，这个（局部）梯度将会与整个损失函数关于该门单元输出的梯度相乘。因此，如果局部梯度非常小，那么相乘的结果也会接近零，这会有效地“杀死”梯度，几乎就有没有信号通过神经元传到权重再到数据了。还有，为了防止饱和，必须对于权重矩阵初始化特别留意。比如，如果初始化权重过大，那么大多数神经元将会饱和，导致网络就几乎不学习了。</li><li><strong>Sigmoid函数的输出不是零中心的</strong>。这个性质并不是我们想要的，因为在神经网络后面层中的神经元得到的数据将不是零中心的。这一情况将影响梯度下降的运作，因为如果输入神经元的数据总是正数（比如在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>=</mo><msup><mi>w</mi><mi>T</mi></msup><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">f=w^Tx+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.924661em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>中每个元素x都＞0），那么关于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span> 的梯度在反向传播的过程中，将会要么全部是正数，要么全部是负数（具体依整个表达式 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 而定）。这将会导致梯度下降权重更新时出现z字型的下降。然而，可以看到整个批量的数据的梯度被加起来后，对于权重的最终更新将会有不同的正负，这样就从一定程度上减轻了这个问题。因此，该问题相对于上面的神经元饱和问题来说只是个小麻烦，没有那么严重。</li></ul><h4 id="tanh"><a class="markdownIt-Anchor" href="#tanh"></a> Tanh</h4><img src="https://bkimg.cdn.bcebos.com/pic/29381f30e924b8994bb77cac64061d950b7bf69f?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U5Mg==,g_7,xp_5,yp_5/format,f_auto" alt="img" style="zoom: 50%;" />$$tanh(x) = \frac{e^x-e^{-x}}{e^x+e^{-x}}$$tanh函数将实数值压缩到[-1,1]之间。和sigmoid一样，它也存在饱和问题，但是和sigmoid神经元不同的是，它的输出是零中心的。因此，在实际操作中，*tanh非线性函数比sigmoid非线性函数更受欢迎*。注意tanh神经元是一个简单放大的sigmoid神经元，具体说来就是：$tanh(x) = 2\sigma(2x)-1$<h4 id="relu"><a class="markdownIt-Anchor" href="#relu"></a> ReLU</h4><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210818172924.png" alt="" /></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>e</mi><mi>L</mi><mi>U</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ReLU(x)=max(0,x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault">e</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></span></p><p>当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>≤</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x\le0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时，梯度为0；<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>时，梯度为1。换句话说，这激活函数就是一个关于0的阈值。</p><h5 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点：</h5><ul><li>**加速收敛：**相较于sigmoid和tanh函数，ReLU对于随机梯度下降的收敛有巨大的加速作用（ <a href="https://link.zhihu.com/?target=http%3A//www.cs.toronto.edu/~fritz/absps/imagenet.pdf">Krizhevsky </a>等的论文指出有6倍之多）。据称这是由它的线性，非饱和的公式导致的。</li><li>**计算简单：**sigmoid和tanh神经元含有指数运算等耗费计算资源的操作，而ReLU可以简单地通过对一个矩阵进行阈值计算得到。</li></ul><h5 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点：</h5><ul><li>在训练的时候，ReLU单元比较脆弱并且可能“死掉”。举例来说，当一个很大的梯度流过ReLU的神经元的时候，可能会导致梯度更新到一种特别的状态，在这种状态下神经元将无法被其他任何数据点再次激活。如果这种情况发生，那么从此所以流过这个神经元的梯度将都变成0。也就是说，这个ReLU单元在训练中将不可逆转的死亡，因为这导致了数据多样化的丢失。例如，如果学习率设置得太高，可能会发现网络中40%的神经元都会死掉（在整个训练集中这些神经元都不会被激活）。通过合理设置学习率，这种情况的发生概率会降低。</li></ul><h4 id="leaky-relu"><a class="markdownIt-Anchor" href="#leaky-relu"></a> Leaky ReLU</h4><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210818173434.png" alt="" /></p><p>Leaky ReLU是为解决“ReLU死亡”问题的尝试。ReLU中当x&lt;0时，函数值为0。而Leaky ReLU则是给出一个很小的负数梯度值，比如0.01。公式中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是一个很小的常量。</p><h4 id="prelu"><a class="markdownIt-Anchor" href="#prelu"></a> PReLU</h4><p>PReLU就是将Leaky ReLU的参数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>增加科学系的特性，采用带动量的更新方式进行更新。</p><h4 id="maxout"><a class="markdownIt-Anchor" href="#maxout"></a> Maxout</h4><p>Maxout是对ReLU和leaky ReLU的一般化归纳，它的函数是：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><msubsup><mi>w</mi><mn>1</mn><mi>T</mi></msubsup><mi>x</mi><mo>+</mo><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><msubsup><mi>w</mi><mn>2</mn><mi>T</mi></msubsup><mi>x</mi><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">max(w_1^Tx+b_1,w_2^Tx+b_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0894389999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p><p>这样Maxout神经元就拥有ReLU单元的所有优点（线性操作和不饱和），而没有它的缺点（死亡的ReLU单元）。然而和ReLU对比，它每个神经元的参数数量增加了一倍，这就导致整体参数的数量激增。</p><p>Maxout的拟合能力是非常强的，它可以拟合任意的的凸函数。作者Goodfellow从数学的角度上也证明了这个结论，即只需2个 maxout 节点就可以拟合任意的凸函数了（相减），前提是”隐隐含层”节点的个数可以任意多。</p><h3 id="参数更新方法"><a class="markdownIt-Anchor" href="#参数更新方法"></a> 参数更新方法</h3><p>使用梯度与反向传播来更新参数。</p><h4 id="随机梯度下降sgd"><a class="markdownIt-Anchor" href="#随机梯度下降sgd"></a> 随机梯度下降SGD</h4><h5 id="普通更新"><a class="markdownIt-Anchor" href="#普通更新"></a> 普通更新</h5><p>最简单的更新形式是沿着负梯度方向改变参数（因为梯度指向的是上升方向，但是我们通常希望最小化损失函数）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 普通更新</span><br>x += - learning_rate * dx<br></code></pre></td></tr></table></figure><h5 id="动量更新momentum"><a class="markdownIt-Anchor" href="#动量更新momentum"></a> 动量更新（Momentum）</h5><p>把梯度dx理解成力，力是有大小和方向的，而且力可以改变速度的大小和方向，并且速度可以累积。把权值v理解成速度，表示参数移动的方向以及大小，初始为0。梯度改变时逐渐加速或减速导致速度v改变，v在每一段时间（每一次更新）后改变参数的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 动量更新</span><br>v = mu * v - learning_rate * dx <span class="hljs-comment"># 与速度融合</span><br>x += v <span class="hljs-comment"># 与位置融合</span><br></code></pre></td></tr></table></figure><p>引入了一个初始化为0的变量<strong>v</strong>和一个超参数<strong>mu</strong>。说得不恰当一点，这个变量（mu）在最优化的过程中被看做<em>动量</em>（一般值设为0.9），但其物理意义与摩擦系数更一致。这个变量有效地抑制了速度，降低了系统的动能，不然质点在山底永远不会停下来。通过交叉验证，这个参数通常设为[0.5,0.9,0.95,0.99]中的一个。和学习率随着时间退火（下文有讨论）类似，动量随时间变化的设置有时能略微改善最优化的效果，其中动量在学习过程的后阶段会上升。一个典型的设置是刚开始将动量设为0.5而在后面的多个周期（epoch）中慢慢提升到0.99。</p><h5 id="nesterov动量"><a class="markdownIt-Anchor" href="#nesterov动量"></a> Nesterov动量</h5><p>先利用x往v方向前进一步的位置来计算梯度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x_ahead = x + mu * v<br><span class="hljs-comment"># 计算dx_ahead(在x_ahead处的梯度，而不是在x处的梯度)</span><br>v = mu * v - learning_rate * dx_ahead<br>x += v<br></code></pre></td></tr></table></figure><h4 id="逐参数适应学习率方法"><a class="markdownIt-Anchor" href="#逐参数适应学习率方法"></a> 逐参数适应学习率方法</h4><h5 id="adagrad"><a class="markdownIt-Anchor" href="#adagrad"></a> Adagrad</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 假设有梯度和参数向量x</span><br>cache += dx**<span class="hljs-number">2</span><br>x += - learning_rate * dx / (np.sqrt(cache) + eps)<br></code></pre></td></tr></table></figure><p>注意，变量<strong>cache</strong>的尺寸和梯度矩阵的尺寸是一样的，还跟踪了每个参数的梯度的平方和。这个一会儿将用来归一化参数更新步长，归一化是逐元素进行的。注意，接收到高梯度值的权重更新的效果被减弱，而接收到低梯度值的权重的更新效果将会增强。有趣的是平方根的操作非常重要，如果去掉，算法的表现将会糟糕很多。用于平滑的式子<strong>eps</strong>（一般设为1e-4到1e-8之间）是防止出现除以0的情况。Adagrad的一个缺点是，在深度学习中单调的学习率被证明通常过于激进且过早停止学习。</p><h5 id="rmsprop"><a class="markdownIt-Anchor" href="#rmsprop"></a> RMSProp</h5><p>用一种很简单的方式修改了Adagrad方法，让它不那么激进，单调地降低了学习率。具体说来，就是它使用了一个梯度平方的滑动平均：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cache =  decay_rate * cache + (<span class="hljs-number">1</span> - decay_rate) * dx**<span class="hljs-number">2</span><br>x += - learning_rate * dx / (np.sqrt(cache) + eps)<br></code></pre></td></tr></table></figure><p>decay_rate是一个超参数，常用的值是[0.9,0.99,0.999]。其中<strong>x+=<strong>和Adagrad中是一样的，但是</strong>cache</strong>变量是不同的。因此，RMSProp仍然是基于梯度的大小来对每个权重的学习率进行修改，这同样效果不错。但是和Adagrad不同，其更新不会让学习率单调变小。</p><h5 id="adam"><a class="markdownIt-Anchor" href="#adam"></a> Adam</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">m = beta1*m + (<span class="hljs-number">1</span>-beta1)*dx<br>v = beta2*v + (<span class="hljs-number">1</span>-beta2)*(dx**<span class="hljs-number">2</span>)<br>x += - learning_rate * m / (np.sqrt(v) + eps)<br></code></pre></td></tr></table></figure><p>这个更新方法看起来真的和RMSProp很像，除了使用的是平滑版的梯度<strong>m</strong>，而不是用的原始梯度向量<strong>dx</strong>。论文中推荐的参数值<strong>eps=1e-8, beta1=0.9, beta2=0.999</strong>。在实际操作中，我们推荐Adam作为默认的算法，一般而言跑起来比RMSProp要好一点。但是也可以试试SGD+Nesterov动量。完整的Adam更新算法也包含了一个偏置*（bias）矫正*机制，因为<strong>m,v</strong>两个矩阵初始为0，在没有完全热身之前存在偏差，需要采取一些补偿措施。</p><h2 id="batch-normalization"><a class="markdownIt-Anchor" href="#batch-normalization"></a> Batch Normalization</h2><h3 id="数据预处理"><a class="markdownIt-Anchor" href="#数据预处理"></a> 数据预处理</h3><p>关于数据预处理我们有3个常用的符号，数据矩阵<strong>X</strong>，假设其尺寸是**[N x D]**（<strong>N</strong>是数据样本的数量，<strong>D</strong>是数据的维度）。有三种常用的预处理形式。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210819114546.png" alt="" /></p><ul><li><p><strong>均值减法（Mean subtraction</strong>）是预处理最常用的形式。它对数据中每个独立<em>特征</em>减去平均值，从几何上可以理解为在每个维度上都将数据云的中心都迁移到原点。在numpy中，该操作可以通过代码**X -= np.mean(X, axis=0)<strong>实现。而对于图像，更常用的是对所有像素都减去一个值，可以用</strong>X -= np.mean(X)**实现，也可以在3个颜色通道上分别操作。</p></li><li><p><strong>归一化（Normalization）<strong>是指将数据的所有维度都归一化，使其数值范围都近似相等。有两种常用方法可以实现归一化。第一种是先对数据做零中心化（zero-centered）处理，然后每个维度都除以其标准差，实现代码为</strong>X /= np.std(X, axis=0)</strong>。第二种方法是对每个维度都做归一化，使得每个维度的最大和最小值是1和-1。这个预处理操作只有在确信不同的输入特征有不同的数值范围（或计量单位）时才有意义，但要注意预处理操作的重要性几乎等同于学习算法本身。在图像处理中，由于像素的数值范围几乎是一致的（都在0-255之间），所以进行这个额外的预处理步骤并不是很必要。</p></li><li><p>**PCA和白化（Whitening）**是另一种预处理形式。在这种处理中，先对数据进行零中心化处理，然后计算协方差矩阵，它展示了数据中的相关性结构。PCA会将数据降维，留下方差最大的维度。通常使用PCA降维过的数据训练线性分类器和神经网络会达到非常好的性能效果，同时还能节省时间和存储器空间。白化操作的输入是特征基准上的数据，然后对每个维度除以其特征值来对数值范围进行归一化。该变换的几何解释是：如果数据服从多变量的高斯分布，那么经过白化后，数据的分布将会是一个均值为零，且协方差相等的矩阵。</p></li></ul><h3 id="batch-normalization-2"><a class="markdownIt-Anchor" href="#batch-normalization-2"></a> Batch Normalization</h3><p>使深层网络更容易训练的一种方法是使用更复杂的优化程序，如SGD+momentum、RMSProp或Adam。另一个策略是改变网络的架构，使其更易于培训。BN就是基于这种思想提出的算法。</p><p>当机器学习方法的输入数据由均值和单位方差为零的不相关特征组成时，机器学习方法的效果会更好。在训练神经网络时，我们可以先对数据进行预处理，然后再将其输入到网络中去相关；这将确保网络的第一层看到遵循良好分布的数据。然而，即使我们对输入数据进行预处理，网络深层的激活后的数据可能不再是去相关的，也不再具有零均值或单位方差，因为它们是从网络的早期层输出的。更糟糕的是，在训练过程中，随着各层权值的更新，网络各层特征的分布会发生变化。</p><p>BN层的具体做法是使用一小批数据来计算每一维度特征的平均值和标准差，然后做规范化，每个样本减去均值除以标准差，但有时候处理完之后的分布不一定是我们想要的（这样的规范反而会使网络表达能力下降），所以乘上缩放系数γ，加上偏移β。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210819181018.png" style="zoom:67%;" /><p>根据公式以及计算图，编写正向传播和反向传播的代码。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210819204945.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210819205020.png" alt="" /></p><h3 id="layer-normalization"><a class="markdownIt-Anchor" href="#layer-normalization"></a> Layer Normalization</h3><p>对每一个样本单独归一化。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210819221047.png" alt="" /></p><p>如上图，BN是对N个样本做归一化，固定channel（特征维度）；LN是对一个样本的所有channel通道做归一化，固定批次；IN计算均值和标准差时，同时固定channel和batch(在一个样本内中的一个通道内)，对HW作平均，GN计算均值和标准差时，固定batch且对channel作分组(在一个样本内对通道作分组)，在分组内对HW作平均。</p><p>具体到作业中，[N,D]N个样本D维度特征，BN是对N个样本做归一化，得到一个[D,]的平均向量（相当于一个平均样本）。LN是对每个样本做归一化，得到一个[N,]的平均向量（相当于N个平均样本呢）。</p><h2 id="dropout"><a class="markdownIt-Anchor" href="#dropout"></a> Dropout</h2><p>在训练的前向传递过程中随机概率p将一些输出设置为零，在测试时什么也不做（反向随机失活inverted dropout，普通的dropout在测试预测时也及进行随机失活），这些设置为零的输出在反向传播时也不向后传递梯度。一般会把这一层加在激活层之后。</p><h2 id="cnn"><a class="markdownIt-Anchor" href="#cnn"></a> CNN</h2><p>主要是实现卷积层conv、最大汇聚层max_pool、空间批量规范化层spatial_batchnorm。</p><h4 id="conv"><a class="markdownIt-Anchor" href="#conv"></a> conv</h4><p><img src="https://img-blog.csdnimg.cn/20200108193858419.gif" alt="img" /></p><p>卷积层前向传播的核心操作如下所示，结合上图，主要理解每一个卷积核的通道数都与输入的数据相同，同时有每个卷积核对应输出的一个通道。上图中，每一个卷积核均为3通道和图片相同，逐步滑过图片并加上bias成为输出的一个通道。本次作业中我们要做的就时找出每个每一个滑动的小窗口（使用切片）和卷积核相乘，形成一个单通道的feature map后，再加上bias，成为最终输出的一个通道。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># naive实现</span><br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):  <span class="hljs-comment"># 每个图片输入</span><br>neuron = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, H_pad - HH + <span class="hljs-number">1</span>, stride):  <span class="hljs-comment"># 最后一个在H_pad - HH,所以要+1</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, W_pad - WW + <span class="hljs-number">1</span>, stride):<br>x_col[:, neuron] = x_pad[index, :, i:i + HH, j:j + WW].reshape(C * HH * WW)<br>neuron += <span class="hljs-number">1</span><br>out[index] = (np.dot(w_row, x_col) + b.reshape(F, <span class="hljs-number">1</span>)).reshape(F, out_H, out_W)<br></code></pre></td></tr></table></figure><p>反向传播也是类似操作，注意其公式根本上来说类似于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">wx+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># naive实现</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(outH):<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(outW):<br><span class="hljs-comment"># 当前位置对应的图像的块</span><br>x_pad_t = x_pad[:, :, stride * i:stride * i + HH, stride * j:stride * j + WW]  <span class="hljs-comment"># N,C,HH,WW</span><br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>dx[p, :, stride * i:stride * i + HH, stride * j:stride * j + WW] += np.<span class="hljs-built_in">sum</span>(dout[p, :, i, j][:, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>] * w, axis=<span class="hljs-number">0</span>  <span class="hljs-comment"># F, * (F, C, HH, WW))  # C,HH,WW</span><br><span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(F):<br><span class="hljs-comment"># dout * x  C，HH,WW</span><br>dw[q] += np.<span class="hljs-built_in">sum</span>(dout[:, q, i, j][:, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>] * x_pad_t,axis=<span class="hljs-number">0</span>)  <span class="hljs-comment"># N, * N,C,HH,WW</span><br>dx = dx[:, :, pad:-pad, pad:-pad]<br></code></pre></td></tr></table></figure><h4 id="max_pool"><a class="markdownIt-Anchor" href="#max_pool"></a> max_pool</h4><p>最大汇聚层的操作相对简单，和卷积层类似，用一个滑动滑过后取最大值即可，反向传播时，也旨在最大的点传播梯度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># max_pool_forward_naive</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(outH):<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(outW):<br>out[:, :, i, j] = np.<span class="hljs-built_in">max</span>(x[:, :, i * stride:i * stride + pool_height, j * stride:j * stride + pool_width],axis=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># max_pool_backward_naive</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(outH):<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(outW):<br>x_t = x[:, :, i * stride:i * stride + pool_height, j * stride:j * stride + pool_width]<br>mask = x_t == np.<span class="hljs-built_in">max</span>(x_t, axis=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))[:, :, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>]<br>dx[:, :, i * stride:i * stride + pool_height, j * stride:j * stride + pool_width] = dout[:, :, i, j][:, :,<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>] * mask<br></code></pre></td></tr></table></figure><h4 id="spatial_batchnorm"><a class="markdownIt-Anchor" href="#spatial_batchnorm"></a> spatial_batchnorm</h4><p>空间批量规范化就是上一次作业的BN算法，将channel固定，把batch、H、W进行平均，得到一个[C，]的平均向量。</p><p>spatial_groupnorm在计算均值和标准差时，固定batch且对channel作分组(在一个样本内对通道作分组)，在分组内对HW作平均，即在N个批次和G个分组内进行平均。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">x = np.reshape(x, [N, G, C // G, H, W]) <span class="hljs-comment"># C/G向下取整 </span><br>mean = np.mean(x, (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>), keepdims=<span class="hljs-literal">True</span>)<br>var = np.var(x, (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>), keepdims=<span class="hljs-literal">True</span>)<br>out = (x - mean) / np.sqrt(var + eps)<br>out = out.reshape([N, C, H, W])<br>cache = x, G, gamma, beta, out.copy(), mean, var, eps<br>out = out * gamma + beta<br></code></pre></td></tr></table></figure><h2 id="pytorch"><a class="markdownIt-Anchor" href="#pytorch"></a> Pytorch</h2><p>cs231n的作业作为教程很不错了，这里记录一下一个pytorch搭建模型、训练的模板。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyModel</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, in_channel, channel_1, channel_2, num_classes</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-comment"># 1、函数式声明</span><br>        self.conv1 = nn.Conv2d(in_channel,channel_1,<span class="hljs-number">5</span>,padding=<span class="hljs-number">2</span>)<br>        self.conv2 = nn.Conv2d(channel_1,channel_2,<span class="hljs-number">3</span>,padding=<span class="hljs-number">1</span>)<br>        self.fc = nn.Linear(channel_2*<span class="hljs-number">32</span>*<span class="hljs-number">32</span>,num_classes)<br>        self.relu = nn.ReLU()<br>        <span class="hljs-comment"># ...</span><br>        <br>        <span class="hljs-comment"># 2、序列模型</span><br>        self.features = nn.Sequential()<br>        self.classifier = nn.Sequential()<br>        <br>        <span class="hljs-comment"># optional 初始化</span><br>        nn.init.kaiming_normal_(self.conv1.weight)<br>        nn.init.kaiming_normal_(self.conv2.weight)<br>        nn.init.kaiming_normal_(self.fc.weight)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, x</span>):</span><br>        <span class="hljs-comment"># 注意数据格式</span><br>        <span class="hljs-comment"># 1、函数式</span><br>        scores = <span class="hljs-literal">None</span><br>        out1 = self.relu(self.conv1(x))<br>        out2 = self.relu(self.conv2(out1))<br>        scores = self.fc(flatten(out2))<br>        <span class="hljs-keyword">return</span> scores<br>            <br>        <span class="hljs-comment"># 2、序列模型 </span><br>        x=self.features(x)<br>        x=x.view(x.size(<span class="hljs-number">0</span>),<span class="hljs-number">256</span>*<span class="hljs-number">1</span>*<span class="hljs-number">1</span>)<br>        x=self.classifier(x)<br>        <span class="hljs-keyword">return</span> x<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python">model = MyModel() <span class="hljs-comment"># 注意参数</span><br>model = model.to(device=device)  <span class="hljs-comment"># move the model parameters to CPU/GPU</span><br><br><span class="hljs-comment"># 根据情况修改</span><br>loss_function = nn.CrossEntropyLoss() <br>optimizer = optim.Adam(model.parameters(), lr=<span class="hljs-number">0.0003</span>)<br><br>acc_list = []<br>loss_list = []<br>best_acc = <span class="hljs-number">0</span><br>epochs = <span class="hljs-number">3</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>    model.train()  <span class="hljs-comment"># put model to training mode</span><br>    running_loss = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> step, (x, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(loader_train):<br>        <span class="hljs-comment"># e.g. images &amp; labels</span><br>        x = x.to(device=device, dtype=dtype)  <span class="hljs-comment"># move to device, e.g. GPU</span><br>        y = y.to(device=device, dtype=torch.long)<br><br>        scores = model(x)<br>        loss = loss_function(scores, y)<br><br>        <span class="hljs-comment"># 将优化器将更新的变量的所有梯度归零</span><br>        optimizer.zero_grad()<br>        <span class="hljs-comment"># 反向传播,计算模型中每个参数的损失梯度。</span><br>        loss.backward()<br>        <span class="hljs-comment"># 使用反向传播计算的梯度更新模型的参数</span><br>        optimizer.step()<br>        <br>        <span class="hljs-comment"># 实时输出loss数据</span><br>        running_loss += loss.item()<br>        <span class="hljs-comment"># 输出进度条</span><br>        rate = (step + <span class="hljs-number">1</span>) / <span class="hljs-built_in">len</span>(loader_train)<br>        a = <span class="hljs-string">&quot;*&quot;</span> * <span class="hljs-built_in">int</span>(rate * <span class="hljs-number">50</span>)<br>        b = <span class="hljs-string">&quot;.&quot;</span> * <span class="hljs-built_in">int</span>((<span class="hljs-number">1</span> - rate) * <span class="hljs-number">50</span>)<br>        print(<span class="hljs-string">&quot;\rtrain loss: &#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.3f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(rate * <span class="hljs-number">100</span>), a, b, loss), end=<span class="hljs-string">&quot;&quot;</span>)<br>        print()<br>        <br><br>    <span class="hljs-comment"># validate</span><br>    model.<span class="hljs-built_in">eval</span>()<br>    acc = <span class="hljs-number">0.0</span>  <span class="hljs-comment"># accumulate accurate number / epoch</span><br>    val_num = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> loader_val:<br>            x = x.to(device=device, dtype=dtype)  <span class="hljs-comment"># move to device, e.g. GPU</span><br>            y = y.to(device=device, dtype=torch.long)<br>            outputs = model(x)  <span class="hljs-comment"># eval model only have last output layer</span><br>            predict_y = torch.<span class="hljs-built_in">max</span>(outputs, dim=<span class="hljs-number">1</span>)[<span class="hljs-number">1</span>]<br>            acc += (predict_y == y).<span class="hljs-built_in">sum</span>().item()<br>            val_num += predict_y.size(<span class="hljs-number">0</span>)<br>        val_accurate = acc / val_num<br>        acc_list.append(val_accurate)<br>        loss_list.append( running_loss / step)<br>        <span class="hljs-keyword">if</span> val_accurate &gt; best_acc:<br>            best_acc = val_accurate<br>            <span class="hljs-comment"># torch.save(net.state_dict(), save_path)</span><br>        print(<span class="hljs-string">&#x27;[epoch %d] train_loss: %.3f  test_accuracy: %.3f  loss&#x27;</span> %<br>              (epoch + <span class="hljs-number">1</span>, running_loss / step, val_accurate))<br><br>print(<span class="hljs-string">&#x27;Best_acc = %.3f&#x27;</span>% (best_acc))        <br>print(<span class="hljs-string">&#x27;Finished Training&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://zhuanlan.zhihu.com/p/21798784?refer=intelligentunit">https://zhuanlan.zhihu.com/p/21798784?refer=intelligentunit</a></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs231n</tag>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cs231n-assignment1作业笔记</title>
    <link href="/2021/08/16/cs231n-assignment1%E4%BD%9C%E4%B8%9A%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/08/16/cs231n-assignment1%E4%BD%9C%E4%B8%9A%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="cs231n-assignment1"><a class="markdownIt-Anchor" href="#cs231n-assignment1"></a> CS231n-assignment1</h1><p>CS231n的作业一主要有以下内容：KNN、SVM、softmax、Two Layer Neural NetWork，本文主要记录算法思想，代码上传至https://github.com/1219521375/CS231n2020。</p><h2 id="knn"><a class="markdownIt-Anchor" href="#knn"></a> KNN</h2><p>knn是一个非常简单的机器学习算法，其思想可以用一句话概括，即<strong>输出与输入样本最相似的k个样本的标签</strong>。那么算法的核心就在于<strong>如何界定两个样本的相似度</strong>上，常用的有L1距离（即曼哈顿距离），L2距离，余弦距离等。作业里使用的是L2距离：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msqrt><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>N</mi></munderover><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>y</mi><mi>i</mi></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">distance(x,y) = \sqrt{\sum_{i=0}^N(x_i-y_i)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.3337550000000005em;vertical-align:-1.277669em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0560860000000005em;"><span class="svg-align" style="top:-5.293754999999999em;"><span class="pstrut" style="height:5.293755em;"></span><span class="mord" style="padding-left:1.056em;"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-4.0160860000000005em;"><span class="pstrut" style="height:5.293755em;"></span><span class="hide-tail" style="min-width:0.742em;height:3.373755em;"><svg width='400em' height='3.373755em' viewBox='0 0 400000 3373' preserveAspectRatio='xMinYMin slice'><path d='M702 80H400000v40H742v3239l-4 4-4 4c-.667.7-2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1h-12l-28-84c-16.667-52-96.667-294.333-240-727l-212 -643 -85 170c-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667 219 661 l218 661zM702 80H400000v40H742z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span></span></span></span></span></p><p>在图像间距离的计算上，简单粗暴地将32x32x3的矩阵拉成一个3072维的向量，计算每个像素点的差值。</p><p>具体任务上，KNN算法没有传统机器学习任务的先训练后预测的步骤，所有的数据样本就是它的模型。当一个新样本开始预测时，计算它到所有当前数据样本的距离；当有x个待预测样本，y个数据样本时，就需要计算一个[x,y]的距离矩阵。</p><h2 id="svmsoftmax"><a class="markdownIt-Anchor" href="#svmsoftmax"></a> SVM&amp;softmax</h2><p>在之前的博客中有记录过<a href="https://blog.pokestar.wang/2021/04/25/SVM&amp;softmax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94cs231n%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/">SVM&amp;softmax学习笔记</a>。</p><h2 id="two-layer-net"><a class="markdownIt-Anchor" href="#two-layer-net"></a> Two Layer Net</h2><p>两层全连接神经网络。重要点是理解前向传播与反向传播。</p><h4 id="两层全连接神经网络的结构如下"><a class="markdownIt-Anchor" href="#两层全连接神经网络的结构如下"></a> 两层全连接神经网络的结构如下：</h4><p>input - fully connected layer - ReLU - fully connected layer - softmax</p><p>其中relu是一个简单的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">max(0,x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>函数，softmax函数在上节中讲到，将每一类的最终得分转化成相加和为1的概率。</p><p>而剩下的就是一个全连接层(fully connected layer)了。单层的全连接层其实就是一个线性回归，公式如下：$$ y=W*x+b $$。假设输入为N个D维向量，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">[</mo><mi>N</mi><mo separator="true">,</mo><mi>D</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x=[N,D]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mclose">]</span></span></span></span>，那么权重矩阵即为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi><mo>=</mo><mo stretchy="false">[</mo><mi>D</mi><mo separator="true">,</mo><mi>H</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">W=[D,H]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mclose">]</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span></span></span></span>是所谓全连接层神经元的数量，就是神经网络的宽度。至此，神经网络的前向传播已经显而易见，将输入一层层经过上述网络层即可。</p><h4 id="反向传播"><a class="markdownIt-Anchor" href="#反向传播"></a> 反向传播</h4><p>反向传播是利用<strong>链式法则</strong>递归计算表达式的梯度的方法。理解反向传播过程及其精妙之处，对于理解、实现、设计和调试神经网络非常<strong>关键</strong>。</p><p>神经网络使用梯度来更新权重，梯度即导数是函数上升最快的方向，那么梯度的负向即减去梯度就可以使函数不断下降至最低点，就可以拟合函数。</p><h5 id="先从简单表达式入手"><a class="markdownIt-Anchor" href="#先从简单表达式入手"></a> 先从简单表达式入手</h5><ul><li>考虑一个简单二元函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">f(x,y) = xy</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>，对两个变量分别求偏导，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>f</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mi>y</mi><mo separator="true">,</mo><mfrac><mrow><mi>d</mi><mi>f</mi></mrow><mrow><mi>d</mi><mi>y</mi></mrow></mfrac><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\frac{df}{dx}=y,\frac{df}{dy}=x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4133239999999998em;vertical-align:-0.481108em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>，也就是说，对于二元乘法来说，变量的梯度（导数）为它所乘的另一个变量。</li><li>对于简单的加法函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">f(x,y)=x+y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>，容易看出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x,y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>的梯度（导数）均为1。</li><li>对于最大值函数（relu）<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x,y)=max(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>，求导得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>f</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mn>1</mn><mo stretchy="false">(</mo><mi>x</mi><mo>≥</mo><mi>y</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mfrac><mrow><mi>d</mi><mi>f</mi></mrow><mrow><mi>d</mi><mi>y</mi></mrow></mfrac><mo>=</mo><mn>1</mn><mo stretchy="false">(</mo><mi>y</mi><mo>≥</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{df}{dx}=1(x\ge y),\frac{df}{dy}=1(y\ge x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4133239999999998em;vertical-align:-0.481108em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>，可以看出，如果一个变量比另一个变量大，那么梯度是1，反之为0。</li></ul><h5 id="使用链式法则计算复合表达式"><a class="markdownIt-Anchor" href="#使用链式法则计算复合表达式"></a> 使用链式法则计算复合表达式</h5><ul><li>考虑一个复合函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">f(x,y,z) = (x+y)*z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span>，使用链式法则将表达式拆分成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mo>=</mo><mi>x</mi><mo>+</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">q=x+y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>=</mo><mi>q</mi><mi>z</mi></mrow><annotation encoding="application/x-tex">f=qz</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span>，容易看出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>q</mi></mrow></mfrac><mo>=</mo><mi>z</mi><mo separator="true">,</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>z</mi></mrow></mfrac><mo>=</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">\frac{\partial f}{\partial q}=z,\frac{\partial f}{\partial z}=q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4133239999999998em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>，而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x,y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>的偏导都为1，我们需要求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>对于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x,y,z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span>的梯度，链式法则指出将这些梯度表达式链接起来的正确方式是相乘，如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>q</mi></mrow></mfrac><mo>∗</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>q</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\partial f}{\partial x}=\frac{\partial f}{\partial q}*\frac{\partial q}{\partial x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4133239999999998em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，实际操作中算出两个简单梯度后相乘即可。</li></ul><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210817221709.png"  /><p>上述操作可以用上面的计算图表示，绿色数字为前向传播<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>2</mn><mo>+</mo><mn>5</mn><mo stretchy="false">)</mo><mo>∗</mo><mo>−</mo><mn>4</mn><mo>=</mo><mo>−</mo><mn>12</mn></mrow><annotation encoding="application/x-tex">(-2+5)*-4=-12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">2</span></span></span></span>，红色数字为反向传播，假设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>处得到的回传梯度为1，经过一个乘法门，梯度为相乘的变量的值，所以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>的梯度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∗</mo><mi>z</mi><mo>=</mo><mo>−</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">1*z=-4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">4</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span>的梯度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∗</mo><mi>q</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">1*q=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>。而加法门的梯度均为1，所以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x,y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>的梯度均为-4。</p><p>更复杂的情况，可以参考这副sigmoid函数的计算图理解。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210817223625.png" style="zoom:80%;" /><h4 id="反向传播小结"><a class="markdownIt-Anchor" href="#反向传播小结"></a> 反向传播小结</h4><ul><li><strong>加法门</strong>将输出的梯度相等地分发给它所有的输入，这一行为与输入值在前向传播时的值无关。这是因为加法操作的局部梯度都是简单的+1，所以所有输入的梯度实际上就等于输出的梯度，因为乘以1.0保持不变。</li><li><strong>取最大值门单元</strong>对梯度做路由。和加法门不同，取最大值门将梯度转给其中一个输入，这个输入是在前向传播中值最大的那个输入。这是因为在取最大值门中，最高值的局部梯度是1.0，其余的是0。</li><li><strong>乘法门单元</strong>相对不容易解释。它的局部梯度就是输入值，但是是相互交换之后的，然后根据链式法则乘以输出值的梯度。</li></ul><p>注意一种比较特殊的情况，如果乘法门单元的其中一个输入非常小，而另一个输入非常大，那么乘法门的操作将会不是那么直观：它将会把大的梯度分配给小的输入，把小的梯度分配给大的输入。在线性分类器<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi><mo>∗</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">W*x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>中，这表示输入数据的大小对于权重梯度的大小有影响，这就是为什么数据预处理关系重大，它即使只是有微小变化，也会产生巨大影响。</p><p>以上所有概念都适用于矩阵和向量操作，只需要注意维度和转置操作。</p><p>了解了以上操作之后，写相应的作业代码就比较简单了。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://zhuanlan.zhihu.com/p/21407711?refer=intelligentunit">CS231n课程笔记翻译：反向传播笔记</a></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs231n</tag>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-Faster RCNN</title>
    <link href="/2021/08/11/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Faster-RCNN/"/>
    <url>/2021/08/11/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Faster-RCNN/</url>
    
    <content type="html"><![CDATA[<h1 id="faster-rcnn"><a class="markdownIt-Anchor" href="#faster-rcnn"></a> Faster RCNN</h1><h3 id="论文要点"><a class="markdownIt-Anchor" href="#论文要点"></a> 论文要点</h3><p>摒弃了使用selective search算法，使用了一个<strong>RPN</strong>的网络去生成候选框，首先让输入图像经过CNN网络，得到一个feature map，然后一方面利用RPN网络去产生候选框，然后把候选框在feature map的区域经过RoI pooling产生一个尺度固定的特征向量，接着进入全连接层做分类以及边框回归。并且，使得RPN和Fast R-CNN共享了CNN特征。</p><ul><li>实现了真正的端到端训练</li><li>实现了实时监测</li></ul><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210813162008.png" alt="" /></p><h2 id="faster-rcnn主要流程"><a class="markdownIt-Anchor" href="#faster-rcnn主要流程"></a> Faster RCNN主要流程</h2><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210813163406.png"  /><p>结合图1以及以VGG16作为特征提取网络的图2来阐述FasterRCNN网络的主要流程。</p><ul><li>首先将输入的任意大小的图片缩放至MxN大小，送入<strong>卷积网络</strong>来提取特征。此处示例为VGG16，共13层卷积层，得到特征图Feature Map。此Feature Map共享于后续RPN网络提取proposal与ROI pooling层提取对应的区域特征。</li><li><strong>RPN网络</strong>接受FeatureMap输入，生成region proposals，再通过softmax判断anchors属于positive还是negative（即生成的anchors对应物体还是背景），再利用bounding box regression修正anchors获得精确的proposals。</li><li><strong>ROI pooling层</strong>接受完整Feature Map和RPN网络提出的proposals，综合信息后提取proposals对应的Features。</li><li>最后的全连接层和softmax层接受proposals features，计算proposals对应的类别以及再次bounding box regression获得检测框最终的精确位置。</li></ul><h2 id="卷积网络"><a class="markdownIt-Anchor" href="#卷积网络"></a> 卷积网络</h2><p>Faster RCNN的卷积层为VGG16，conv层均采用kernel_Size=3, pad=1, stride=1,可以使卷积层不改变输入输出矩阵的大小。而pooling层kernel_size=2, pad=0,stride=2，使输出长宽变为输入的1/2。则最终MxN矩阵的对应输出为(M/16)x(N/16)的Feature map，易于与原图对应。</p><h2 id="区域生成网络rpn"><a class="markdownIt-Anchor" href="#区域生成网络rpn"></a> 区域生成网络RPN</h2><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210813171835.png" alt="" /></p><p>RPN网络分为两条线，一条为通过softmax分类anchors获得positive和negative分类，下面一条用于计算对于anchors的bounding box regression偏移量，以获得精确的proposal。而最后的Proposal层则负责综合positive anchors和对应bounding box regression偏移量获取proposals，同时剔除太小和超出边界的proposals。其实整个网络到了Proposal Layer这里，就完成了相当于目标定位的功能。</p><h3 id="anchors"><a class="markdownIt-Anchor" href="#anchors"></a> anchors</h3><p>生成anchors其实是生成一组矩形，一个anchor对应一个矩形，每个矩形由四个值组成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_1,y_1,x_2,y_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，分别表示矩形左上和右下角坐标。直接运行作者demo中的generate_anchors.py可以得到以下输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">[[ -<span class="hljs-number">84.</span>  -<span class="hljs-number">40.</span>   <span class="hljs-number">99.</span>   <span class="hljs-number">55.</span>]<br> [-<span class="hljs-number">176.</span>  -<span class="hljs-number">88.</span>  <span class="hljs-number">191.</span>  <span class="hljs-number">103.</span>]<br> [-<span class="hljs-number">360.</span> -<span class="hljs-number">184.</span>  <span class="hljs-number">375.</span>  <span class="hljs-number">199.</span>]<br> [ -<span class="hljs-number">56.</span>  -<span class="hljs-number">56.</span>   <span class="hljs-number">71.</span>   <span class="hljs-number">71.</span>]<br> [-<span class="hljs-number">120.</span> -<span class="hljs-number">120.</span>  <span class="hljs-number">135.</span>  <span class="hljs-number">135.</span>]<br> [-<span class="hljs-number">248.</span> -<span class="hljs-number">248.</span>  <span class="hljs-number">263.</span>  <span class="hljs-number">263.</span>]<br> [ -<span class="hljs-number">36.</span>  -<span class="hljs-number">80.</span>   <span class="hljs-number">51.</span>   <span class="hljs-number">95.</span>]<br> [ -<span class="hljs-number">80.</span> -<span class="hljs-number">168.</span>   <span class="hljs-number">95.</span>  <span class="hljs-number">183.</span>]<br> [-<span class="hljs-number">168.</span> -<span class="hljs-number">344.</span>  <span class="hljs-number">183.</span>  <span class="hljs-number">359.</span>]]<br></code></pre></td></tr></table></figure><p>九个矩形共有三种形状，长宽比约为1：1，1：2，2：1三种，如下图（三个绿色大矩形和三个红色中矩形和三个蓝色小矩形）。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210813173345.png" alt="" /></p><p>anchors的size是根据网络输入图像大小设置的，paper中将输入图像reshape成800x600，而anchors的最大为352x704或736x384，基本涵盖图像。</p><p>而这9个大小不一的anchors会遍历卷积层计算得到的feature maps，为每一个点配备这九种anchors为初始检测框，后续再进行修正。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210814095238.png" alt="" /></p><p>上图中，卷积层输出feature map，最后一个卷积层维度为256，即由256张特征图，相当于feature map每一个点都是256维。而后RPN网络又对feature map做3x3的卷积（红框），相当于每个点融合3x3的空间信息，同时保持256维度不变。</p><p>假设feature每个点上有k个anchor（默认为k=9），每个anchor要计算其为positive还是negative，所以一个点有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>l</mi><mi>s</mi><mo>=</mo><mi>k</mi><mo>∗</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">cls=k*2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>个scores，而每个anchor有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>w</mi><mo separator="true">,</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y,w,h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span>四个偏移量，所以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>g</mi><mo>=</mo><mi>k</mi><mo>∗</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">reg=k*4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>个。</p><p>同时，训练所有得到的anchors消耗太大，所以训练程序会在<strong>合适</strong>的anchors中<strong>随机</strong>选取128个positive anchors和128个negative anchors及进行训练。</p><h4 id="以vgg为例"><a class="markdownIt-Anchor" href="#以vgg为例"></a> 以VGG为例</h4><p>网络输入原图大小为800x600，前文提到VGG的卷积层相当于下采样16倍，得到的feature map大小为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>800</mn><mi mathvariant="normal">/</mi><mn>16</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mn>600</mn><mi mathvariant="normal">/</mi><mn>16</mn><mo stretchy="false">)</mo><mo>=</mo><mn>50</mn><mo>∗</mo><mn>38</mn></mrow><annotation encoding="application/x-tex">(800/16)*(600/16) = 50*38</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">8</span><span class="mord">0</span><span class="mord">0</span><span class="mord">/</span><span class="mord">1</span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">6</span><span class="mord">0</span><span class="mord">0</span><span class="mord">/</span><span class="mord">1</span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">8</span></span></span></span>（向上取整），则最后的anchors数量为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>50</mn><mo>∗</mo><mn>38</mn><mo>∗</mo><mn>9</mn><mo>=</mo><mn>17100</mn></mrow><annotation encoding="application/x-tex">50*38*9=17100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span>个。</p><h3 id="softmax判定positive和negative"><a class="markdownIt-Anchor" href="#softmax判定positive和negative"></a> softmax判定positive和negative</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210814104236.png" alt="" /></p><p>一副MxN大小的矩阵送入Faster RCNN网络后，到RPN网络变为(M/16)x(N/16)，不妨设 W=M/16，H=N/16。在进入reshape与softmax之前，先做了1x1卷积，将channel输出为18，则输出feature map大小为WxHx18，18的原因是每一个点都有9个anchors，同时每个anchors又有可能是positive和negative，所有这些信息都保存WxHx(9*2)大小的矩阵。其后的两个reshape是为了在caffe中方便softmax分类，WxHx(9*2)的feature map其在caffe blob中的存储形式为[1, 2x9, H, W]。而在softmax分类时需要进行positive/negative二分类，所以reshape layer会将其变为[1, 2, 9xH, W]大小，即单独“腾空”出来一个维度以便softmax分类，之后再reshape为原状。贴一段caffe softmax_loss_layer.cpp的reshape函数的解释，非常精辟：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;Number of labels must match number of predictions; &quot;</span><br><span class="hljs-string">&quot;e.g., if softmax axis == 1 and prediction shape is (N, C, H, W), &quot;</span><br><span class="hljs-string">&quot;label count (number of labels) must be N*H*W, &quot;</span><br><span class="hljs-string">&quot;with integer values in &#123;0, 1, ..., C-1&#125;.&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="bounding-box-regression"><a class="markdownIt-Anchor" href="#bounding-box-regression"></a> bounding box regression</h3><p>此处与Fast RCNN中的soomthL1损失类似。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210814115238.png" alt="" /></p><p>此处1x1的卷积将feature map输出为WxHx36，在caffe blob中存储为[1, 4x9, H, W]，这里相当于feature maps每个点都有9个anchors，每个anchors又都有4个用于回归的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>d</mi><mi>y</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>d</mi><mi>w</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>d</mi><mi>h</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d_x(A),d_y(A),d_w(A),d_h(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span>变量。</p><h3 id="proposal-layer"><a class="markdownIt-Anchor" href="#proposal-layer"></a> Proposal Layer</h3><p>Proposal Layer综合positive anchors和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>d</mi><mi>y</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>d</mi><mi>w</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>d</mi><mi>h</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d_x(A),d_y(A),d_w(A),d_h(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span>变量，计算出精准的proposal。传入的im_info=[M, N, scale_factor]保存了任意图像resize到MxN的变换信息</p><p>Proposal Layer forward（caffe layer的前传函数）按照以下顺序依次处理：</p><ol><li>生成anchors，利用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>d</mi><mi>y</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>d</mi><mi>w</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>d</mi><mi>h</mi></msub><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d_x(A),d_y(A),d_w(A),d_h(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span>对所有anchors做边界框回归。</li><li>按照输入的positive softmax scores由大到小排序anchors，提取前pre_nms_topN(e.g. 6000)个anchors，即提取修正位置后的positive anchors</li><li>限定超出图像边界的positive anchors为图像边界，防止后续roi pooling时proposal超出图像边界</li><li>剔除尺寸非常小的positive anchors</li><li>对剩余的positive anchors进行NMS（非极大值抑制，从重叠的边界框中找出最大概率的边界框）</li><li>Proposal Layer有3个输入：positive和negative anchors分类器结果rpn_cls_prob_reshape，对应的bbox reg的(e.g. 300)结果作为proposal输出</li></ol><p>RPN网络结构就介绍到这里，总结起来就是：<br /><strong>生成anchors -&gt; softmax分类器提取positvie anchors -&gt; bbox reg回归positive anchors -&gt; Proposal Layer生成proposals</strong></p><h2 id="roi-pooling层"><a class="markdownIt-Anchor" href="#roi-pooling层"></a> ROI pooling层</h2><p>RoI Pooling层负责收集proposal，并计算出proposal feature maps，送入后续网络。从图2中可以看到Rol pooling层有2个输入：</p><ol><li>原始的feature maps</li><li>RPN输出的proposal boxes（大小各不相同）</li></ol><p>ROI pooling层解决了传统CNN网络输入输出的图片(feature map)大小必须固定的问题，可以使得不同大小的proposal得到相同大小的feature map，具体原理见上篇博客。</p><h2 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h2><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210814191047.png" alt="" /></p><p>输入proposal feature maps，通过full connect层与softmax计算每个proposal具体属于那个类别（如人，车，电视等），输出cls_prob概率向量；同时再次利用bounding box regression获得每个proposal的位置偏移量bbox_pred，用于回归更加精确的目标检测框。</p><h2 id="训练"><a class="markdownIt-Anchor" href="#训练"></a> 训练</h2><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210814192625.png"  /><p>训练流程图大致如上，Faster RCNN使用一种类似迭代的四步交替训练法。</p><ol><li>用ImageNet预训练模型初始化RPN网络，并为区域建议进行微调。</li><li>们通过 Fast R-CNN使⽤第⼀步RPN⽣成的提议 来训练⼀个单独的检测网络。这个检测网络也是由ImageNet预训练的模型初始化的。在这⼀点上，这两个网络不共享卷积层。</li><li>使用检测器网络来初始化RPN训练，但我们固定了共享卷积层，只对RPN特有的层进行微调。现 在，这两个网络共享卷积层</li><li>保持共享卷积层固定，对FastRCNN的特有网络层进行微调。</li></ol><p>这里大约进行了两次迭代训练，因为在作者的试验下，更多次数的迭代提升效果不大。</p><h3 id="rpn-loss"><a class="markdownIt-Anchor" href="#rpn-loss"></a> RPN loss</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210814212149.png" alt="" /></p><p>上述公式中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>表示anchors index，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示positive softmax probability，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>p</mi><mi>i</mi><mo>∗</mo></msubsup></mrow><annotation encoding="application/x-tex">p_i^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.94736em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span></span></span></span>代表对应的GT predict概率（即当第i个anchor与GT间IoU&gt;0.7，认为是该anchor是positive，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>p</mi><mi>i</mi><mo>∗</mo></msubsup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p_i^*=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.94736em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>；反之IoU&lt;0.3时，认为是该anchor是negative，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>p</mi><mi>i</mi><mo>∗</mo></msubsup><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p_i^*=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.94736em;vertical-align:-0.258664em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>；至于那些0.3&lt;IoU&lt;0.7的anchor则不参与训练)；<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>代表predict bounding box，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>t</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">t^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>代表对应positive anchor对应的GT box。</p><p>公式分为两部分，左边为softmax loss，用于分类anchors为positive与negative，右边为soomth L1loss，用于bounding box regression网络训练。实际使用中，二者有数量差距，用参数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span>来平衡二者，一般设置为10。</p><p>最终训练的loss是RPN的loss+Faster RCNN的loss</p><h4 id="为何有roi-pooling还要把输入图片resize到固定大小的mxn"><a class="markdownIt-Anchor" href="#为何有roi-pooling还要把输入图片resize到固定大小的mxn"></a> 为何有ROI Pooling还要把输入图片resize到固定大小的MxN</h4><p>由于引入ROI Pooling，从原理上说Faster R-CNN确实能够检测任意大小的图片。但是由于在训练的时候需要使用大batch训练网络，而不同大小输入拼batch在实现的时候代码较为复杂，而且当时以Caffe为代表的第一代深度学习框架也不如Tensorflow和PyTorch灵活，所以作者选择了把输入图片resize到固定大小的800x600。这应该算是历史遗留问题。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://www.zhihu.com/question/35887527/answer/702790168">https://www.zhihu.com/question/35887527/answer/702790168</a></p><p><a href="https://zhuanlan.zhihu.com/p/31426458">https://zhuanlan.zhihu.com/p/31426458</a></p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-Fast RCNN</title>
    <link href="/2021/08/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Fast-RCNN/"/>
    <url>/2021/08/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Fast-RCNN/</url>
    
    <content type="html"><![CDATA[<h1 id="fast-rcnn"><a class="markdownIt-Anchor" href="#fast-rcnn"></a> Fast RCNN</h1><h3 id="论文要点"><a class="markdownIt-Anchor" href="#论文要点"></a> 论文要点：</h3><ol><li>使用多任务loss联合了分类与位置精修（边界回归），实现了大部分阶段的端到端训练。</li><li>相比RCNN，解决了每个候选区域进行重复特征提取计算的问题。（ROI pooling）</li><li>同时相比SPPnet，使用单一尺度的ROI达到了更好的速度/精度平衡。</li></ol><h2 id="相关知识"><a class="markdownIt-Anchor" href="#相关知识"></a> 相关知识</h2><h3 id="roi-pooling层"><a class="markdownIt-Anchor" href="#roi-pooling层"></a> ROI Pooling层</h3><p>ROI层可以将不同大小的输入映射到一个固定尺度的特征向量，解决了输入图片的size不同导致得到的feature map不同不能直接连接到一个全连接层进行分类的问题。</p><h4 id="spp-net的spatial-pyramid-pooling层-spp层下图黑框"><a class="markdownIt-Anchor" href="#spp-net的spatial-pyramid-pooling层-spp层下图黑框"></a> SPP-Net的Spatial Pyramid Pooling层 (SPP层)，下图黑框</h4><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210811101056.png" style="zoom:67%;" /><h5 id="具体流程"><a class="markdownIt-Anchor" href="#具体流程"></a> 具体流程:</h5><p>假设输入ROI Pooling层的feature map of conv5的shape是(h,w,c)</p><ol><li>首先ROI Pooling层把feature map of conv5划分成4x4的小方块网格(对应图中蓝色矩形，即把输入均分成4x4份)，每个小方块的宽高分别为w/4，h/4，通道数为c，不能整除时需要取整.针对feature map的每个通道,分别在这16个小方块进行最大池化(MaxPooling),也就是取出小方块里的最大值.每一个通道都能取出16个最大值,所以所有通道共有16c个值</li><li>然后ROI Pooling层把feature map of conv5划分成2x2的小方块(对应图中绿色矩形),使用同样的方法得到4c个值</li><li>接着ROI Pooling层把feature map of conv5划分成1x1的小方块(对应图中灰色矩形),得到c个值</li><li>最后将上面三个值串联起来得到长度为16c+4c+c=21c的特征表示</li></ol><h4 id="fast-rcnn的roi-pooling层"><a class="markdownIt-Anchor" href="#fast-rcnn的roi-pooling层"></a> Fast RCNN的ROI Pooling层</h4><p>FastRCNN的单尺度ROI层是SPP层的变种，SPP是pooling成多个固定尺度（1x1, 2x2, 4x4……），ROI只pooling到一个固定的尺度（如6×6）。</p><h5 id="具体流程-2"><a class="markdownIt-Anchor" href="#具体流程-2"></a> 具体流程：</h5><p>假设有一个8*8大小的feature map，一个ROI，以及输出大小为2*2.</p><ol><li>输入的固定大小的feature map</li></ol><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210811102047.png" style="zoom: 67%;" /><ol start="2"><li>region proposal 投影之后位置（左上角，右下角坐标）：（0，3），（7，8）。即为黑框，即所谓候选区域。<strong>在原论文中，位置四元组为左上角坐标以及高度和宽度。</strong></li></ol><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210811102138.png" style="zoom:67%;" /><ol start="3"><li>将其划分为（2*2）个sections（因为输出大小为2*2），我们可以得到：</li></ol><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210811102313.png" style="zoom:67%;" /><ol start="4"><li>对每个section做max pooling，可以得到：</li></ol><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210811102346.png" alt="" /></p><p><strong>训练时</strong>，将一个图片产生的候选区域作为一批进行训练，候选区域的坐标直接映射到conv5层上，将pooling5层用ROI层替换，就可以输出每个候选区域一致的特征向量。</p><h2 id="fast-rcnn结构"><a class="markdownIt-Anchor" href="#fast-rcnn结构"></a> Fast RCNN结构</h2><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210811110639.png" style="zoom:67%;" /><h3 id="训练"><a class="markdownIt-Anchor" href="#训练"></a> 训练</h3><p>我们提出了⼀种更有效的训练⽅法， 利⽤训练过程中的特征共享。在快速 RCNN训练中，随机梯度下降 （SGD）小批次是分层采样的，首先对N幅图像进⾏采样，然后对每幅图像的R/N ROI进⾏采样。关键的 是，来⾃同⼀图像的ROI在向前和向 后过程中共享计算和内存。使N变小可以减少小批次计算。例如，当使⽤ N=2和R=128时，建议的训练⽅案⽐ 从128个不同图像（即R-CNN和 SPPnet策略）中采样⼀个RoI⼤约快64倍。</p><h3 id="损失函数"><a class="markdownIt-Anchor" href="#损失函数"></a> 损失函数</h3><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210811112649.png" style="zoom:67%;" /><p>损失函数L为类别损失<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>c</mi><mi>l</mi><mi>s</mi></mrow></msub></mrow><annotation encoding="application/x-tex">L_{cls}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和位置损失<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>l</mi><mi>o</mi><mi>c</mi></mrow></msub></mrow><annotation encoding="application/x-tex">L_{loc}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的和，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span>用于调节两个损失的比例，论文中均为1。</p> L_{cls}(p,u) = -\log p_u $$是类别损失，即对数损失（cross_entropy）。p为计算所得类别，u为真实类别，当区域为背景时，u=0，否则$u \ge  1$。<img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210811113937.png" style="zoom: 50%;" />位置损失使用了L1loss，对异常值不那么敏感，易于训练。$t^u$是类别为u的区域的预测位置四元组，v是其区域的真实位置四元组。#### 反向传播<img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210811114457.png" style="zoom:50%;" />r指的是第几个region , j表示这个region里y在什么位置。### SVD加快测试时处理图像的速度。https://zhuanlan.zhihu.com/p/37038542![](https://gitee.com/pokestar/image-bed/raw/master/img2021/20210811151945.png)Σ(sigma)是一个矩阵，只有对角元素，其它元素为0。它的值就是原数据矩阵Data的特征值，取Data的特征值开方$\sqrt\lambda_i$，并且按从大到小的排序。## 参考https://blog.csdn.net/littlehaes/article/details/83473863]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-RCNN</title>
    <link href="/2021/08/07/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-RCNN/"/>
    <url>/2021/08/07/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-RCNN/</url>
    
    <content type="html"><![CDATA[<h1 id="r-cnn"><a class="markdownIt-Anchor" href="#r-cnn"></a> R-CNN</h1><p>将CNN引入目标检测领域。</p><h3 id="传统方法"><a class="markdownIt-Anchor" href="#传统方法"></a> 传统方法</h3><ul><li>将定位问题作为回归问题求解</li><li>使用滑动窗口方法依次判断所有可能区域</li></ul><h2 id="r-cnn算法基本流程"><a class="markdownIt-Anchor" href="#r-cnn算法基本流程"></a> R-CNN算法基本流程</h2><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210807154231.png" alt="" /></p><ol><li>输入一张图片。</li><li>使用<strong>Selective Search</strong>方法自下而上提取约2000个候选区域。</li><li>使用CNN计算每一个候选区域的特征。</li><li>使用特定于类的线性SVM对每一个候选区域进行分类。</li></ol><h3 id="相关知识-selective-search方法"><a class="markdownIt-Anchor" href="#相关知识-selective-search方法"></a> 相关知识-Selective Search方法</h3><h4 id="主要思想"><a class="markdownIt-Anchor" href="#主要思想"></a> 主要思想</h4><ul><li>首先通过基于图的图像分割方法初始化原始区域，即将图像分割成很多很多的小块。</li><li>然后使用贪心策略，计算每两个相邻的区域的相似度。</li><li>每次合并最相似的两块，直到最终只剩下一块完整的图片。</li></ul><p>这其中每次产生的图像块包括合并的图像块我们都保存下来，这样就得到图像的分层表示。</p><h4 id="区域合并"><a class="markdownIt-Anchor" href="#区域合并"></a> 区域合并</h4><ul><li>使用多样化策略来合并不同区域，主要有以下三种：<ul><li>多种颜色空间，考虑RGB、灰度、HSV及其变种等</li><li>多种相似度度量标准，既考虑颜色相似度，又考虑纹理、大小、重叠情况等。</li><li>通过改变阈值初始化原始区域，阈值越大，分割的区域越少。</li></ul></li></ul><h5 id="颜色空间变换"><a class="markdownIt-Anchor" href="#颜色空间变换"></a> 颜色空间变换</h5><p>将原始色彩空间转换到多达八种的色彩空间。主要使用的颜色空间有：（1）RGB，（2）灰度I，（3）Lab，（4）rgI（归一化的rg通道加上灰度），（5）HSV，（6）rgb（归一化的RGB），（7）C，（8）H（HSV的H通道）</p><h5 id="区域相似度计算"><a class="markdownIt-Anchor" href="#区域相似度计算"></a> 区域相似度计算</h5><p>在计算多种相似度的时候，把单一相似度的值归一化到[0,1]之间，1表示两个区域之间相似度最大。</p><ul><li>颜色相似度</li><li>纹理相似度</li><li>优先合并小的区域</li><li>区域的合适距离</li></ul><h3 id="相关知识-重叠度iou"><a class="markdownIt-Anchor" href="#相关知识-重叠度iou"></a> 相关知识-重叠度IOU</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210807165239.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210807165314.png" alt="" /></p><p>评价定位精度，即矩形框A、B的重叠面积占A、B并集的面积比例。</p><h3 id="相关知识-非极大值抑制nms"><a class="markdownIt-Anchor" href="#相关知识-非极大值抑制nms"></a> 相关知识-非极大值抑制（NMS）</h3><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210807165650.png" style="zoom:67%;" /><p>RCNN会从一张图片中找出n个可能是物体的矩形框，然后为每个矩形框为做类别分类概率，我们需要判别哪些矩形框是没用的。</p><p><strong>具体方法</strong>为：先假设有6个矩形框，根据分类器的类别分类概率做排序，假设从小到大属于车辆的概率分别为A、B、C、D、E、F。</p><ol><li>从最大概率矩形框F开始，分别判断A~E与F的重叠度IOU是否大于某个设定的阈值;</li><li>假设B、D与F的重叠度超过阈值，那么就扔掉B、D；并标记第一个矩形框F，是我们保留下来的。</li><li>从剩下的矩形框A、C、E中，选择概率最大的E，然后判断E与A、C的重叠度，重叠度大于一定的阈值，那么就扔掉；并标记E是我们保留下来的第二个矩形框。</li></ol><p>就这样一直重复，找到所有被保留下来的矩形框。</p><p>非极大值抑制（NMS）顾名思义就是抑制不是极大值的元素，搜索局部的极大值。这个局部代表的是一个邻域，邻域有两个参数可变，一是邻域的维数，二是邻域的大小。这里不讨论通用的NMS算法，而是用于在目标检测中用于提取分数最高的窗口的。例如在行人检测中，滑动窗口经提取特征，经分类器分类识别后，每个窗口都会得到一个分数。但是滑动窗口会导致很多窗口与其他窗口存在包含或者大部分交叉的情况。这时就需要用到NMS来选取那些邻域里分数最高（是行人的概率最大），并且抑制那些分数低的窗口。</p><h2 id="r-cnn具体流程"><a class="markdownIt-Anchor" href="#r-cnn具体流程"></a> R-CNN具体流程</h2><h3 id="提取候选区域selective-search"><a class="markdownIt-Anchor" href="#提取候选区域selective-search"></a> 提取候选区域（Selective Search）</h3><p>使用Selective Search方法搜索约两千个候选框，所得候选框为大小不一的矩形，而CNN的输入一般是大小固定的227*227的图片，所以需要对候选区域进行缩放处理，RCNN实验了两种不同方法：</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210807220021.png" style="zoom: 33%;" /><ul><li>**各向异性缩放：**直接进行扭曲缩放，如上图D所示；</li><li><strong>各向同性缩放：</strong><ul><li>先扩充后裁剪： 直接在原始图片中，把<strong>候选框的边界</strong>进行扩展延伸成正方形，然后再进行裁剪；如果已经延伸到了原始图片的外边界，那么就用候选框中的颜色均值填充；如上图(B)所示；</li><li>先裁剪后扩充：先把候选区域图片裁剪出来，然后用固定的背景颜色填充成正方形图片(背景颜色也是采用候选区域的像素颜色均值),如上图©所示；</li></ul></li></ul><p>在缩放的同时也对候选区域进行了padding处理，如图中第1、3行为padding=0，第2、4行为padding=16（可以看出图片范围稍大）。经过最后的试验，作者发现采用各向异性缩放、padding=16的精度最高。</p><h3 id="利用cnn提取特征向量"><a class="markdownIt-Anchor" href="#利用cnn提取特征向量"></a> 利用CNN提取特征向量</h3><p>paper中测试了两个CNN网络，Alexnet与VGG16。精度上VGG16更好，但是计算量过大，简单起见选择了AlexNet，包含五个卷积层与两个全连接层。</p><p>目标监测的数据量较少，所以将CNN在imagenet上进行了预训练，再进行fine-tuning。</p><p>假设要检测的物体类别有N类，那么我们就需要把上面预训练阶段的CNN模型的最后一层给替换掉，替换成N+1个输出的神经元(加1，表示还有一个背景) (20 + 1bg = 21)，然后这一层直接采用参数随机初始化的方法，其它网络层的参数不变；接着就可以开始继续SGD训练了。开始的时候，SGD学习率选择0.001，在每次训练的时候，我们batch size大小选择128，其中32个是正样本、96个是负样本。</p><h4 id="正负样本"><a class="markdownIt-Anchor" href="#正负样本"></a> 正负样本</h4><p>一张照片我们得到了2000个候选框。然而人工标注的数据一张图片中就只标注了正确的bounding box，我们搜索出来的2000个矩形框也不可能会出现一个与人工标注完全匹配的候选框。因此在CNN阶段我们需要用IOU为2000个bounding box打标签。如果用selective search挑选出来的候选框与物体的人工标注矩形框（PASCAL VOC的图片都有人工标注）的重叠区域IoU大于0.5，那么我们就把这个候选框标注成<strong>物体类别（正样本）</strong>，否则我们就把它当做<strong>背景类别（负样本）</strong>。</p><h3 id="利用svm进行特征向量分类"><a class="markdownIt-Anchor" href="#利用svm进行特征向量分类"></a> 利用SVM进行特征向量分类</h3><p>R-CNN上为二分类问题，即只检测单一类别。假设我们要检测车辆。我们知道只有当bounding box把整量车都包含在内，那才叫正样本；如果bounding box 没有包含到车辆，那么我们就可以把它当做负样本。作者测试了IOU阈值各种方案数值0,0.1,0.2,0.3,0.4,0.5。最后通过训练发现，如果选择IOU阈值为0.3效果最好（选择为0精度下降了4个百分点，选择0.5精度下降了5个百分点）,即当重叠度小于0.3的时候，我们就把它标注为负样本。一旦CNN f7层特征被提取出来，那么我们将为每个物体类训练一个svm分类器。当我们用CNN提取2000个候选框，可以得到[2000x4096]这样的特征向量矩阵，然后我们只需要把这样的一个矩阵与svm权值矩阵[4096xN]点乘(N为分类类别数目，因为我们训练的N个svm，每个svm包含了4096个权值w)，就可以得到结果了。</p><p>即训练CNN网络提取特征–&gt;标记正负样本后训练SVM</p><h4 id="使用svm而不是cnn的softmax作为分类器的原因"><a class="markdownIt-Anchor" href="#使用svm而不是cnn的softmax作为分类器的原因"></a> 使用SVM而不是CNN的softmax作为分类器的原因</h4><p>cnn训练需要的样本量较大，导致再数据标注时为了获取足够的样本无法对数据做精确标注（例如IOU&gt;0.5都被标注为正样本，即可能只包含物体的一部分），而SVM适用于少样本训练，可以对样本数据进行严格标注，最后的训练结果精度好于softmax。</p><h3 id="位置精修边框回归"><a class="markdownIt-Anchor" href="#位置精修边框回归"></a> 位置精修（边框回归）</h3><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210808112838.png" style="zoom:50%;" /><p>检测得到的结果虽然准确，但是所得的候选区域未必与真值完全重合，需要进行位置精修。上图红框为SelectiveSearch所得的窗口，绿色为正确窗口。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210808113214.png" style="zoom:67%;" /><p>对于窗口一般使用四维向量$(x,y,w,h) <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">来</mi><mi mathvariant="normal">表</mi><mi mathvariant="normal">示</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">分</mi><mi mathvariant="normal">别</mi><mi mathvariant="normal">表</mi><mi mathvariant="normal">示</mi><mi mathvariant="normal">窗</mi><mi mathvariant="normal">口</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">心</mi><mi mathvariant="normal">点</mi><mi mathvariant="normal">坐</mi><mi mathvariant="normal">标</mi><mi mathvariant="normal">和</mi><mi mathvariant="normal">宽</mi><mi mathvariant="normal">高</mi><mi mathvariant="normal">。</mi><mi mathvariant="normal">对</mi><mi mathvariant="normal">于</mi><mi mathvariant="normal">图</mi><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">红</mi><mi mathvariant="normal">色</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">框</mi><mi>P</mi><mi mathvariant="normal">代</mi><mi mathvariant="normal">表</mi><mi mathvariant="normal">原</mi><mi mathvariant="normal">始</mi><mi mathvariant="normal">的</mi><mi>P</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>o</mi><mi>s</mi><mi>a</mi><mi>l</mi><mo separator="true">,</mo><mi mathvariant="normal">绿</mi><mi mathvariant="normal">色</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">框</mi><mi>G</mi><mi mathvariant="normal">代</mi><mi mathvariant="normal">表</mi><mi mathvariant="normal">目</mi><mi mathvariant="normal">标</mi><mi mathvariant="normal">的</mi><mi>G</mi><mi>r</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>T</mi><mi>r</mi><mi>u</mi><mi>t</mi><mi>h</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">我</mi><mi mathvariant="normal">们</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">目</mi><mi mathvariant="normal">标</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">寻</mi><mi mathvariant="normal">找</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">种</mi><mi mathvariant="normal">关</mi><mi mathvariant="normal">系</mi><mi mathvariant="normal">使</mi><mi mathvariant="normal">得</mi><mi mathvariant="normal">输</mi><mi mathvariant="normal">入</mi><mi mathvariant="normal">原</mi><mi mathvariant="normal">始</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">窗</mi><mi mathvariant="normal">口</mi><mi>P</mi><mi mathvariant="normal">经</mi><mi mathvariant="normal">过</mi><mi mathvariant="normal">映</mi><mi mathvariant="normal">射</mi><mi mathvariant="normal">得</mi><mi mathvariant="normal">到</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">跟</mi><mi mathvariant="normal">真</mi><mi mathvariant="normal">实</mi><mi mathvariant="normal">窗</mi><mi mathvariant="normal">口</mi><mi>G</mi><mi mathvariant="normal">更</mi><mi mathvariant="normal">接</mi><mi mathvariant="normal">近</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">回</mi><mi mathvariant="normal">归</mi><mi mathvariant="normal">窗</mi><mi mathvariant="normal">口</mi></mrow><annotation encoding="application/x-tex">来表示， 分别表示窗口的中心点坐标和宽高。 对于图 2, 红色的框 P 代表原始的Proposal, 绿色的框 G 代表目标的 Ground Truth， 我们的目标是寻找一种关系使得输入原始的窗口 P 经过映射得到一个跟真实窗口 G 更接近的回归窗口</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">来</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">别</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">窗</span><span class="mord cjk_fallback">口</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">心</span><span class="mord cjk_fallback">点</span><span class="mord cjk_fallback">坐</span><span class="mord cjk_fallback">标</span><span class="mord cjk_fallback">和</span><span class="mord cjk_fallback">宽</span><span class="mord cjk_fallback">高</span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">图</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">红</span><span class="mord cjk_fallback">色</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">框</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">原</span><span class="mord cjk_fallback">始</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">绿</span><span class="mord cjk_fallback">色</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">框</span><span class="mord mathdefault">G</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">目</span><span class="mord cjk_fallback">标</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">目</span><span class="mord cjk_fallback">标</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">寻</span><span class="mord cjk_fallback">找</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">种</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">使</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">输</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">原</span><span class="mord cjk_fallback">始</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">窗</span><span class="mord cjk_fallback">口</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord cjk_fallback">经</span><span class="mord cjk_fallback">过</span><span class="mord cjk_fallback">映</span><span class="mord cjk_fallback">射</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">跟</span><span class="mord cjk_fallback">真</span><span class="mord cjk_fallback">实</span><span class="mord cjk_fallback">窗</span><span class="mord cjk_fallback">口</span><span class="mord mathdefault">G</span><span class="mord cjk_fallback">更</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">近</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">回</span><span class="mord cjk_fallback">归</span><span class="mord cjk_fallback">窗</span><span class="mord cjk_fallback">口</span></span></span></span>\hat G$。</p><p>边框回归的目的既是：给定<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>P</mi><mi>x</mi><mo separator="true">,</mo><mi>P</mi><mi>y</mi><mo separator="true">,</mo><mi>P</mi><mi>w</mi><mo separator="true">,</mo><mi>P</mi><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(Px,Py,Pw,Ph)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span>寻找一种映射<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>， 使得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>P</mi><mi>x</mi><mo separator="true">,</mo><mi>P</mi><mi>y</mi><mo separator="true">,</mo><mi>P</mi><mi>w</mi><mo separator="true">,</mo><mi>P</mi><mi>h</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mover accent="true"><mi>G</mi><mo>^</mo></mover><msup><mi>x</mi><mo separator="true">,</mo></msup><mover accent="true"><mi>G</mi><mo>^</mo></mover><msup><mi>y</mi><mo separator="true">,</mo></msup><mover accent="true"><mi>G</mi><mo>^</mo></mover><msup><mi>w</mi><mo separator="true">,</mo></msup><mover accent="true"><mi>G</mi><mo>^</mo></mover><msup><mi>h</mi><mo stretchy="false">)</mo></msup></mrow><annotation encoding="application/x-tex">f(Px,Py,Pw,Ph)=(\hat Gx^,\hat Gy^,\hat Gw^,\hat Gh^)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">h</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">G</span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">G</span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">G</span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">G</span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span>并且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>G</mi><mo>^</mo></mover><msup><mi>x</mi><mo separator="true">,</mo></msup><mover accent="true"><mi>G</mi><mo>^</mo></mover><msup><mi>y</mi><mo separator="true">,</mo></msup><mover accent="true"><mi>G</mi><mo>^</mo></mover><msup><mi>w</mi><mo separator="true">,</mo></msup><mover accent="true"><mi>G</mi><mo>^</mo></mover><msup><mi>h</mi><mo stretchy="false">)</mo></msup><mo>≈</mo><mo stretchy="false">(</mo><mi>G</mi><mi>x</mi><mo separator="true">,</mo><mi>G</mi><mi>y</mi><mo separator="true">,</mo><mi>G</mi><mi>w</mi><mo separator="true">,</mo><mi>G</mi><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\hat Gx^,\hat Gy^,\hat Gw^,\hat Gh^)≈(Gx,Gy,Gw,Gh)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">G</span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">G</span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">G</span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.43689199999999995em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mpunct mtight">,</span></span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">G</span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mclose mtight">)</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">G</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault">h</span><span class="mclose">)</span></span></span></span></p><p>RCNN中使用坐标平移+尺度缩放，即xy进行平移，wh进行缩放。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210808114001.png" alt="" /></p><p>也就是说，我们需要学习到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>d</mi><mi>y</mi></msub><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>d</mi><mi>w</mi></msub><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>d</mi><mi>h</mi></msub><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d_x(P), d_y(P), d_w(P), d_h(P)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span>四个参数，这里使用线性回归进行学习。</p><p><strong>输入</strong>为该窗口对应的CNN特征，也就是 R-CNN 中的 Pool5 feature（特征向量）。 (注：训练阶段输入还包括 Ground Truth， 也就是下边提到的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mo>∗</mo></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>t</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>w</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>h</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t_* = (t_x, t_y, t_w, t_h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.175696em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>）</p><p><strong>输出</strong> 首先可以计算得到真正需要的平移量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>t</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>y</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(t_x, t_y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>与缩放量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>t</mi><mi>w</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>h</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(t_w, t_h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210808150518.png" style="zoom:67%;" /><p>目标函数可以表示为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mo>∗</mo></msub><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mi>w</mi><mo>∗</mo><mi>T</mi></msubsup><msub><mi mathvariant="normal">Φ</mi><mn>5</mn></msub><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d_*(P) = w_*^T\Phi_5(P)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.175696em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="normal">Φ</mi><mn>5</mn></msub><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Phi_5(P)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span>为输入的CNN特征向量，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi mathvariant="normal">∗</mi></msub></mrow><annotation encoding="application/x-tex">w_∗</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.175696em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是要学习的参数（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∗</mo></mrow><annotation encoding="application/x-tex">*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span></span></span></span>表示 x,y,w,h， 也就是每一个变换对应一个目标函数），<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mo>∗</mo></msub><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d_*(P)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.175696em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span>为得到的预测值，要使<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mo>∗</mo></msub></mrow><annotation encoding="application/x-tex">d_*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.175696em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mo>∗</mo></msub></mrow><annotation encoding="application/x-tex">t_*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.175696em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>差距最小，得到损失函数$$Loss = \sum_i<sup>N(t_*</sup>i - \hat w_*<sup>T\phi_5(P</sup>i))^2$$</p><p>函数优化目标为： $$W_* = argmin_{w_<em>} \sum_i<sup>N(t_*</sup>i - \hat w_</em><sup>T\phi_5(P</sup>i))^2 + \lambda || \hat w_*||^2$$</p><p>使用梯度下降或最小二乘法即可优化得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mo>∗</mo></msub></mrow><annotation encoding="application/x-tex">W_*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.175696em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><h4 id="为什么t_xt_y除以宽高为什么t_wt_h会有log形式"><a class="markdownIt-Anchor" href="#为什么t_xt_y除以宽高为什么t_wt_h会有log形式"></a> 为什么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">t_x,t_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>除以宽高，为什么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mi>w</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>h</mi></msub></mrow><annotation encoding="application/x-tex">t_w,t_h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>会有log形式</h4><ul><li><p>**除宽高：**如下图，两个识别处均为人，所以CNN得到的特征可以视为相同，即两个特征<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>ϕ</mi><mn>1</mn></msub><mo>=</mo><msub><mi>ϕ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\phi_1 = \phi_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。如果我们直接学习坐标差值，以x坐标为例，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i,p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>分别代表第i个框的x坐标，学习到的映射为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>ϕ</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">f(\phi_1) = x_1 - p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，同理<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>ϕ</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><msub><mi>p</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">f(\phi_2) = x_2 - p_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，但显然<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><msub><mi>p</mi><mn>1</mn></msub><mi mathvariant="normal">≠</mi><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1 - p_1 \neq x_2 - p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，即一个x对应多个y，不符合函数的定义。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210808152356.png" style="zoom: 50%;" /></li><li><p>**Log：**放缩尺度必须大于0，所以使用exp以及log函数。</p></li></ul><h3 id="rcnn缺点"><a class="markdownIt-Anchor" href="#rcnn缺点"></a> RCNN缺点</h3><ul><li><p>训练分阶段，步骤繁琐：微调网络+训练SVM+边框回归</p></li><li><p>每个region proposal都需要经过CNN网络进行提取特征，产生大量特征文件，占用过多物理内存</p></li><li><p>由于每个region proposal都需要需要经过CNN网络进行提取特征，导致运行速度慢（GPU条件下，测试一张图片需要47s）</p></li><li><p>由于使用SVM进行分类，无法实现端到端的训练</p></li></ul><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://zhuanlan.zhihu.com/p/27467369">https://zhuanlan.zhihu.com/p/27467369</a></p><p><a href="https://zhuanlan.zhihu.com/p/23006190">https://zhuanlan.zhihu.com/p/23006190</a></p><p><a href="https://blog.csdn.net/zijin0802034/article/details/77685438">https://blog.csdn.net/zijin0802034/article/details/77685438</a></p><p><a href="https://www.zhihu.com/question/35887527/answer/702790168">https://www.zhihu.com/question/35887527/answer/702790168</a></p>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记-ResNet &amp; Pytorch实现</title>
    <link href="/2021/08/04/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-ResNet-Pytorch%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/08/04/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-ResNet-Pytorch%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="resnet"><a class="markdownIt-Anchor" href="#resnet"></a> ResNet</h1><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210804194448.png" alt="" /></p><p>**论文要点：**残差网络相对普通网络收敛更快，解决了网络越深，准确率反而下降的问题（上图），同时参数量降低，更易于训练。</p><h3 id="相关工作启发"><a class="markdownIt-Anchor" href="#相关工作启发"></a> 相关工作（启发）</h3><ul><li><p>VLAD与FishVector的残差向量编码（图像处理）</p></li><li><p>Multigrid方求解偏微分方程，残差方法更快。（计算机图形学）</p></li><li><p>已有部分网络使用了快捷连接（跨层连接）</p></li></ul><h3 id="残差结构"><a class="markdownIt-Anchor" href="#残差结构"></a> 残差结构</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210804194018.png" alt="" /></p><p>假设<strong>普通的两层神经网络</strong>学习到一个映射<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>，并设其输入输出的维度相同。</p><p>同时前文提到，普通的神经网络结构会出现深度加深，网络性能反而下降的情况，这与我们的直觉不符。如果神经网络能够学习到恒等映射，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">H(x) = x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>，那么应该不会出现网络加深，性能反而下降的情况，即更深的网络层都可以学习为恒等映射。那么就可以做出推测，神经网络难以拟合恒等映射。</p><p>而<strong>残差网络</strong>就是一种可以学习到恒等映射的网络。即使原两层网络学到映射<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">F(x)=H(x)-x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>， 则最终的总网络映射<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">H(x) = F(x) + x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>，可以学习到恒等映射。</p><p>当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>维度相同，可以直接相加，维度不同时，可以给<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>乘一个矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">Ws</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">s</span></span></span></span>来匹配维度。在卷积网络中，直接使用1x1的卷积升维或降维即可。</p><h4 id="残差结构的作用"><a class="markdownIt-Anchor" href="#残差结构的作用"></a> 残差结构的作用</h4><ul><li>由于残差网络可以更好拟合恒等映射，就可以“改变”自身的网络深度来适应多种情况。同时可以更好的学习恒等映射附近的微小波动。</li><li>可以缓解梯度消失，梯度可以通过快捷连接传回输入。</li></ul><h3 id="网络结构"><a class="markdownIt-Anchor" href="#网络结构"></a> 网络结构</h3><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210804215239.png" alt="" /></p><p>上图左为BasicBlock，用于ResNet34。右图为BottleBlock，用于更深的ResNet50/101/152。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210804223835.png" alt="" /></p><p>上图右边为resnet34的模型，卷积层分为四个部分，每个部分分别有3，4，6，3个basicblock，channel数分别为64，128，256，512。<strong>除第一个部分外都会在第一层使用步长为2的卷积来进行下采样</strong>，倒数第二层输出的feature map后面是全局平均池化，也就是每个feature map求平均值，因为ImageNet输出是1000个类别，所以再连接一层1000个神经元的全连接层，最后再接上一个Softmax。网络在卷积层之后连接了一个BN层，再连接一个Relu层。</p><p>更深的ResNet网络结构如下图所示。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210804224326.png" alt="" /></p><h4 id="训练细节"><a class="markdownIt-Anchor" href="#训练细节"></a> 训练细节</h4><p>数据预处理方法与VGG、AlexNet相似，在[256，480]中随机取S作为图像的较短边进行resize，从图像或其水平翻转中随机采样224×224裁剪，并减去每像素平均值。使用AlexNet中的标准颜色增强。我们使用最小批大小为256的SGD。学习率从0.1开始，在误差稳定时除以10，并且模型训练60万次迭代。我们使用0.0001的重量衰减和0.9的动量。不使用DropOut。</p><h3 id="pytorch实践"><a class="markdownIt-Anchor" href="#pytorch实践"></a> Pytorch实践</h3><p>在flower_photos数据集上训练，共五个分类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasicBlock</span>(<span class="hljs-params">nn.Module</span>):</span><br>    expansion =<span class="hljs-number">1</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,in_channels,out_channels,stride=<span class="hljs-number">1</span></span>):</span><br>        <span class="hljs-built_in">super</span>(BasicBlock, self).__init__()<br>        self.conv1=nn.Sequential(<br>            nn.Conv2d(in_channels, out_channels, kernel_size=<span class="hljs-number">3</span>, stride=stride, padding=<span class="hljs-number">1</span>), <span class="hljs-comment"># 3x3</span><br>            nn.BatchNorm2d(out_channels),<br>            nn.ReLU(<span class="hljs-literal">True</span>)<br>        )<br>        self.conv2=nn.Sequential(<br>            nn.Conv2d(out_channels, out_channels*self.expansion, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>), <span class="hljs-comment"># 3x3</span><br>            nn.BatchNorm2d(out_channels*self.expansion),<br>        )<br>        self.shortcut=nn.Sequential()<br><br>        <span class="hljs-keyword">if</span> stride!=<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> in_channels!=out_channels*self.expansion: <span class="hljs-comment"># block输入和输出不同时</span><br>            self.shortcut=nn.Sequential(<br>                nn.Conv2d(in_channels, out_channels*self.expansion, kernel_size=<span class="hljs-number">1</span>, stride=stride), <span class="hljs-comment"># input 使用1x1卷积调整维度</span><br>                nn.BatchNorm2d(out_channels*self.expansion)<br>            )<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self,<span class="hljs-built_in">input</span></span>):</span><br>        output=self.conv1(<span class="hljs-built_in">input</span>)<br>        output=self.conv2(output)<br>        output+=self.shortcut(<span class="hljs-built_in">input</span>)<br>        output=F.relu(output)<br>        <span class="hljs-keyword">return</span> output<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BottleBolck</span>(<span class="hljs-params">nn.Module</span>):</span><br>    expansion=<span class="hljs-number">4</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,in_channels,out_channels,stride=<span class="hljs-number">1</span></span>):</span><br>        <span class="hljs-built_in">super</span>(BottleBolck, self).__init__()<br>        self.conv1=nn.Sequential(<br>            nn.Conv2d(in_channels, out_channels, kernel_size=<span class="hljs-number">1</span>, stride=stride), <span class="hljs-comment"># 1x1</span><br>            nn.BatchNorm2d(out_channels),<br>            nn.ReLU(<span class="hljs-literal">True</span>)<br>        )<br>        self.conv2=nn.Sequential(<br>            nn.Conv2d(out_channels, out_channels, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>), <span class="hljs-comment"># 3x3</span><br>            nn.BatchNorm2d(out_channels),<br>            nn.ReLU(<span class="hljs-literal">True</span>)<br>        )<br>        self.conv3=nn.Sequential(<br>            nn.Conv2d(out_channels,out_channels*self.expansion,kernel_size=<span class="hljs-number">1</span>,stride=<span class="hljs-number">1</span>), <span class="hljs-comment"># 1x1</span><br>            nn.BatchNorm2d(out_channels*self.expansion)<br>        )<br>        self.shortcut=nn.Sequential()<br><br>        <span class="hljs-keyword">if</span> stride!=<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> in_channels!=out_channels*self.expansion:<span class="hljs-comment"># block输入和输出不同时</span><br>            self.shortcut=nn.Sequential(<br>                nn.Conv2d(in_channels,out_channels*self.expansion,kernel_size=<span class="hljs-number">1</span>,stride=<span class="hljs-number">1</span>), <span class="hljs-comment"># input 使用1x1卷积调整维度</span><br>                nn.BatchNorm2d(out_channels*self.expansion)<br>            )<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self,<span class="hljs-built_in">input</span></span>):</span><br>        output=self.conv1(<span class="hljs-built_in">input</span>)<br>        output=self.conv2(output)<br>        output=self.conv3(output)<br>        output=output+self.shortcut(<span class="hljs-built_in">input</span>)<br>        output=F.relu((output))<br>        <span class="hljs-keyword">return</span>  output<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResNet</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,block,num_layer,num_class=<span class="hljs-number">10</span></span>):</span> <span class="hljs-comment"># 根据不同的网络需要传入不同的block</span><br>        <span class="hljs-built_in">super</span>(ResNet, self).__init__()<br>        self.in_planes=<span class="hljs-number">64</span><br>        self.conv=nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>,<span class="hljs-number">64</span>,kernel_size=<span class="hljs-number">7</span>,stride=<span class="hljs-number">2</span>,padding=<span class="hljs-number">3</span>),<br>            nn.BatchNorm2d(<span class="hljs-number">64</span>),<br>            nn.ReLU(<span class="hljs-literal">True</span>),<br>            nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>,stride=<span class="hljs-number">2</span>,padding=<span class="hljs-number">1</span>),<br>        )<br>        self.conv1=self.make_layer(block=block,planes=<span class="hljs-number">64</span>,num_layer=num_layer[<span class="hljs-number">0</span>],stride=<span class="hljs-number">1</span>)<br>        self.conv2=self.make_layer(block=block,planes=<span class="hljs-number">128</span>,num_layer=num_layer[<span class="hljs-number">1</span>],stride=<span class="hljs-number">2</span>)<br>        self.conv3=self.make_layer(block=block,planes=<span class="hljs-number">256</span>,num_layer=num_layer[<span class="hljs-number">2</span>],stride=<span class="hljs-number">2</span>)<br>        self.conv4=self.make_layer(block=block,planes=<span class="hljs-number">512</span>,num_layer=num_layer[<span class="hljs-number">3</span>],stride=<span class="hljs-number">2</span>)<br><br>        self.aver_pool=nn.AdaptiveAvgPool2d((<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<br>        self.linera=nn.Linear(<span class="hljs-number">512</span>*block.expansion,num_class)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self,x</span>):</span><br>        output=self.conv(x)<br>        output=self.conv1(output)<br>        output=self.conv2(output)<br>        output=self.conv3(output)<br>        output=self.conv4(output)<br>        output=self.aver_pool(output)<br>        <span class="hljs-comment">#output.size(channel,h,w)</span><br>        output=output.view(output.size(<span class="hljs-number">0</span>),-<span class="hljs-number">1</span>)<br>        output=self.linera(output)<br>        <span class="hljs-keyword">return</span> output<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_layer</span>(<span class="hljs-params">self,block,planes,num_layer,stride</span>):</span><br>        layer=[]<br>        strides=[stride]+[<span class="hljs-number">1</span>]*(num_layer-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> stride <span class="hljs-keyword">in</span> strides:<br>            layer.append(block(self.in_planes,planes,stride))<br>            self.in_planes=planes*block.expansion<br>        <span class="hljs-keyword">return</span> nn.Sequential(*layer)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deeplearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win10&amp;Ubuntu20.04双系统安装配置</title>
    <link href="/2021/07/17/win10-Ubuntu20-04%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/07/17/win10-Ubuntu20-04%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>记录一下安装Ubuntu20.04的过程。本文是在笔记本双硬盘上安装的Ubuntu，一个是1T的nvmeSSD，安装win10，一个是500g的SATASSD，安装Ubuntu，同时把Ubuntu的引导程序放在1T的nvmeSSD中，从而可以正常引导选择系统启动。</p><h2 id="步骤记录"><a class="markdownIt-Anchor" href="#步骤记录"></a> 步骤记录</h2><ul><li><p>首先是制作一个Ubuntu启动盘</p></li><li><p>然后在Windows下，进入磁盘管理，对C盘进行压缩卷操作，分出一个200MB的空白分区，用于Ubuntu的EFI启动分区，以便可以在启动时选择进入Windows还是Ubuntu。可以看到，这里我的磁盘0是1T的nvmeSSD，存放Windows，而磁盘1是500G的sataSSD，存放Ubuntu。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210717140310.png" style="zoom: 50%;" /></li><li><p>重启进入bios安装Ubuntu，这一步与大部分安装教程相似，注意需要在bios里将启动方式修改为UEFI而不是legacy，不然Ubuntu分区的时候无法分出EFI分区。</p></li><li><p>出现下列画面的时候，勾选为图形或无线硬件，以及MP3和其他媒体安装第三方软件，不下载更新，不然下载安装会比较慢。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210717141002.png" style="zoom: 50%;" /></li><li><p>在下列画面中选择手动分区。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210717141138.png" style="zoom: 50%;" /></li><li><p>点击之前新建的200M分区添加，逻辑分区，空间起始位置，用于efi。这个分区必不可少，用于安装ubuntu启动项。</p></li><li><p>在后面的500G的硬盘内,添加</p><ul><li>swap:中文是&quot;交换空间&quot;，充当ubuntu的虚拟内存，一般的大小为电脑物理内存的2倍左右，逻辑分区，空间起始位置，用于&quot;swap&quot;或&quot;交换空间&quot;</li><li>/:这是ubuntu 的根目录,用于安装系统和软件，相当于windows的C盘，我将其分为了 100G，主分区，空间起始位置，用于&quot;ext4日志文件系统&quot;，挂载点为&quot;/&quot;（根据你的磁盘空间调整，可以大一点，毕竟ubuntu装软件都是默认装在根目录的）</li><li>/home:相当于windows的其他盘，剩下的全分给它，逻辑分区，空间起始位置，用于&quot;ext4日志文件系统&quot;，挂载点为&quot;/home&quot;</li></ul></li><li><p>在分区界面的下方，选择安装启动项的位置，选择创建的200M的efi分区(注意查看其对应的分区编号,下拉列表选择这个efi分区编号)<strong>下图仅为示例</strong></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210717141644.png" alt="" /></p></li><li><p>接下来的操作和大部分安装教程相似。</p></li></ul><h3 id="本文主要参考"><a class="markdownIt-Anchor" href="#本文主要参考"></a> 本文主要参考</h3><p><a href="https://www.cnblogs.com/masbay/p/11627727.html">https://www.cnblogs.com/masbay/p/11627727.html</a></p>]]></content>
    
    
    <categories>
      
      <category>技术杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新服务器安装老旧版本Ubuntu-server方法记录</title>
    <link href="/2021/07/17/%E6%96%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E8%80%81%E6%97%A7%E7%89%88%E6%9C%ACUbuntu%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/07/17/%E6%96%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E8%80%81%E6%97%A7%E7%89%88%E6%9C%ACUbuntu%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>最近在公司实习的时候遇到这个问题，新买的服务器型号比较新，而要装的Ubuntu-server版本比较老，导致正常安装方式下，安装程序识别不出raid卡驱动，识别不到配置完的raid阵列，以下是解决方法的记录。</p><h2 id="安装ubuntu16045针对无法识别raid卡"><a class="markdownIt-Anchor" href="#安装ubuntu16045针对无法识别raid卡"></a> 安装Ubuntu16.04.5（针对无法识别raid卡）</h2><ul><li><p>U盘做成Ubuntu1604启动盘，进入安装程序</p></li><li><p><strong>选择图中红框下面一行的HWE kernel方式</strong> ，然后进入下一个界面后再点击install Ubuntu server</p></li></ul><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210717133259.png" style="zoom: 67%;" /><ul><li>随后操作按照正常安装步骤进行，然后会出现一个安装过程中找不到光盘（CD-ROM）的问题，需要重新挂载光盘解决，方法在下文。</li></ul><h5 id="使用hwe-kernel的原因-source"><a class="markdownIt-Anchor" href="#使用hwe-kernel的原因-source"></a> 使用HWE kernel的原因 <a href="https://askubuntu.com/questions/248914/what-is-hardware-enablement-hwe">Source</a></h5><p>全新的硬件设备总是更频繁地向公众发布。我们希望这样的新硬件能一直在Ubuntu上工作，即使它是在Ubuntu发布之后发布的。六个月（新的Ubuntu版本发布所需的时间）是it领域非常长的一段时间。硬件支持（HWE）就是为了赶上最新的硬件技术。</p><p>现在，Ubuntu希望如何实现硬件支持的目标？为内核使用滚动版本：一旦发布了新的内核，就为Ubuntu打包、测试（通过建议的pocket和特殊的Q/a方法），并提供给Ubuntu用户。这种方法当然有一些缺点：过快地发布新内核可能会带来一些错误和问题，并且可能不适合企业。</p><p>解决方案是什么？为不同的用户提供不同的内核。因此，Ubuntu将提供至少两种内核：通用可用性（General Availability，GA）内核，即最稳定的内核，不会更新到特定版本；以及硬件支持（HWE）内核，即最新发布的内核。这就是为什么您同时看到linux generic和linux hwe generic包的原因。</p><p><strong>总结</strong>：当你的设备某些硬件比较新，而你的使用的Ubuntu版本比较老旧，就可以使用HWE kernel进行安装。</p><h2 id="安装过程中找不到光盘cd-rom的解决方法"><a class="markdownIt-Anchor" href="#安装过程中找不到光盘cd-rom的解决方法"></a> 安装过程中找不到光盘（CD-ROM）的解决方法</h2><p><a href="https://www.cnblogs.com/deny/p/9988988.html">https://www.cnblogs.com/deny/p/9988988.html</a> 参考以上方法</p><ul><li>首先刻录Ubuntu iso镜像到U盘，然后将Ubuntu iso镜像拷贝到U盘中。（根目录或是你确定的目录）</li><li>正常安装至提示CD-rom检测出错，类似如下情况。</li></ul><p><img src="https://img2018.cnblogs.com/blog/1461409/201811/1461409-20181120145256616-167049160.png" alt="img" /></p><p><img src="https://img2018.cnblogs.com/blog/1461409/201811/1461409-20181120145340292-609895231.png" alt="img" /></p><ul><li>此时选择继续（Continue）退出至主菜单，选择运行shell（Execute Shell）</li></ul><p><img src="https://img2018.cnblogs.com/blog/1461409/201811/1461409-20181120145416462-1238072951.png" alt="img" /></p><ul><li><p>进入Shell，在其中执行如下命令：<br />用<code>ls /dev/sd*</code>看看都有那些设备，一般的情况先都是这样的<br /><strong>/dev/sda /dev/sda1 /dev/sda3 /dev/sda5 /dev/sdb /dev/sdb1</strong><br />然后拔下U盘 然后用<code>ls /dev/sd*</code>你就会发现只剩<br /><strong>/dev/sda /dev/sda1 /dev/sda3 /dev/sda5</strong><br />可以看出u盘就是<strong>dev/sdb</strong>，那么u盘上的分区就是<strong>dev/sdb1</strong><br />建一个空目录在根底下，命令（<strong>uinstall为新目录名，可以自行定义</strong>）<br /><code>mkdir uinstall</code><br />再把u盘挂载到这个目录下面<br /><code>mount /dev/sdb1 /uinstall</code><br />4 、然后挂载u盘里面的那个ubuntu server 的iso镜像 命令是：(<strong>注意：此处的ubuntu镜像名称以及路径须根据情况自行修改，最好在输入之前使用ls命令查看比对进行输入</strong>)<br /><code>mount -o loop -t iso9660 /uinstall/ubuntu-16.04.5-server-amd64.iso /cdrom</code></p><p>查看cdrom中是否已经加载镜像（若已经加载,输入以下命令后应该有EFI等文件夹显示）</p><p><code>ls /cdrom</code><br />5 、最后就<code>exit</code> ，退出后选择detect CD-rom正常安装。</p></li></ul><p>后续步骤类似于正常Ubuntu安装方式。</p><h2 id="4-软件包安装管理无法进入"><a class="markdownIt-Anchor" href="#4-软件包安装管理无法进入"></a> 4、软件包安装管理无法进入</h2><p>以上步骤可能会出现软件包安装步骤无法进入的状况，可以多尝试进入几次。即下图中<em>Configure the package manager与Select and install software</em>两处多尝试进入几次。</p><img src="C:\Users\12195\AppData\Roaming\Typora\typora-user-images\image-20210716093738190.png" alt="image-20210716093738190" style="zoom: 50%;" /><h2 id="可选操作清理磁盘"><a class="markdownIt-Anchor" href="#可选操作清理磁盘"></a> （可选操作）清理磁盘</h2><p>主要针对之前已经安装过系统的机器，建议先清理下磁盘后再进行安装</p><ul><li><p>F2进入System Setup</p></li><li><p>进入DeviceConfigure</p></li><li><p>清除配置</p></li></ul><p><img src="C:%5CUsers%5C12195%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210716085202906.png" alt="image-20210716085202906" /></p><p><img src="C:%5CUsers%5C12195%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210716085215720.png" alt="image-20210716085215720" /></p><ul><li>清除preserved cache</li></ul><p><img src="C:%5CUsers%5C12195%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210716085246381.png" alt="image-20210716085246381" /></p><ul><li>重新配置raid</li></ul><p><img src="C:%5CUsers%5C12195%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210716085328494.png" alt="image-20210716085328494" /></p><p><img src="C:%5CUsers%5C12195%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210716085355894.png" alt="image-20210716085355894" /></p><p><img src="C:%5CUsers%5C12195%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210716085404488.png" alt="image-20210716085404488" /></p><p><img src="C:%5CUsers%5C12195%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210716085416687.png" alt="image-20210716085416687" /></p><p><img src="C:%5CUsers%5C12195%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210716085426989.png" alt="image-20210716085426989" /></p><p><img src="C:%5CUsers%5C12195%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210716085435909.png" alt="image-20210716085435909" /></p><p><img src="C:%5CUsers%5C12195%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210716085442734.png" alt="image-20210716085442734" /></p><ul><li>点击OK 完成 后续开始安装系统</li></ul><p><img src="C:%5CUsers%5C12195%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210716085514802.png" alt="image-20210716085514802" /></p>]]></content>
    
    
    <categories>
      
      <category>技术杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>202004月总结</title>
    <link href="/2021/04/30/202004%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    <url>/2021/04/30/202004%E6%9C%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="ac05274ee1d90bb17fd09323ad611501e2053827583334c9557e360900f06d9d">c510d3730bac0c211fca9945baa3bb1b7673449f0a9b0b65e62b0d7511183c6c986f5e096e29b7cda4851d9e6352f1a129f85022971e72023e4285b829e1f51a31166f66307efd5d978209418cf97dc979b7407d9c3dc40bf72fd14d6f3890d22f2c75c4c897eb39f311dfd60ce2a1b5ed1ab1fe25d541ab7fea5426c5bf0bddcf8185b01f6fd3524e5d2b62e8b3595ba97bdeb881583c4bed8bf7b92404b2eda3ae7a47aec68b1bd07a3aa9e56d48282f390c5273e99e228f079d6dc11f06006574ecedbdbbcf40d8e0796f402b91233beac427a0e7564a7b83ae1378e2af3c2eeeca7de0495fefa249098aef331aa9c56332303b07d52b5428bba3cdf1d675570c992bf439b1be320b34e92f4bec7cb979d9501cdefe2ed1f123afcf2bd0f84ff4416a9f502b2dc6c70c2a884c2aaaaca53ee281ba88469168f58c5e50e864c041f642c477d08f624b7186fc5ef083b8a1c3f8df867d19f1d7d8e3b85c879fec145fb2bb903b22c75059d800b7ae75d48db09b8e5af9ed9d25520ed3d2992b09b57e53fcb5c7a96e1f86527520553a4783ded77e0ebd76717bcdd8f956a641ba93bf72ca519e13044a18d6b2f801eef422032f5ea691795a6874d3f98610ae552a5e815cb6117d6a5ac82016eedbdcea453a883b7f8b1d726e22e760e61f87d8621a0158e2ea980c67e4f034e0171d48c8c0f044b115cf550fdb75d266d6d3fbb806b24a444d366a709bcc28a44184e852711f3b439374f60395b6dbf2c75820d875ff8e9970b4a5a68c9328dd969ce7a0ea60c4905cbe0dbbe585b456ef0261fc4b2dffa09863285f27be590d71cdc0ba2ecf1dbda785766a8c103831cc54f3c927f249d768b841bd567c7e762f45322dfae173a075730d8cf0eefb199e48e103ab9c6c3fa8f857dac8cab121df75eb1e24a5031fe1a13f3aee4a194821ece3587fdebb4c89d580551e9cce68c806ac4235c81040d53b01d479e1d3d1f3783cea39580c00dd33e481f4e4915c9373b1a992c39a78afd06bd6c67d31d7f419bca8d2f0d39e8365ed4f2399dc62a685677ece4caeb2dc998f5d3736cb5d8f143c077180320d1d7f13ee5c556bdc0172bf4ca99914e42c3da050f8dae5d8319a996147b149f1f737813609734b9bec2cbecd7a557004e38a19fdf69a1dd1faa50a5b7cde3d7a0bdfb7d58a6a6d509dc06b8c4c93be933503067684164cbe220590205ea87e95af4731965e63c95ed63dcb84a9309676500332479ec685772a768d2598ca0c871fb8975fd18d3bf3ac53d423d8468516d30e8c97240c9dd3380021f32a6852a5435a888fc8f1038f9dab31a1f5d804bcaf6fc1eb03c4cce214845b063b0a6eb64b5e22f3c7ae381f457f0c27dd75a156586791a25f3eac5764229f1e9c3419c3d53c7fda2f0287764386595bdb1f70841cc8655295aa6eb8a6db74921cb745f22b4c77314dbce9b939331550bcc454e692d65bb7e41132538f2753c58fe274f0bd70a96565bd800e13e8e64e036c153fd0a29a317ad0c2a945245b71261281dad8dca86a161a6ef1f4f82775487711da2cb126169ca2cf82ffc5eb72b2f666447c09816067690e60697fff1f723b350294b2913b5bb3b77bb48cfc6e0797d782b49d53db17f6f11681b6ceecaaa5803825663d50ac32c595a18a15a92b26087004d5de5f35650a23d09d2030282fe7fb767e06735cc80170e2d306ad4bb9444993374a5cc4778d8fce8ab0cdc1812fc5d001116c683fc56734a20ac9b0142ac6a9cafecba953a261c2fc71143f9774e1cf517ba3ec991f2d131f2d8f4fccab6e33ab97f092d49aca8e05f6e1f76faa96fa93b99f121dbff9b14a5fc653ae342537f5fbf02a4df3249727df044bcf22fb16d887f7e1bf2535f5d51ed301da40abbd027af083434c509927084bd894867938082f30b37942241658dec1ae0cce9374b8ead1835763a3404bd51d71861658a5326095d4fc3e1adfcf0ea41eada462a3cc711bb1da51986f57d7d913c2ee0ce09e00da434a56ecb5caf979707f7f5c1e01c1862d7e520272e08492d84bf54560fe1aa8c93d76fd96b99b85190c30ff436a6224d9cf423b7753faeef7bcc071486496cbe4f4a5a619f4f823cb72224186a28558d94eb78be0cd826b19dca8b6971941c5cdee66982440350204879995de96b7c75c7de589cb1ec2b5df98c98c70e6c32a64b96bb461a31b861211df72a0c8b6487f329dfab1971da77172ca71def5861f09e4db0e26e048b0eca1c35df0d34d5cc87b74d68eca2349525809eacbf69d8cc23c2ef805d158bda1d3ed0a01f56b897d52a682a9b1765fb370579916d021cb5a3536351702de0b864d5398cf95c60d6ef07306e48bc871f16b9f5eebffb90d6c738c13522c0eef83f0442b07b299f9cfe271bba10a8b242a06bd2a2c4ef412ac964fa44b41ff3a13b7f88e450326e040066c701b378d4866cd8bc72891d80fd7218d80b6b14db76786ba806449dd03e17ebe5cad4f87041a52fe8e510c626355baa4731ed2a76e4bd7d8ae670a9661b8b079a5330b8c04157f097dda41cbaa66b6c8f0ce30c1d6cefcf4a03cff3bcc64c1403f6f51ae497824212cbca30b4756fa61601ddc1802d2d04f136d92a307f3330d5e14844f0f2f377ff1ad56ba56fe70d79cb5f69bd5e4bd0d322952dfbfcede805ea9a5b9b40b180279ea8e8160e2a1dae3e70fd6ef3bb3b0f6d7bfc823b4870a6374f2a8621071a50444ffd27e2d4ca53c3319</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>个人总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SVM-softmax学习笔记——cs231n学习记录</title>
    <link href="/2021/04/25/SVM-softmax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94cs231n%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/04/25/SVM-softmax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94cs231n%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>作为读研前的准备工作，想要把CS231n给完整学完，所以从之前就一知半解的SVM开始，好好学完这门课程。主要基于CS231n2020年的作业，希望每学完一个算法能够写一篇博客，之前的knn线性回归就有空再补吧。由于是基于CS231n，暂时只记录线性多分类SVM，后续核方法这些等学完再补。</p><h2 id="svm支持向量机"><a class="markdownIt-Anchor" href="#svm支持向量机"></a> SVM支持向量机</h2><p>SVM英文全称为support vector machine，是一种二分类模型，目的在于找出样本空间（特征空间）内间隔最大的分类超平面。如下图所示，假设样本只有<code>x</code>和<code>y</code>两个属性值，即可以映射到一个二维空间内，SVM想做的就是找出一条直线 $$y = w*x+b$$ 使得支持向量（即红色黑点和红色白点）之间的距离最大化。同理，在三维样本空间内，该分隔直线就成为一个分隔平面，高维样本空间内即成为一个分隔超平面。<br /><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/linear-svm-1.png" alt="" /></p><h2 id="从线性分类开始"><a class="markdownIt-Anchor" href="#从线性分类开始"></a> 从线性分类开始</h2><p>首先我们谈谈线性分类，线性分类器最核心的模型就是以下公式，有一个输入<code>x</code>，一个参数矩阵<code>W</code>，和一个偏置项<code>b</code>，构成一个线性分类器$$ f(x,W) = W*x+b $$。</p><p>在本次作业中，输入是一个 $$32<em>32</em>3$$ 的图片（被拉伸成3072的向量），输出10个类别对应的分数。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/%E7%BA%BF%E6%80%A7%E5%88%86%E7%B1%BB1.png" alt="" /></p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/%E7%BA%BF%E6%80%A7%E5%88%86%E7%B1%BBscore.png" style="zoom:67%;" /><p>以上三张图片为例，当前的参数矩阵W（可能是随机生成）输出的10个预测分数，只有第二张分类正确，第三张则完全错误。</p><p>而我们需要一个<code>loss函数</code>来定量当前分类器错了多少，以及一个方法来<code>优化</code>当前分类器的参数W和b。</p><h2 id="损失函数"><a class="markdownIt-Anchor" href="#损失函数"></a> 损失函数</h2><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210425113638.png" style="zoom: 50%;" /><p>我们的损失函数的一般形式应该如上图所示，将线性分类器$$ f(x,W) = W*x+b $$的输出结果与标签对比，得到所有结果的和再除以样本量N。</p><p>多分类SVM的loss函数一般采用hinge loss，即如下形式：</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210425113934.png" style="zoom:50%;" /><p>S为当前样本在线性分类器上输出得到的十个分类分数。$$S~j$$为当前样本分类为 j 标签的分数，$$ S<sub>y</sub>i $$为当前样本所对应的正确标签$$y~i$$的分类分数。所以，hinge loss的意义就是，若正确标签分类的得分比错误标签分类的得分高1以上即正确分类了该样本，则此处loss为0；反之，错误分类得分减去正确分类得分加一大于零即错误分类或分类正确性不够，则将该值作为此处loss进行累加。由此可见，对于每一个样本，由于有十种类别，其中一种为正确分类，则需要进行九次对比运算。</p><p>下图为hingeloss的示意图</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210425133243.png" style="zoom:50%;" /><p>最终的loss函数如下，N为样本数，i为样本X下标，j为标签下标。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210425134128.png" style="zoom: 50%;" /><h4 id="防止模型过拟合正则化"><a class="markdownIt-Anchor" href="#防止模型过拟合正则化"></a> 防止模型过拟合：正则化</h4><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210425134719.png" style="zoom:50%;" /><p>为了防止模型在训练集上过拟合，常常加入一个正则项来防止过拟合，本次使用的为L2正则。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210425134922.png" alt="" /></p><h4 id="softmax分类"><a class="markdownIt-Anchor" href="#softmax分类"></a> softmax分类</h4><p>多分类逻辑回归中常用，将线性分类器得出的分数转化为每个分类的概率。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/image-20210425195738796.png" style="zoom:67%;" /><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210425201248.png" style="zoom:50%;" /><h2 id="优化方法梯度下降"><a class="markdownIt-Anchor" href="#优化方法梯度下降"></a> 优化方法：梯度下降</h2><h4 id="hinge-loss"><a class="markdownIt-Anchor" href="#hinge-loss"></a> hinge loss</h4><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210425201615.png" style="zoom:50%;" /><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210425201801.png" style="zoom:50%;" /><p>将hingeloss对W求导。L2正则项求导后为 $$ 2*\lambda*W $$</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210425220813.png" style="zoom:50%;" /><p>根据以上分析填写作业中的代码。</p><h4 id="softmax"><a class="markdownIt-Anchor" href="#softmax"></a> softmax</h4><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210426094003.png" style="zoom:50%;" />]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cs231n</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双线部署gitpage&amp;codingpage提高博客访问速度</title>
    <link href="/2021/04/08/%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2gitpage-codingpage%E6%8F%90%E9%AB%98%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/"/>
    <url>/2021/04/08/%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2gitpage-codingpage%E6%8F%90%E9%AB%98%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>最近浏览知乎发现一种比较优雅的双线部署GitHubPages以及CodingPages的方法，原理是使用coding的自动同步github仓库功能，同步github的公开博客仓库，配合之前的gitaction自动部署，可以实现一次提交在github，gitpage与codingpage同步更新，从而提高国内的博客访问速度。</p><p>以下操作基于之前</p><p>一文</p><h2 id="coding建立仓库"><a class="markdownIt-Anchor" href="#coding建立仓库"></a> Coding建立仓库</h2><p>点击导入外部仓库</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210408215137.png" style="zoom:67%;" /><p>后续按照提示操作即可，需要注意这里coding不支持导入私有仓库，而gitee支持导入github私有仓库，本文方法理论上适用gitee，有兴趣的朋友可以进行尝试。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210408215557.png" style="zoom: 67%;" /><p>完成创建后，可以在代码仓库的设置中设置同步信息，设置自动同步触发时间，同时勾选自动同步。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210408215521.png" style="zoom: 50%;" /><p>自此，等待自动同步完成后，就可以开启网站托管服务了，与其他coding建站方式相同，这里不再进行赘述。</p><h2 id="开启自定义域名"><a class="markdownIt-Anchor" href="#开启自定义域名"></a> 开启自定义域名</h2><p>进入网站托管界面，在自定义域名界面新建域名。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210408215943.png" style="zoom: 67%;" /><p>输入域名之后需要按照提示在自己的域名解析处添加一个CNAME指向，这里我设置将国内访问指向coding，国外访问指向github。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210408220357.png" alt="" /></p><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210408220712.png" style="zoom:67%;" /><p>可以看到，正确地将国内国外访问进行了分流，而因为没有备案的关系，只能先将网站放在coding的香港服务器，后续备案之后可以将网站部署到国内节点，提供更快访问速度。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机教程收集</title>
    <link href="/2021/03/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E7%A8%8B%E6%94%B6%E9%9B%86/"/>
    <url>/2021/03/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E7%A8%8B%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="集合一些优质教程-环境配置博客"><a class="markdownIt-Anchor" href="#集合一些优质教程-环境配置博客"></a> 集合一些优质教程、环境配置博客</h2><p>省的以后再找</p><h4 id="git"><a class="markdownIt-Anchor" href="#git"></a> GIT</h4><p>[廖雪峰的Git教程] <a href="https://www.liaoxuefeng.com/wiki/896043488029600/898732792973664">https://www.liaoxuefeng.com/wiki/896043488029600/898732792973664</a></p><h4 id="nodejs"><a class="markdownIt-Anchor" href="#nodejs"></a> Nodejs</h4><p>[菜鸟教程-Nodejs] <a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p><h4 id="anaconda-pytorch-cuda"><a class="markdownIt-Anchor" href="#anaconda-pytorch-cuda"></a> Anaconda pytorch cuda</h4><p>[Windows10安装Anaconda+Pytorch+Cuda]<a href="https://blog.csdn.net/xbinworld/article/details/104137177">https://blog.csdn.net/xbinworld/article/details/104137177</a><br />[Jupyter Notebook中切换conda虚拟环境] <a href="https://zhuanlan.zhihu.com/p/139776843">https://zhuanlan.zhihu.com/p/139776843</a></p><h4 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h4><p>[Windows下安装JDK11生成JRE] <a href="https://blog.csdn.net/qq_22136439/article/details/103295019">https://blog.csdn.net/qq_22136439/article/details/103295019</a><br />[JDK11 JAVA11下载安装与快速配置环境变量教程] <a href="https://blog.csdn.net/weixin_40928253/article/details/83590136">https://blog.csdn.net/weixin_40928253/article/details/83590136</a></p><h4 id="clion"><a class="markdownIt-Anchor" href="#clion"></a> CLION</h4><p>Windows上CLion配置和使用教程 <a href="https://www.jb51.net/article/193508.htm">https://www.jb51.net/article/193508.htm</a></p><h4 id="flutter"><a class="markdownIt-Anchor" href="#flutter"></a> Flutter</h4><p>在Windows上搭建Flutter开发环境 <a href="https://flutterchina.club/setup-windows/">https://flutterchina.club/setup-windows/</a></p><h4 id="picgo"><a class="markdownIt-Anchor" href="#picgo"></a> PicGo</h4><p>PicGo + Gitee(码云)实现markdown图床 - LeonG的文章 - 知乎 <a href="https://zhuanlan.zhihu.com/p/102594554">https://zhuanlan.zhihu.com/p/102594554</a></p>]]></content>
    
    
    <categories>
      
      <category>技术杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>202103月总结</title>
    <link href="/2021/03/30/202103%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    <url>/2021/03/30/202103%E6%9C%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3147b516c4537658f24754e1ca3506f04a88d129ad5e0a60329c4ebc985eba8b">c510d3730bac0c211fca9945baa3bb1b7673449f0a9b0b65e62b0d7511183c6c29902350b0f234ac481b31e4ecb87f9980147b584c85d5782810a5da445587d6462ad5a41b709b769b89969f2d7e429ab65780b397fee14e892465992ebd3fb7b6df2cb9e0dbe86abb51c6e52d0de0e2696fe45a367e62ad55dae155983ac94a5cde05e0e9f7582d1cd3212b1fd199b5876ede1c5329c85051e21c6a2a840402f6d18821b8e2765c4ceb76f88f6bb318a05a09c937f7c99a3835f72c781cf1d395407b5994ecd2e24a06df63a54914f35dfc9a3dc75000bc430693410b35d495f6b39dd267cd07f327d28496cdb0d0395c6386ea26dc85123eebfb6eae57adfcbc375548cf44485c1bee64efbdea7e15b219d775a7af5319c38d4536dc04db8ac2ad5574c1f7a70efc2677d05fa16cb72d0792fe801ef5d354231f4a1b6bbbb700189d631c5b95afeff8f136c62428b68f258bb4e0ca423048571f94ef4eadb61d5f7ddcb2849eca1a14a351e1505e654f4afb85249f697b0781d652d0fe5d7cfdc3ff7f90e21ef563fd0da9c7854667042234809d5387eac30b88b8048946642a1eb5ab69094290520fffc760e8b60f17f4a23851663a94e02277307be7acab8952d29eff50ba27f64b1e09381002a320b929505db66ef4931b07b8e273292e3735e9f5f7d858356029c6ba2dbbe5b639eb55f383036f6afd43f23957793c6e8d3075495f1bd2963ec2f0528fbbc6c39d939646324a67455d37035a58e50908a8ff2bc50152ac129e0b0db2818e2613c118e012cafd6ab5841a0ce09aa78077cbcee62e6e924cf47571d6e941f4a1b7718e248a674f1957acce54796da18ddb2e0419fbed648ce7be40aa3f0cc6041ea007be460c25b4085d093e8420658dfba1fdceb9bc8bdd2a79c3dcbdd2a0e6fdabc6789962136d57e4a09d7c013a9df3a70d3f4598844fd9c96afb5c320cb4348d12c2e1a61e275b0df31679cc8cff68fa6c9442d39649c616c97455c13ebabd73402baf79e2d4667c02bfce2f9e1e9e2dab4012822148111dd95b312cd2e19e9483cea53ea3e84c2b4c3cd09966eb713a781bcc9a62c46daa8565f82d7aec9464d0f282460a0be0e7af1463f23950762ab3421aa05c0358a1ba196244e4469ed449dfb1a5dee06ba1efb2e75fad978f7c7d31ef5f95951e8a3264812c91dbff16b15818993f069ad88b36c8c835a105a444fda4e6a3fc09e18edd13fdd91c90c14a42f13add30b772643119c5dff3666831ef42cd919e9ba4d848a97e4eac82332b7cf918ed06ec355afb1ebb968d33b9cca7ecfb561c29e1d86d95e9384e121d830c257706730e22185607cbe9b2495cbe7dfbbde0fc83b19b0e8cba301a523c4037cc8e5bf29a9a566b01ec151f1bef53d8ee9d1ee14d696238789e48f7a504c794d1a9525a47627650dc7dbfffc9c566c64f5c761ead42dd05254f8835f1a630fc29b5211bcbb82b7fe6cbaafca4a22e4eb13d7bae3073240b44471e16bbc26d91b0333cc953b93805cbb8488772fe7ea1d0045580b1f7e8b3226399150fc6e642252f2494b8348eeb5a400abcfe4eca80b3dd052ab65de42eef2cd2d176</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>个人总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杭电计算机2021考研经验</title>
    <link href="/2021/03/29/%E6%9D%AD%E7%94%B5%E8%AE%A1%E7%AE%97%E6%9C%BA2021%E8%80%83%E7%A0%94%E7%BB%8F%E9%AA%8C/"/>
    <url>/2021/03/29/%E6%9D%AD%E7%94%B5%E8%AE%A1%E7%AE%97%E6%9C%BA2021%E8%80%83%E7%A0%94%E7%BB%8F%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>记录一下这一年备考的经历与经验，算是给上岸的自己一个交待，也给后来者一些建议。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210330110722.jpg" style="zoom:67%;" /><h2 id="考研之前-择校"><a class="markdownIt-Anchor" href="#考研之前-择校"></a> 考研之前 · 择校</h2><p>考研择校是考研非常重要的一环，能否上岸很大程度上取决于你报考的学校。归根结底，你需要选择适合自己的学校。</p><ul><li><p><strong>未来发展规划</strong></p><p>我认为首先需要考虑的就是你的未来规划，你毕业后想去哪个城市发展，想进公司还是想进体制内找个稳定工作。如果想进公司的，优先考虑地域好，计算机实力强的院校，比如杭电、深大、西电、北邮这类的学校，就业比较好；如果想进体制的，那么考个211以上的学校会比较好。</p></li><li><p><strong>了解意向院校的信息</strong></p><p>有了大致的范围之后就要去了解意向院校的招生信息，这个时候不仅要了解<strong>分数线</strong>，所考<strong>专业课</strong>也非常重要。例如杭电的11408（数一英一408），基本算是计算机院校中比较难的专业课了（当然今年的408偏简单），而且问题在于复习周期长，数一三本书，408四本书，茫茫多的知识点需要你复习，所以如果你只有半年备考时间就不要选择这类学校了，除非你本科408和数学都学得很好且没有忘记。有些学校分数线很高，但其实专业课简单，有些学校分数线较低，但是专业课很难甚至压分，也需要自己进行一个判断。对于计算机科班学生来讲，我个人比较推荐11408或者22408的学校，因为专业课较多，容易发挥自身科班的优势。同时今年的形势来看，改考408的学校会越来越多，调剂上会比较方便。</p><p>其次，<strong>招生计划人数</strong>也很重要，招生多的学校分数线会相对稳定，就算有涨跌也是跟着当年考试难度变化，而招生人数极少的学校就要看运气了，有可能可以捡漏，也有可能是暴雷。举个例子吧，杭电今年不乏400+大佬，但是总的招生人数较多，所以分数线还是在300左右，总的来讲没有变化太明显。</p></li></ul><h2 id="全力备考-复习"><a class="markdownIt-Anchor" href="#全力备考-复习"></a> 全力备考 · 复习</h2><p>选完学校就是根据该校的报考科目进行复习，这里分享一下自己11408的复习情况。</p><h4 id="数学一"><a class="markdownIt-Anchor" href="#数学一"></a> 数学一</h4><p>数学名师很多，选一个喜欢的跟就行，个人跟的是张宇，主要还是因为他的书比较好看2333，以及他的书有整理比较好的思维导图，我用Margin note配合他的导图整理了数学思维导图、公式图，用来记忆非常有效果，个人感觉数学背诵一些公式还是很有必要的。顺便线代还是万年不变李永乐，没有对比过宇哥和李永乐线代的区别，但是李永乐的线代听起来是真的舒服又有用。另外需要提醒的是<strong>数学千万不要光顾着听课不做题</strong>，我前期就是只听了课忽略了做题，听完一讲做一讲的题还是很有必要的，前期做题的比例至少要占数学时间的一半，后期听完了提高班之后自然是一直做题刷题。我是三四月份开始复习听网课，9月听完强化班，做题上做了30讲、36讲的课后题加上一千题的ab组，然后刷了05-20的真题。</p><h4 id="英语一"><a class="markdownIt-Anchor" href="#英语一"></a> 英语一</h4><p>英语方面我比较特殊，我几乎没有进行像样的英语复习。英语单词只在暑假背了恋恋有词核心篇，截止到考试也只做了大概五六套的英语真题。但是作文上我根据公众号整理的刘晓燕的作文课笔记认真整理了几篇自己的模板，整理了各处都有啥句子可以用，总体来讲在英语上面花点时间很少了。</p><p>不过我这样做是有前提的，首先我报考的院校对英语没有什么要求，而像34所这些大多会划英语单科线，然后有些院校复试时会考英语或者全英文问答，这些院校则英语需要多加功夫；其次我暑假没开始复习英语前先尝试做了一份英语真题，发现阅读完型正确率在50-60左右，那么到时候我应该也能考到50、60的样子，我觉得这个分数已经足够了，所以我就把心思全花在了数学和专业课上，事实证明我的选择是正确的。</p><p>所以这里我想说，英语复习还是要按照自己的基础来，我的四级分数546，六级471，再加上做了真题感觉已经到了我的目标院校要求了，所以就没花啥心思。这里真是想批一下培训机构，暑假我去一个机构问了下课程，不过最后没有报，留了电话。后面那个人就一直打电话过来问我复习情况，然后和我说英语还是需要多复习之类的，事实证明就是想吸引我买课罢了。但是也有不少人因为总分挺高最后英语不过线的，还是要根据<strong>自己的基础</strong>以及<strong>目标院校的要求</strong>来。</p><h4 id="政治"><a class="markdownIt-Anchor" href="#政治"></a> 政治</h4><p>政治没啥好说的，今年是肖秀荣大杀四方的一年，我们都是肖老答案的搬运工。这门课真的是不需要太早复习，极限情况下考前一两星期背下肖四就完了，今年的政治大题全是肖四里的。正经复习建议的话，11月份之前就听听徐涛的课，不建议拿整段时间听，中午晚上休息时间听几节就行，主要是对知识点有个印象，然后做肖秀荣一千题里的选择部分，刷完就行。学有余力的可以买一本背书的小册子，比如徐涛冲刺背诵笔记之类的背一点。接下来重点来了，肖八肖四重点复习，一定要做完，特别是肖四的大题要全部背下来，政治的大题靠肖四那些东西够用了。</p><p>最后还是要提醒一句，根据自己情况来，如果你报考的院校专业课很简单拉不开分差，那么应该在英语政治上花多点功夫。</p><h4 id="专业课408"><a class="markdownIt-Anchor" href="#专业课408"></a> 专业课408</h4><p>说实话，今年408真的简单，并且考在我会的点上，也算是运气好了。408的复习建议早点开始，王道的四本书、课后题配合王道的课程，反复刷反复复习，408知识点多，想考的深也可以很深，真题也可以多刷几轮，个人理解408就是需要记忆很多知识点。第一轮复习可以先不做大题，第二轮就要做大题了。同样建议自己整理或者购买王道的思维导图或者网上寻找其他人整理的思维导图配合进行复习。</p><h2 id="初试之后-规划"><a class="markdownIt-Anchor" href="#初试之后-规划"></a> 初试之后 · 规划</h2><p>初试之后我相信大部分人会不太适应，自身在考研期间养成的一套规律而高效的作息一下子没了动力持续，接下来除了玩不知道该干嘛。我的建议是有条件的可以去找一份实习做做，不用纠结什么岗位，早点接触下社会，同时锻炼、保持下自己的代码能力。最后复试时也能写一段经历。而且从我个人体会来看，一年的复习会让你的代码能力生疏不少，所以还是要进行一些练习，万一考不上，找工作方便，考上了，那就辞了实习专心复试。</p><h2 id="黎明之前-复试"><a class="markdownIt-Anchor" href="#黎明之前-复试"></a> 黎明之前 · 复试</h2><p>复试主要针对杭电，杭电的复试还是比较公平的，21年的是线上复试，没有机试环节，总共大概是三个环节，第一个是中英文自我介绍，总共三分钟，然后会根据你的自我介绍、简历提一些问题，然后是抽题环节，都是事先出好的题，总共三个，英语题（英语口语回答），程序阅读题（代码填空），专业题（数据结构、机组、操作系统三本书范围内出一个小问题，个人感觉机组操作系统会比较多），最后一个环节是自由提问，一般是提问除以上三门以外的计算机专业课，计算机网络，软件工程，数据库，编译原理这些。</p><p>杭电复试之前不需要提前联系导师，会先有一些实验室进行提前面试，等复试完之后会下发导师学生双选表，一般会在实验室里面选导师。没有进实验室也不用急，过了复试就一定会有老师收的，后面会进行分配。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>考研的这一年确实比较累，但也是累的很充实，更重要的是让我养成了学习的习惯和静下心来学习的能力。希望能够在研究生学习中继续保持，也预祝看到这里的你能够顺利上岸。</p>]]></content>
    
    
    <categories>
      
      <category>杂文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的目标</title>
    <link href="/2021/02/16/%E6%88%91%E7%9A%84%E7%9B%AE%E6%A0%87/"/>
    <url>/2021/02/16/%E6%88%91%E7%9A%84%E7%9B%AE%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3c5afd52b87e640baa11b2b3cb0375d55bb6e41f8bdbb47a01f132228ce75dcc">c510d3730bac0c211fca9945baa3bb1b7673449f0a9b0b65e62b0d7511183c6c878be672cef05fe788fa26ebf054de0916a3bd9f91e38fe464bde95d01354b3f95e1b9565db3234b99d956f309f0766451d600ddb4c468274ac47910be17965d5a0dc0002e1b47e5314a396a8b3a0fcebc1745aa589d1e8dec5149400db25790708458d5d2a678c03ffcc14e99403959ca29ad6b496e3094a5f16e8dd1f32b30b527d72dc8fd0156353d8ca66e44f2370f9ee432fda35d216975d7fea58690115413ef889d488a1d628952c31c1092a4ace2272b0a8c6732b82b8353e3fa43b4f5e970a346eb7d854c805eb38b3d0f08a4c8bb81692c342d1398593ef7d853f7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>杂文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大学四年总结——我做到了什么</title>
    <link href="/2021/02/16/%E5%A4%A7%E5%AD%A6%E5%9B%9B%E5%B9%B4%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E6%88%91%E6%9C%89%E4%BD%95%E6%88%90%E6%9E%9C/"/>
    <url>/2021/02/16/%E5%A4%A7%E5%AD%A6%E5%9B%9B%E5%B9%B4%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E6%88%91%E6%9C%89%E4%BD%95%E6%88%90%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3c9fd168e9bc2da3bc3745f794d7e15bc749e347d7815939bf9c6a19c35b6758"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>杂文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人成长</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派外接硬盘实现简易NAS功能</title>
    <link href="/2021/02/08/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%A4%96%E6%8E%A5%E7%A1%AC%E7%9B%98%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93NAS%E5%8A%9F%E8%83%BD/"/>
    <url>/2021/02/08/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%A4%96%E6%8E%A5%E7%A1%AC%E7%9B%98%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93NAS%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>众所周知，树莓派又叫吃灰派，在下这个树莓派大一入手，一直在家默默吃灰到大三，着实惭愧。将它用起来的契机，是这场疫情导致在家呆了半年，所谓饱暖思淫欲，吃饱没事干，就想着找点好玩的事情干干，正好家里有一台古老的PC，配置是E8200，2g内存，当初就是在这台丐得不行的机子上玩mc、给手机刷机。。。上了大学之后就看不上这个配置放那吃灰了。有了这个空就想着给这个机子弄个用途。想来想去，做成NAS吧！早就听闻NAS的种种好处，就鼓捣鼓捣给它刷了黑群晖，不过运行了几天就出现主板电池没电，换了电池还是有开不了机的问题，就懒得去修了让它寿终正寝吧，但是尝到了鼓捣的甜头的我又开始把目光转向了树莓派，树莓派可玩性就太强了，综合考虑，我给他刷了openwrt用来科学上网，给我的卧室带来了free的上网体验。这篇文章就是基于树莓派的openwrt系统，外接一块硬盘实现的一次探索。</p><h2 id="准备工作环境"><a class="markdownIt-Anchor" href="#准备工作环境"></a> 准备工作&amp;环境</h2><p>一块刷入了openwrt的树莓派，具体刷入教程网上有很多，本人使用的固件来自https://mlapp.cn/369.html，这位大佬做的固件很不错，各类插件齐全，界面也很好看。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210209110514.png" alt="" /></p><h2 id="配置外接硬盘"><a class="markdownIt-Anchor" href="#配置外接硬盘"></a> 配置外接硬盘</h2><p>一块移动硬盘，我这里已经提前格式化为ext4系统了，不确定其他文件类型能否被openwrt识别。</p><p>插入硬盘之后openwrt会进行自动挂载，可以在磁盘管理与挂载点中查看。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210209113653.png" alt="" /></p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210209113735298.png" alt="image-20210209113735298" /></p><p>若没有进行自动挂载，需要在挂载点中手动挂载。不过个人认为磁盘管理中有识别到<code>/dev/sda</code>等应该就可以进行后续操作。</p><p>其中<code>sda</code>即指第一块硬盘，<code>sda1</code>指<code>sda</code>硬盘的第一个分区，后续分区为<code>sda2</code>，<code>sda3</code>……</p><p>第二、三块硬盘即为<code>sdb</code>、<code>sdc</code>……</p><h2 id="硬盘分区与格式化"><a class="markdownIt-Anchor" href="#硬盘分区与格式化"></a> 硬盘分区与格式化</h2><p>进入openwrt界面的终端，输入命令<code>fdisk /dev/sda</code>管理该硬盘：</p><ul><li>输入<code>m</code>查看命令表</li><li>输入<code>p</code>显示当前分区信息</li><li>输入<code>d</code>删除分区</li><li>输入<code>n</code>新建分区，后续会选择新建主分区或逻辑分区，输入<code>p</code>新建主分区即可。</li><li>最后输入<code>w</code>保存退出。</li></ul><p>新建完成之后，进行格式化，命令为：<code>mkfs.ext4 /dev/sda1</code></p><p>若无法进行格式化，先取消共享、挂载之后再尝试<code>umount /dev/sdb1 /mnt/sdb1</code></p><p>我将其分了两个区，每个分区新建完之后都要进行格式化。然后会自动挂载，若没有自动挂载需要手动进行挂载。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210209161444.png" alt="" /></p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210209161531.png" alt="" /></p><p>至此就完成了openwrt的外接硬盘操作，后续要接用插件来实现网络存储功能。</p><h2 id="使用可道云配置一个个人网盘"><a class="markdownIt-Anchor" href="#使用可道云配置一个个人网盘"></a> 使用可道云配置一个个人网盘</h2><p>配置好硬盘之后使用可道云可以说是傻瓜操作，配置一下相关参数即可，监听端口等都可以不用改或者根据自己需求修改，主要就是设备路径需要保证已经顺利挂载，然后保存应用后点击<code>手动更新</code>，找到新版本后此按钮会变为<code>点击更新</code>，再次点击更新，过一会等他自动更新完成就可以访问了。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210209164252.png" style="zoom:67%;" /><p>更新完之后<code>/mnt/sda1/kodexplorer/</code>目录就会自动创建。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210209164745.png" style="zoom:67%;" /><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210209165211.png" alt="" /></p><p>此后，访问openwrt的相应端口即可访问可道云，如我的是<code>192.168.1.50:8082</code>，相应的如果你拥有公网ip或者做了内网穿透的话，也可以在外地来访问家中的可道云，例如动态公网ip配合DDNS把自己的域名解析到家中，再路由器设置端口映射来实现外部访问。</p><h2 id="使用网络共享配置一个家庭网络磁盘"><a class="markdownIt-Anchor" href="#使用网络共享配置一个家庭网络磁盘"></a> 使用网络共享配置一个家庭网络磁盘</h2><p>配置好外接硬盘后，在网络共享处添加共享目录，软件名随意，目录设置为想要共享的目录，我填写了我的第二个分区，允许用户写空，后续设置按图即可。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210209165315.png" alt="" /></p><p>之后需要在编辑模板处在<code>invalid users = root</code>前加一个<code>#</code>将其注释掉，如图所示。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210209165542.png" style="zoom: 67%;" /><p>点击保存应用，之后在PC端文件资源管理器中打开你的openwrt的ip地址，如<code>\\192.168.1.50</code>就会看到你之前配置的共享目录了，右键即可将其映射为网络驱动器。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210209165812.png" style="zoom:67%;" /><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210209165858.png" style="zoom:67%;" /><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p>[教程] 软路由之openwrt挂载硬盘和开启共享https://koolshare.cn/thread-188012-1-1.html</p>]]></content>
    
    
    <categories>
      
      <category>技术杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为你的博客开启HTTPS支持</title>
    <link href="/2021/01/30/%E4%B8%BA%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%90%AFHTTPS%E6%94%AF%E6%8C%81/"/>
    <url>/2021/01/30/%E4%B8%BA%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%90%AFHTTPS%E6%94%AF%E6%8C%81/</url>
    
    <content type="html"><![CDATA[<p><strong>HTTPS</strong>（Hypertext Transfer Protocol Secure：超文本传输安全协议）是一种透过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p><h5 id="简而言之https使得你的网站更加安全许多搜索引擎也将其作为网站排名的一个参考因素更重要的使用chrome访问你的博客时不再有不安全的标识了而且如今基于gitpages的博客开启https支持真的很简单"><a class="markdownIt-Anchor" href="#简而言之https使得你的网站更加安全许多搜索引擎也将其作为网站排名的一个参考因素更重要的使用chrome访问你的博客时不再有不安全的标识了而且如今基于gitpages的博客开启https支持真的很简单"></a> 简而言之，HTTPS使得你的网站更加安全，许多搜索引擎也将其作为网站排名的一个参考因素，更重要的，使用Chrome访问你的博客时不再有<code>不安全</code>的标识了！而且，如今基于gitpages的博客开启HTTPS支持真的很简单。</h5><p>按照之前的博客中的方式搭建好博客之后，进入<code>github.io</code>仓库的<code>Settings</code>页，在<code>Option</code>-<code>Git Pages</code>中找到<code>Enforce HTTPS</code>一项，勾选即可。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210130171451.png" style="zoom:80%;" />]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用GitAction更优雅地写博客</title>
    <link href="/2021/01/28/%E4%BD%BF%E7%94%A8GitAction%E6%9B%B4%E4%BC%98%E9%9B%85%E5%9C%B0%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/01/28/%E4%BD%BF%E7%94%A8GitAction%E6%9B%B4%E4%BC%98%E9%9B%85%E5%9C%B0%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>两年前就有搞过自己的Hexo博客，然而后来因为感觉写起来太复杂烦乱，要用一堆命令就弃了（其实就是懒+菜）。</p><p>现在终于找到了比较优雅的写博客方式，将博客的源码存放到github仓库，然后每次写博客只需用git push的方式提交到该源码仓库中，然后用GitActions自动部署到博客仓库即可，可以很方便地在不同的电脑上撰写更新博客。</p><h2 id="一-提交博客源码到github仓库"><a class="markdownIt-Anchor" href="#一-提交博客源码到github仓库"></a> 一、提交博客源码到github仓库</h2><p>根据之前的<a href="http://blog.pokestar.wang/2021/01/28/%E4%BD%BF%E7%94%A8Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">使用Hexo-github搭建个人博客</a>，我们现在已经有了一个存放博客静态文件的<code>github.io</code>仓库，我们还需要建立一个存放博客源码的仓库，因为源码涉及私人信息，建议设置为私有仓库（github现在已经支持免费的私有仓库搭建）。</p><p>即将此文件夹上传至私有源码仓库。可以看到Hexo在创建时已经建立了<code>gitignore</code>文件，去除了<code>node_modules</code> <code>public</code>等非源码文件，我们直接进行上传即可。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210129095101.png" style="zoom:80%;" /><h2 id="二-准备ssh密钥"><a class="markdownIt-Anchor" href="#二-准备ssh密钥"></a> 二、准备ssh密钥</h2><p>windows平台下可在<code>C:\Users\用户名\.ssh</code>下找到，.pub后缀的是公钥，无后缀的是私钥。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210129103531.png" alt="" /></p><h4 id="配置公钥"><a class="markdownIt-Anchor" href="#配置公钥"></a> 配置公钥</h4><p>只要你能正常git push就不用配置了，一般都是配置好的，没有配置可以在github个人设置里配置ssh公钥。</p><h4 id="配置私钥"><a class="markdownIt-Anchor" href="#配置私钥"></a> 配置私钥</h4><p>在私有仓库的Settings中的Secrets项，新增一个私钥，将<code>id_rsa</code>中的所有内容复制到value中，命名为<code>HEXO_DEPLOY_PRIVATE_KEY</code>（也可以自己命名，需要和后面workflow中一致）。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210129110312.png" style="zoom:80%;" /><h2 id="三-添加gitaction"><a class="markdownIt-Anchor" href="#三-添加gitaction"></a> 三、添加GitAction</h2><p>在私有源码项目中点击<code>Action</code>栏，添加一个<code>workflow</code>。</p><p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210129111638.png" alt="" /></p><p>github会自动生成一个<code>main.yml</code>文件，将以下代码复制到其中。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># workflow name</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Blog</span> <span class="hljs-string">CI</span><br><br><span class="hljs-comment"># 当main branch有push时自动运行</span><br><span class="hljs-attr">on:</span> <br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br>      <br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span> <br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span> <br>        <br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-comment"># 切换到main branch</span><br>    <span class="hljs-comment"># from: https://github.com/actions/checkout</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">Repository</span> <span class="hljs-string">main</span> <span class="hljs-string">branch</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@main</span> <br>      <br>    <span class="hljs-comment"># from: https://github.com/actions/setup-node  </span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node.js</span> <span class="hljs-number">12.</span><span class="hljs-string">x</span> <br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@main</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;12.x&quot;</span><br>    <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Dependencies</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-cli</span> <span class="hljs-string">-g</span><br>        <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br>    <br>    <span class="hljs-comment"># 使用你之前配置的私钥名 </span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Private</span> <span class="hljs-string">Key</span><br>      <span class="hljs-attr">env:</span><br>        <span class="hljs-attr">HEXO_DEPLOY_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.HEXO_DEPLOY_PRIVATE_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">~/.ssh/</span><br>        <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$HEXO_DEPLOY_PRIVATE_KEY&quot;</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">~/.ssh/id_rsa</span> <br>        <span class="hljs-string">chmod</span> <span class="hljs-number">600</span> <span class="hljs-string">~/.ssh/id_rsa</span><br>        <span class="hljs-string">ssh-keyscan</span> <span class="hljs-string">github.com</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">~/.ssh/known_hosts</span><br>        <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Git</span> <span class="hljs-string">Infomation</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span> <br>        <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.name</span> <span class="hljs-string">&#x27;&lt;你的用户名&gt;&#x27;</span> <br>        <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.email</span> <span class="hljs-string">&#x27;&lt;你的登录邮箱&gt;&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Hexo</span> <br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">hexo</span> <span class="hljs-string">clean</span><br>        <span class="hljs-string">hexo</span> <span class="hljs-string">generate</span> <br>        <span class="hljs-string">hexo</span> <span class="hljs-string">deploy</span><br></code></pre></td></tr></table></figure><p>点击提交，之后每次push源码后，GitAction就会自动直径这些操作。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210129112550.png" style="zoom: 50%;" /><p>此后，只需对私有源码仓库进行<code>git push</code>即可自动更新博客。</p><p>更换电脑、重装系统后只需<code>git clone</code>源码项目后使用<code>git add</code>手动添加md文件或者在线添加md文件到<code>/source</code>目录下即可。若需要使用<code>hexo new &quot;blogname&quot;</code>自动生成新博客，需要使用npm安装hexo之后使用命令<code>npm install hexo-deployer-git</code>。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://darlewo.cn/Github_Actions_Blog_Automation_deploying.html">https://darlewo.cn/Github_Actions_Blog_Automation_deploying.html</a> Github Actions全自动博客部署</p><p><a href="https://blog.csdn.net/qq_41426117/article/details/108703295">https://blog.csdn.net/qq_41426117/article/details/108703295</a> GitHub Action + Hexo实现在线写作</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo&amp;github搭建个人博客</title>
    <link href="/2021/01/28/%E4%BD%BF%E7%94%A8Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/01/28/%E4%BD%BF%E7%94%A8Hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="一-环境与准备工作"><a class="markdownIt-Anchor" href="#一-环境与准备工作"></a> 一、环境与准备工作</h2><ul><li><p>github账号</p></li><li><p>安装nodejs npm git</p></li></ul><h5 id="本文环境"><a class="markdownIt-Anchor" href="#本文环境"></a> 本文环境</h5><ul><li><p>win10</p></li><li><p>node.js v10.13</p></li></ul><h2 id="二-搭建gitpage博客"><a class="markdownIt-Anchor" href="#二-搭建gitpage博客"></a> 二、搭建gitpage博客</h2><h3 id="搭建仓库"><a class="markdownIt-Anchor" href="#搭建仓库"></a> 搭建仓库</h3><p>新建一个名为<code>你的用户名.github.io</code>的仓库，同时也是你的博客访问地址，比如<code>http://yourname.github.io</code>。 此仓库默认开启gitpages功能。</p><h3 id="绑定域名"><a class="markdownIt-Anchor" href="#绑定域名"></a> 绑定域名</h3><p>以阿里云为例，购买一个域名之后在域名解析中配置一个CNAME记录，使得你的域名可以定向到<code>yourname.github.io</code>。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/屏幕截图 2021-01-28 221903.jpg" style="zoom:80%;" /><h4 id="添加cname文件"><a class="markdownIt-Anchor" href="#添加cname文件"></a> 添加CNAME文件</h4><p>在github.io项目根目录创建一个名为CNAME的文件（无后缀），填写域名，将你的域名与github.io绑定</p><h3 id="绑定ssh-key"><a class="markdownIt-Anchor" href="#绑定ssh-key"></a> 绑定ssh key</h3><p>链接本地与github，具体见百度。</p><h2 id="三-搭建本地hexo"><a class="markdownIt-Anchor" href="#三-搭建本地hexo"></a> 三、搭建本地Hexo</h2><p>官网： <a href="http://hexo.io/">http://hexo.io</a></p><p>github: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></p><h4 id="安装hexo"><a class="markdownIt-Anchor" href="#安装hexo"></a> 安装Hexo</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g hexo<br></code></pre></td></tr></table></figure><h4 id="初始化hexo"><a class="markdownIt-Anchor" href="#初始化hexo"></a> 初始化Hexo</h4><p>新建一个文件夹存放Hexo博客相关文件，如<code>F:\Blog</code>，在此文件夹下运行命令。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>hexo会自动下载相关文件完成初始化。</p><img src="https://gitee.com/pokestar/image-bed/raw/master/img2021/20210128225245.png" style="zoom: 80%;" /><h4 id="启动hexo本地服务"><a class="markdownIt-Anchor" href="#启动hexo本地服务"></a> 启动Hexo本地服务</h4><p>至此Hexo已经可以在本地运行查看博客界面了！</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo g # <span class="hljs-keyword">generate</span> 生成<br>hexo s # server 启动服务<br></code></pre></td></tr></table></figure><p>执行命令后在public文件夹生成静态html文件。打开 <a href="http://localhost:4000">http://localhost:4000</a> 即可查看。</p><p>初始会生成一篇名为Hello World的博客文章。</p><h4 id="修改一个自己喜欢的主题"><a class="markdownIt-Anchor" href="#修改一个自己喜欢的主题"></a> 修改一个自己喜欢的主题</h4><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a> 在Hexo的官方网站可以浏览各类主题，挑选自己喜欢的，也可以去知乎等网站搜索别人推荐的一些主题。个人使用的是这个https://hexo.fluid-dev.com/docs/。</p><p>根据每个主题的readme来配置。</p><h2 id="四-将本地hexo上传github"><a class="markdownIt-Anchor" href="#四-将本地hexo上传github"></a> 四、将本地Hexo上传github</h2><ul><li><p>首先确定ssh配置完成</p></li><li><p>安装部署插件</p></li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><ul><li>配置<code>_config.yml</code>文件</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">deploy</span>:<br>  <span class="hljs-attribute">type</span>: git<br>  <span class="hljs-attribute">repository</span>: git<span class="hljs-variable">@github</span>.<span class="hljs-attribute">com</span>:yourname/yourname.github.io.git<br>  <span class="hljs-attribute">branch</span>: master<br></code></pre></td></tr></table></figure><p>注意每一个冒号<code>:</code>后面需要跟一个空格。</p><ul><li><p>打开git bash 输入<code>hexo d</code>上传至github。</p></li><li><p>注意保证CNAME文件的存在。</p></li><li><p>hexo默认把md文件转换为html，需要在<code>_config.yml</code>文件中配置，找到<code>skip_render</code>参数，此参数基于source文件夹匹配，<a href="http://xn--README-2e4jg12p.md">添加README.md</a>，如下所示。</p></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">skip_render: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">README</span>.</span></span>md<br></code></pre></td></tr></table></figure><h4 id="至此博客搭建完成后续使用gitaction实现自动部署更优雅地写博客"><a class="markdownIt-Anchor" href="#至此博客搭建完成后续使用gitaction实现自动部署更优雅地写博客"></a> 至此博客搭建完成，后续使用GitAction实现自动部署，更优雅地写博客。</h4><h2 id="常用hexo命令"><a class="markdownIt-Anchor" href="#常用hexo命令"></a> 常用Hexo命令</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;postName&quot;</span> <span class="hljs-meta">#新建文章</span><br>hexo <span class="hljs-keyword">new</span> page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-meta">#新建页面</span><br>hexo clean  <span class="hljs-meta">#清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><br>hexo generate <span class="hljs-meta">#生成静态页面至public目录</span><br>hexo <span class="hljs-keyword">server</span> <span class="hljs-meta">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br>hexo deploy <span class="hljs-meta">#部署到GitHub</span><br>hexo help  <span class="hljs-meta"># 查看帮助</span><br>hexo version  <span class="hljs-meta">#查看Hexo的版本</span><br></code></pre></td></tr></table></figure><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B">http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa使用hexo+github搭建免费个人博客详细教程</a></li><li><a href="https://blog.csdn.net/ganzhilin520/article/details/79057774">https://blog.csdn.net/ganzhilin520/article/details/79057774</a> Hexo不渲染.md或者.html</li></ul>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
